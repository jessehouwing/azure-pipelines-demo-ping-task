/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var TfvcInterfaces = require("./interfaces/TfvcInterfaces");
var TfvcApi = (function (_super) {
    __extends(TfvcApi, _super);
    function TfvcApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Tfvc-api');
    }
    TfvcApi.prototype.getBranch = function (path, project, includeParent, includeChildren, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            includeParent: includeParent,
            includeChildren: includeChildren
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "bc1f417e-239d-42e7-85e1-76e80cb2d6eb", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcBranch, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getBranches = function (project, includeParent, includeChildren, includeDeleted, includeLinks, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            includeParent: includeParent,
            includeChildren: includeChildren,
            includeDeleted: includeDeleted,
            includeLinks: includeLinks
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "bc1f417e-239d-42e7-85e1-76e80cb2d6eb", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcBranch, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getBranchRefs = function (scopePath, project, includeDeleted, includeLinks, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            scopePath: scopePath,
            includeDeleted: includeDeleted,
            includeLinks: includeLinks
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "bc1f417e-239d-42e7-85e1-76e80cb2d6eb", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcBranchRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getChangesetChanges = function (id, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        var queryValues = {
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "f32b86f2-15b9-4fe6-81b1-6f8938617ee5", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChange, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.createChangeset = function (changeset, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "tfvc", "0bc8f0a4-6bfb-42a9-ba84-139da7b99c49", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangeset, responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangesetRef, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, changeset, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getChangeset = function (id, project, maxChangeCount, includeDetails, includeWorkItems, maxCommentLength, includeSourceRename, skip, top, orderby, searchCriteria, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            id: id
        };
        var queryValues = {
            maxChangeCount: maxChangeCount,
            includeDetails: includeDetails,
            includeWorkItems: includeWorkItems,
            maxCommentLength: maxCommentLength,
            includeSourceRename: includeSourceRename,
            '$skip': skip,
            '$top': top,
            '$orderby': orderby,
            searchCriteria: searchCriteria
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "tfvc", "0bc8f0a4-6bfb-42a9-ba84-139da7b99c49", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangeset, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getChangesets = function (project, maxChangeCount, includeDetails, includeWorkItems, maxCommentLength, includeSourceRename, skip, top, orderby, searchCriteria, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            maxChangeCount: maxChangeCount,
            includeDetails: includeDetails,
            includeWorkItems: includeWorkItems,
            maxCommentLength: maxCommentLength,
            includeSourceRename: includeSourceRename,
            '$skip': skip,
            '$top': top,
            '$orderby': orderby,
            searchCriteria: searchCriteria
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "tfvc", "0bc8f0a4-6bfb-42a9-ba84-139da7b99c49", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangesetRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getBatchedChangesets = function (changesetsRequestData, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "b7e7c173-803c-4fea-9ec8-31ee35c5502a", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangesetsRequestData, responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChangesetRef, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, changesetsRequestData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getChangesetWorkItems = function (id, onResult) {
        var _this = this;
        var routeValues = {
            id: id
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "64ae0bea-1d71-47c9-a9e5-fe73f5ea0ff4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.AssociatedWorkItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getItemsBatch = function (itemRequestData, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "fe6f827b-5f64-480f-b8af-1eca3b80e833", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItemRequestData, responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItem, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, itemRequestData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getItemsBatchZip = function (itemRequestData, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "fe6f827b-5f64-480f-b8af-1eca3b80e833", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItemRequestData, responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getItem = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            fileName: fileName,
            download: download,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItem, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getItemContent = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            fileName: fileName,
            download: download,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getItems = function (project, scopePath, recursionLevel, includeLinks, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            includeLinks: includeLinks,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getItemText = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            fileName: fileName,
            download: download,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "text/plain", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getItemZip = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            path: path,
            fileName: fileName,
            download: download,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "ba9fc436-9a38-4578-89d6-e4f3241f5040", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getLabelItems = function (labelId, top, skip, onResult) {
        var _this = this;
        var routeValues = {
            labelId: labelId
        };
        var queryValues = {
            '$top': top,
            '$skip': skip
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "06166e34-de17-4b60-8cd1-23182a346fda", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getLabel = function (labelId, requestData, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            labelId: labelId
        };
        var queryValues = {
            requestData: requestData
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "a5d9bd7f-b661-4d0e-b9be-d9c16affae54", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcLabel, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getLabels = function (requestData, project, top, skip, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            requestData: requestData,
            '$top': top,
            '$skip': skip
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "a5d9bd7f-b661-4d0e-b9be-d9c16affae54", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcLabelRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getProjectInfo = function (projectId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            projectId: projectId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "252d9c40-0643-41cf-85b2-044d80f9b675", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.VersionControlProjectInfo, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getProjectInfos = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "252d9c40-0643-41cf-85b2-044d80f9b675", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.VersionControlProjectInfo, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getShelvesetChanges = function (shelvesetId, top, skip, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            shelvesetId: shelvesetId,
            '$top': top,
            '$skip': skip
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "dbaf075b-0445-4c34-9e5b-82292f856522", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcChange, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getShelveset = function (shelvesetId, requestData, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            shelvesetId: shelvesetId,
            requestData: requestData
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "e36d44fb-e907-4b0a-b194-f83f1ed32ad3", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcShelveset, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getShelvesets = function (requestData, top, skip, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            requestData: requestData,
            '$top': top,
            '$skip': skip
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "e36d44fb-e907-4b0a-b194-f83f1ed32ad3", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.TfvcShelvesetRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TfvcApi.prototype.getShelvesetWorkItems = function (shelvesetId, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            shelvesetId: shelvesetId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "tfvc", "a7a0c1c1-373e-425a-b031-a519474d743d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TfvcInterfaces.TypeInfo.AssociatedWorkItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return TfvcApi;
})(basem.ClientApiBase);
exports.TfvcApi = TfvcApi;
var QTfvcApi = (function (_super) {
    __extends(QTfvcApi, _super);
    function QTfvcApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, TfvcApi);
    }
    QTfvcApi.prototype.getBranch = function (path, project, includeParent, includeChildren) {
        var deferred = Q.defer();
        this.api.getBranch(path, project, includeParent, includeChildren, function (err, statusCode, Branche) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Branche);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getBranches = function (project, includeParent, includeChildren, includeDeleted, includeLinks) {
        var deferred = Q.defer();
        this.api.getBranches(project, includeParent, includeChildren, includeDeleted, includeLinks, function (err, statusCode, Branches) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Branches);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getBranchRefs = function (scopePath, project, includeDeleted, includeLinks) {
        var deferred = Q.defer();
        this.api.getBranchRefs(scopePath, project, includeDeleted, includeLinks, function (err, statusCode, Branches) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Branches);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getChangesetChanges = function (id, skip, top) {
        var deferred = Q.defer();
        this.api.getChangesetChanges(id, skip, top, function (err, statusCode, ChangesetChanges) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ChangesetChanges);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.createChangeset = function (changeset, project) {
        var deferred = Q.defer();
        this.api.createChangeset(changeset, project, function (err, statusCode, Changeset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Changeset);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getChangeset = function (id, project, maxChangeCount, includeDetails, includeWorkItems, maxCommentLength, includeSourceRename, skip, top, orderby, searchCriteria) {
        var deferred = Q.defer();
        this.api.getChangeset(id, project, maxChangeCount, includeDetails, includeWorkItems, maxCommentLength, includeSourceRename, skip, top, orderby, searchCriteria, function (err, statusCode, Changeset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Changeset);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getChangesets = function (project, maxChangeCount, includeDetails, includeWorkItems, maxCommentLength, includeSourceRename, skip, top, orderby, searchCriteria) {
        var deferred = Q.defer();
        this.api.getChangesets(project, maxChangeCount, includeDetails, includeWorkItems, maxCommentLength, includeSourceRename, skip, top, orderby, searchCriteria, function (err, statusCode, Changesets) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Changesets);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getBatchedChangesets = function (changesetsRequestData) {
        var deferred = Q.defer();
        this.api.getBatchedChangesets(changesetsRequestData, function (err, statusCode, ChangesetsBatch) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ChangesetsBatch);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getChangesetWorkItems = function (id) {
        var deferred = Q.defer();
        this.api.getChangesetWorkItems(id, function (err, statusCode, ChangesetWorkItems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ChangesetWorkItems);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getItemsBatch = function (itemRequestData, project) {
        var deferred = Q.defer();
        this.api.getItemsBatch(itemRequestData, project, function (err, statusCode, ItemBatch) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ItemBatch);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getItemsBatchZip = function (itemRequestData, project) {
        var deferred = Q.defer();
        this.api.getItemsBatchZip(itemRequestData, project, function (err, statusCode, ItemBatch) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ItemBatch);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getItem = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItem(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getItemContent = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItemContent(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getItems = function (project, scopePath, recursionLevel, includeLinks, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItems(project, scopePath, recursionLevel, includeLinks, versionDescriptor, function (err, statusCode, Items) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Items);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getItemText = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItemText(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getItemZip = function (path, project, fileName, download, scopePath, recursionLevel, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItemZip(path, project, fileName, download, scopePath, recursionLevel, versionDescriptor, function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getLabelItems = function (labelId, top, skip) {
        var deferred = Q.defer();
        this.api.getLabelItems(labelId, top, skip, function (err, statusCode, LabelItems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(LabelItems);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getLabel = function (labelId, requestData, project) {
        var deferred = Q.defer();
        this.api.getLabel(labelId, requestData, project, function (err, statusCode, Label) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Label);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getLabels = function (requestData, project, top, skip) {
        var deferred = Q.defer();
        this.api.getLabels(requestData, project, top, skip, function (err, statusCode, Labels) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Labels);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getProjectInfo = function (projectId, project) {
        var deferred = Q.defer();
        this.api.getProjectInfo(projectId, project, function (err, statusCode, ProjectInfo) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ProjectInfo);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getProjectInfos = function (project) {
        var deferred = Q.defer();
        this.api.getProjectInfos(project, function (err, statusCode, ProjectInfo) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ProjectInfo);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getShelvesetChanges = function (shelvesetId, top, skip) {
        var deferred = Q.defer();
        this.api.getShelvesetChanges(shelvesetId, top, skip, function (err, statusCode, ShelvesetChanges) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ShelvesetChanges);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getShelveset = function (shelvesetId, requestData) {
        var deferred = Q.defer();
        this.api.getShelveset(shelvesetId, requestData, function (err, statusCode, Shelveset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Shelveset);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getShelvesets = function (requestData, top, skip) {
        var deferred = Q.defer();
        this.api.getShelvesets(requestData, top, skip, function (err, statusCode, Shelvesets) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Shelvesets);
            }
        });
        return deferred.promise;
    };
    QTfvcApi.prototype.getShelvesetWorkItems = function (shelvesetId) {
        var deferred = Q.defer();
        this.api.getShelvesetWorkItems(shelvesetId, function (err, statusCode, ShelvesetWorkItems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ShelvesetWorkItems);
            }
        });
        return deferred.promise;
    };
    return QTfvcApi;
})(basem.QClientApiBase);
exports.QTfvcApi = QTfvcApi;
