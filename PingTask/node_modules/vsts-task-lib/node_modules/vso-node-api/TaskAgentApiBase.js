/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var TaskAgentInterfaces = require("./interfaces/TaskAgentInterfaces");
var VSSInterfaces = require("./interfaces/common/VSSInterfaces");
var TaskAgentApiBase = (function (_super) {
    __extends(TaskAgentApiBase, _super);
    function TaskAgentApiBase(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-TaskAgent-api');
    }
    TaskAgentApiBase.prototype.addAgent = function (agent, poolId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, agent, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.deleteAgent = function (poolId, agentId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            agentId: agentId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.getAgent = function (poolId, agentId, includeCapabilities, includeAssignedRequest, propertyFilters, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            agentId: agentId
        };
        var queryValues = {
            includeCapabilities: includeCapabilities,
            includeAssignedRequest: includeAssignedRequest,
            propertyFilters: propertyFilters && propertyFilters.join(",")
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getAgents = function (poolId, agentName, includeCapabilities, includeAssignedRequest, propertyFilters, demands, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        var queryValues = {
            agentName: agentName,
            includeCapabilities: includeCapabilities,
            includeAssignedRequest: includeAssignedRequest,
            propertyFilters: propertyFilters && propertyFilters.join(","),
            demands: demands && demands.join(",")
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.replaceAgent = function (agent, poolId, agentId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            agentId: agentId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, agent, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.updateAgent = function (agent, poolId, agentId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            agentId: agentId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, agent, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.queryEndpoint = function (endpoint, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "f223b809-8c33-4b7d-b53f-07232569b5d6", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskDefinitionEndpoint, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, endpoint, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.deleteAgentRequest = function (poolId, requestId, lockToken, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            requestId: requestId
        };
        var queryValues = {
            lockToken: lockToken
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.getAgentRequest = function (poolId, requestId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            requestId: requestId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getAgentRequests = function (poolId, agentId, completedRequestCount, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        var queryValues = {
            agentId: agentId,
            completedRequestCount: completedRequestCount
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.queueAgentRequest = function (request, poolId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, request, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.updateAgentRequest = function (request, poolId, requestId, lockToken, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            requestId: requestId
        };
        var queryValues = {
            lockToken: lockToken
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, request, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.deleteMessage = function (poolId, messageId, sessionId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            messageId: messageId
        };
        var queryValues = {
            sessionId: sessionId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.getMessage = function (poolId, sessionId, lastMessageId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        var queryValues = {
            sessionId: sessionId,
            lastMessageId: lastMessageId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentMessage, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.refreshAgent = function (poolId, agentId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        var queryValues = {
            agentId: agentId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.refreshAgents = function (poolId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.sendMessage = function (message, poolId, requestId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        var queryValues = {
            requestId: requestId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentMessage, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, message, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.getPackage = function (packageType, onResult) {
        var _this = this;
        var routeValues = {
            packageType: packageType
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "8ffcd551-079c-493a-9c02-54346299d144", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskPackageMetadata, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getPackages = function (onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "8ffcd551-079c-493a-9c02-54346299d144", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskPackageMetadata, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getPackageZip = function (packageType, onResult) {
        var _this = this;
        var routeValues = {
            packageType: packageType
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "8ffcd551-079c-493a-9c02-54346299d144", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getAgentPoolRoles = function (poolId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "381dd2bb-35cf-4103-ae8c-3c815b25763c", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: VSSInterfaces.TypeInfo.IdentityRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.addAgentPool = function (pool, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, pool, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.deleteAgentPool = function (poolId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.getAgentPool = function (poolId, properties, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        var queryValues = {
            properties: properties && properties.join(",")
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getAgentPools = function (poolName, properties, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            poolName: poolName,
            properties: properties && properties.join(",")
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.updateAgentPool = function (pool, poolId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, pool, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getAgentQueueRoles = function (queueId, onResult) {
        var _this = this;
        var routeValues = {
            queueId: queueId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "b0c6d64d-c9fa-4946-b8de-77de623ee585", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: VSSInterfaces.TypeInfo.IdentityRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.addAgentQueue = function (queue, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentQueue, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentQueue, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, queue, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.deleteAgentQueue = function (queueId, onResult) {
        var _this = this;
        var routeValues = {
            queueId: queueId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.getAgentQueue = function (queueId, actionFilter, onResult) {
        var _this = this;
        var routeValues = {
            queueId: queueId
        };
        var queryValues = {
            actionFilter: actionFilter
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentQueue, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getAgentQueues = function (queueName, actionFilter, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            queueName: queueName,
            actionFilter: actionFilter
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentQueue, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.queryServiceEndpoint = function (binding, scopeIdentifier, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "e3a44534-7b94-4add-a053-8af449589c62", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.DataSourceBinding, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, binding, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.createServiceEndpoint = function (endpoint, scopeIdentifier, endpointId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            endpointId: endpointId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "ca373c13-fec3-4b30-9525-35a117731384", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.ServiceEndpoint, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.ServiceEndpoint, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, endpoint, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.deleteServiceEndpoint = function (scopeIdentifier, endpointId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            endpointId: endpointId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "ca373c13-fec3-4b30-9525-35a117731384", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.getServiceEndpointDetails = function (scopeIdentifier, endpointId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            endpointId: endpointId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "ca373c13-fec3-4b30-9525-35a117731384", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.ServiceEndpoint, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getServiceEndpoints = function (scopeIdentifier, type, authSchemes, endpointIds, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier
        };
        var queryValues = {
            type: type,
            authSchemes: authSchemes && authSchemes.join(","),
            endpointIds: endpointIds && endpointIds.join(",")
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "ca373c13-fec3-4b30-9525-35a117731384", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.ServiceEndpoint, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getServiceEndpointTypes = function (scopeIdentifier, type, scheme, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier
        };
        var queryValues = {
            type: type,
            scheme: scheme
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "7c74af83-8605-45c1-a30b-7a05d5d7f8c1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.ServiceEndpointType, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.createAgentSession = function (session, poolId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "134e239e-2df3-4794-a6f6-24f1f19ec8dc", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentSession, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentSession, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, session, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.deleteAgentSession = function (poolId, sessionId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            sessionId: sessionId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "134e239e-2df3-4794-a6f6-24f1f19ec8dc", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.deleteTaskDefinition = function (taskId, onResult) {
        var _this = this;
        var routeValues = {
            taskId: taskId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskAgentApiBase.prototype.getTaskContentZip = function (taskId, versionString, visibility, scopeLocal, onResult) {
        var _this = this;
        var routeValues = {
            taskId: taskId,
            versionString: versionString
        };
        var queryValues = {
            visibility: visibility,
            scopeLocal: scopeLocal
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getTaskDefinition = function (taskId, versionString, visibility, scopeLocal, onResult) {
        var _this = this;
        var routeValues = {
            taskId: taskId,
            versionString: versionString
        };
        var queryValues = {
            visibility: visibility,
            scopeLocal: scopeLocal
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskDefinition, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.getTaskDefinitions = function (taskId, visibility, scopeLocal, onResult) {
        var _this = this;
        var routeValues = {
            taskId: taskId
        };
        var queryValues = {
            visibility: visibility,
            scopeLocal: scopeLocal
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskAgentApiBase.prototype.updateAgentUserCapabilities = function (userCapabilities, poolId, agentId, onResult) {
        var _this = this;
        var routeValues = {
            poolId: poolId,
            agentId: agentId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "30ba3ada-fedf-4da8-bbb5-dacf2f82e176", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, userCapabilities, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return TaskAgentApiBase;
})(basem.ClientApiBase);
exports.TaskAgentApiBase = TaskAgentApiBase;
var QTaskAgentApiBase = (function (_super) {
    __extends(QTaskAgentApiBase, _super);
    function QTaskAgentApiBase(baseUrl, handlers, api) {
        _super.call(this, baseUrl, handlers, api);
    }
    QTaskAgentApiBase.prototype.addAgent = function (agent, poolId) {
        var deferred = Q.defer();
        this.api.addAgent(agent, poolId, function (err, statusCode, agent) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(agent);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.deleteAgent = function (poolId, agentId) {
        var deferred = Q.defer();
        this.api.deleteAgent(poolId, agentId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgent = function (poolId, agentId, includeCapabilities, includeAssignedRequest, propertyFilters) {
        var deferred = Q.defer();
        this.api.getAgent(poolId, agentId, includeCapabilities, includeAssignedRequest, propertyFilters, function (err, statusCode, agent) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(agent);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgents = function (poolId, agentName, includeCapabilities, includeAssignedRequest, propertyFilters, demands) {
        var deferred = Q.defer();
        this.api.getAgents(poolId, agentName, includeCapabilities, includeAssignedRequest, propertyFilters, demands, function (err, statusCode, agents) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(agents);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.replaceAgent = function (agent, poolId, agentId) {
        var deferred = Q.defer();
        this.api.replaceAgent(agent, poolId, agentId, function (err, statusCode, agent) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(agent);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.updateAgent = function (agent, poolId, agentId) {
        var deferred = Q.defer();
        this.api.updateAgent(agent, poolId, agentId, function (err, statusCode, agent) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(agent);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.queryEndpoint = function (endpoint) {
        var deferred = Q.defer();
        this.api.queryEndpoint(endpoint, function (err, statusCode, endpoint) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(endpoint);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.deleteAgentRequest = function (poolId, requestId, lockToken) {
        var deferred = Q.defer();
        this.api.deleteAgentRequest(poolId, requestId, lockToken, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgentRequest = function (poolId, requestId) {
        var deferred = Q.defer();
        this.api.getAgentRequest(poolId, requestId, function (err, statusCode, jobrequest) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(jobrequest);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgentRequests = function (poolId, agentId, completedRequestCount) {
        var deferred = Q.defer();
        this.api.getAgentRequests(poolId, agentId, completedRequestCount, function (err, statusCode, jobrequests) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(jobrequests);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.queueAgentRequest = function (request, poolId) {
        var deferred = Q.defer();
        this.api.queueAgentRequest(request, poolId, function (err, statusCode, jobrequest) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(jobrequest);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.updateAgentRequest = function (request, poolId, requestId, lockToken) {
        var deferred = Q.defer();
        this.api.updateAgentRequest(request, poolId, requestId, lockToken, function (err, statusCode, jobrequest) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(jobrequest);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.deleteMessage = function (poolId, messageId, sessionId) {
        var deferred = Q.defer();
        this.api.deleteMessage(poolId, messageId, sessionId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getMessage = function (poolId, sessionId, lastMessageId) {
        var deferred = Q.defer();
        this.api.getMessage(poolId, sessionId, lastMessageId, function (err, statusCode, message) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(message);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.refreshAgent = function (poolId, agentId) {
        var deferred = Q.defer();
        this.api.refreshAgent(poolId, agentId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.refreshAgents = function (poolId) {
        var deferred = Q.defer();
        this.api.refreshAgents(poolId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.sendMessage = function (message, poolId, requestId) {
        var deferred = Q.defer();
        this.api.sendMessage(message, poolId, requestId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getPackage = function (packageType) {
        var deferred = Q.defer();
        this.api.getPackage(packageType, function (err, statusCode, _package) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(_package);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getPackages = function () {
        var deferred = Q.defer();
        this.api.getPackages(function (err, statusCode, packages) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(packages);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getPackageZip = function (packageType) {
        var deferred = Q.defer();
        this.api.getPackageZip(packageType, function (err, statusCode, _package) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(_package);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgentPoolRoles = function (poolId) {
        var deferred = Q.defer();
        this.api.getAgentPoolRoles(poolId, function (err, statusCode, poolroles) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(poolroles);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.addAgentPool = function (pool) {
        var deferred = Q.defer();
        this.api.addAgentPool(pool, function (err, statusCode, pool) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(pool);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.deleteAgentPool = function (poolId) {
        var deferred = Q.defer();
        this.api.deleteAgentPool(poolId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgentPool = function (poolId, properties) {
        var deferred = Q.defer();
        this.api.getAgentPool(poolId, properties, function (err, statusCode, pool) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(pool);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgentPools = function (poolName, properties) {
        var deferred = Q.defer();
        this.api.getAgentPools(poolName, properties, function (err, statusCode, pools) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(pools);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.updateAgentPool = function (pool, poolId) {
        var deferred = Q.defer();
        this.api.updateAgentPool(pool, poolId, function (err, statusCode, pool) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(pool);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgentQueueRoles = function (queueId) {
        var deferred = Q.defer();
        this.api.getAgentQueueRoles(queueId, function (err, statusCode, queueroles) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(queueroles);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.addAgentQueue = function (queue) {
        var deferred = Q.defer();
        this.api.addAgentQueue(queue, function (err, statusCode, queue) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(queue);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.deleteAgentQueue = function (queueId) {
        var deferred = Q.defer();
        this.api.deleteAgentQueue(queueId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgentQueue = function (queueId, actionFilter) {
        var deferred = Q.defer();
        this.api.getAgentQueue(queueId, actionFilter, function (err, statusCode, queue) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(queue);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getAgentQueues = function (queueName, actionFilter) {
        var deferred = Q.defer();
        this.api.getAgentQueues(queueName, actionFilter, function (err, statusCode, queues) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(queues);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.queryServiceEndpoint = function (binding, scopeIdentifier) {
        var deferred = Q.defer();
        this.api.queryServiceEndpoint(binding, scopeIdentifier, function (err, statusCode, serviceendpointproxy) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(serviceendpointproxy);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.createServiceEndpoint = function (endpoint, scopeIdentifier, endpointId) {
        var deferred = Q.defer();
        this.api.createServiceEndpoint(endpoint, scopeIdentifier, endpointId, function (err, statusCode, serviceendpoint) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(serviceendpoint);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.deleteServiceEndpoint = function (scopeIdentifier, endpointId) {
        var deferred = Q.defer();
        this.api.deleteServiceEndpoint(scopeIdentifier, endpointId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getServiceEndpointDetails = function (scopeIdentifier, endpointId) {
        var deferred = Q.defer();
        this.api.getServiceEndpointDetails(scopeIdentifier, endpointId, function (err, statusCode, serviceendpoint) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(serviceendpoint);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getServiceEndpoints = function (scopeIdentifier, type, authSchemes, endpointIds) {
        var deferred = Q.defer();
        this.api.getServiceEndpoints(scopeIdentifier, type, authSchemes, endpointIds, function (err, statusCode, serviceendpoints) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(serviceendpoints);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getServiceEndpointTypes = function (scopeIdentifier, type, scheme) {
        var deferred = Q.defer();
        this.api.getServiceEndpointTypes(scopeIdentifier, type, scheme, function (err, statusCode, serviceendpointtypes) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(serviceendpointtypes);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.createAgentSession = function (session, poolId) {
        var deferred = Q.defer();
        this.api.createAgentSession(session, poolId, function (err, statusCode, session) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(session);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.deleteAgentSession = function (poolId, sessionId) {
        var deferred = Q.defer();
        this.api.deleteAgentSession(poolId, sessionId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.deleteTaskDefinition = function (taskId) {
        var deferred = Q.defer();
        this.api.deleteTaskDefinition(taskId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getTaskContentZip = function (taskId, versionString, visibility, scopeLocal) {
        var deferred = Q.defer();
        this.api.getTaskContentZip(taskId, versionString, visibility, scopeLocal, function (err, statusCode, task) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(task);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getTaskDefinition = function (taskId, versionString, visibility, scopeLocal) {
        var deferred = Q.defer();
        this.api.getTaskDefinition(taskId, versionString, visibility, scopeLocal, function (err, statusCode, task) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(task);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.getTaskDefinitions = function (taskId, visibility, scopeLocal) {
        var deferred = Q.defer();
        this.api.getTaskDefinitions(taskId, visibility, scopeLocal, function (err, statusCode, tasks) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(tasks);
            }
        });
        return deferred.promise;
    };
    QTaskAgentApiBase.prototype.updateAgentUserCapabilities = function (userCapabilities, poolId, agentId) {
        var deferred = Q.defer();
        this.api.updateAgentUserCapabilities(userCapabilities, poolId, agentId, function (err, statusCode, usercapabilitie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(usercapabilitie);
            }
        });
        return deferred.promise;
    };
    return QTaskAgentApiBase;
})(basem.QClientApiBase);
exports.QTaskAgentApiBase = QTaskAgentApiBase;
