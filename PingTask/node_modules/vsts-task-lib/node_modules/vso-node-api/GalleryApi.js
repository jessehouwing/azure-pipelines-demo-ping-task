/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var GalleryInterfaces = require("./interfaces/GalleryInterfaces");
var GalleryApi = (function (_super) {
    __extends(GalleryApi, _super);
    function GalleryApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Gallery-api');
    }
    GalleryApi.prototype.shareExtensionById = function (extensionId, accountName, onResult) {
        var _this = this;
        var routeValues = {
            extensionId: extensionId,
            accountName: accountName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "1f19631b-a0b4-4a03-89c2-d79785d24360", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GalleryApi.prototype.unshareExtensionById = function (extensionId, accountName, onResult) {
        var _this = this;
        var routeValues = {
            extensionId: extensionId,
            accountName: accountName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "1f19631b-a0b4-4a03-89c2-d79785d24360", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GalleryApi.prototype.shareExtension = function (publisherName, extensionName, accountName, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            accountName: accountName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "a1e66d8f-f5de-4d16-8309-91a4e015ee46", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GalleryApi.prototype.unshareExtension = function (publisherName, extensionName, accountName, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            accountName: accountName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "a1e66d8f-f5de-4d16-8309-91a4e015ee46", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GalleryApi.prototype.getAcquisitionOptions = function (itemId, installationTarget, onResult) {
        var _this = this;
        var routeValues = {
            itemId: itemId
        };
        var queryValues = {
            installationTarget: installationTarget
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "9d0a0105-075e-4760-aa15-8bcf54d1bd7d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.AcquisitionOptions, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.requestAcquisition = function (acquisitionRequest, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "3adb1f2d-e328-446e-be73-9f6d98071c45", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionAcquisitionRequest, responseTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionAcquisitionRequest, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, acquisitionRequest, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.getAssetByName = function (publisherName, extensionName, version, assetType, accountToken, acceptDefault, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            version: version,
            assetType: assetType
        };
        var queryValues = {
            accountToken: accountToken,
            acceptDefault: acceptDefault
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "7529171f-a002-4180-93ba-685f358a0482", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.getAsset = function (extensionId, version, assetType, accountToken, acceptDefault, onResult) {
        var _this = this;
        var routeValues = {
            extensionId: extensionId,
            version: version,
            assetType: assetType
        };
        var queryValues = {
            accountToken: accountToken,
            acceptDefault: acceptDefault
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "5d545f3d-ef47-488b-8be3-f5ee1517856c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.getCategories = function (languages, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            languages: languages
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "e0a5a71e-3ac3-43a0-ae7d-0bb5c3046a2a", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.getCertificate = function (publisherName, extensionName, version, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            version: version
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "e905ad6a-3f1f-4d08-9f6d-7d357ff8b7d0", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.queryExtensions = function (extensionQuery, accountToken, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            accountToken: accountToken
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "eb9d5ee1-6d43-456b-b80e-8a96fbc014b6", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionQuery, responseTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionQueryResult, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, extensionQuery, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.createExtension = function (extensionPackage, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionPackage, responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, extensionPackage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.deleteExtensionById = function (extensionId, version, onResult) {
        var _this = this;
        var routeValues = {
            extensionId: extensionId
        };
        var queryValues = {
            version: version
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GalleryApi.prototype.getExtensionById = function (extensionId, version, flags, onResult) {
        var _this = this;
        var routeValues = {
            extensionId: extensionId
        };
        var queryValues = {
            version: version,
            flags: flags
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.updateExtensionById = function (extensionPackage, extensionId, onResult) {
        var _this = this;
        var routeValues = {
            extensionId: extensionId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "a41192c8-9525-4b58-bc86-179fa549d80d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionPackage, responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, extensionPackage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.createExtensionWithPublisher = function (extensionPackage, publisherName, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionPackage, responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, extensionPackage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.deleteExtension = function (publisherName, extensionName, version, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        var queryValues = {
            version: version
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GalleryApi.prototype.getExtension = function (publisherName, extensionName, version, flags, accountToken, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        var queryValues = {
            version: version,
            flags: flags,
            accountToken: accountToken
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.updateExtension = function (extensionPackage, publisherName, extensionName, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "e11ea35a-16fe-4b80-ab11-c4cab88a0966", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.ExtensionPackage, responseTypeMetadata: GalleryInterfaces.TypeInfo.PublishedExtension, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, extensionPackage, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.getPublisherPermissions = function (publisherName, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "b96f588e-ae11-4be4-8cb7-9a494c445b46", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublisherPermission, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.updatePublisherPermissions = function (publisherPermission, publisherName, identityId, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            identityId: identityId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "b96f588e-ae11-4be4-8cb7-9a494c445b46", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.PublisherPermission, responseTypeMetadata: GalleryInterfaces.TypeInfo.PublisherPermission, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, publisherPermission, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.getExtensionPermissions = function (publisherName, extensionName, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "c89b3712-7ff9-40a6-8342-efd2cbeb607b", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.PublisherPermission, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.updateExtensionPermissions = function (publisherPermission, publisherName, extensionName, identityId, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            identityId: identityId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "c89b3712-7ff9-40a6-8342-efd2cbeb607b", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.PublisherPermission, responseTypeMetadata: GalleryInterfaces.TypeInfo.PublisherPermission, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, publisherPermission, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.getAssetWithToken = function (publisherName, extensionName, version, assetType, assetToken, accountToken, acceptDefault, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName,
            extensionName: extensionName,
            version: version,
            assetType: assetType,
            assetToken: assetToken
        };
        var queryValues = {
            accountToken: accountToken,
            acceptDefault: acceptDefault
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "364415a1-0077-4a41-a7a0-06edd4497492", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.queryPublishers = function (publisherQuery, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "2ad6ee0a-b53f-4034-9d1d-d009fda1212e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.PublisherQuery, responseTypeMetadata: GalleryInterfaces.TypeInfo.PublisherQueryResult, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, publisherQuery, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.createPublisher = function (publisher, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, publisher, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.deletePublisher = function (publisherName, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GalleryApi.prototype.getPublisher = function (publisherName, flags, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName
        };
        var queryValues = {
            flags: flags
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.updatePublisher = function (publisher, publisherName, onResult) {
        var _this = this;
        var routeValues = {
            publisherName: publisherName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "4ddec66a-e4f6-4f5d-999e-9e77710d7ff4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseTypeMetadata: GalleryInterfaces.TypeInfo.Publisher, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, publisher, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GalleryApi.prototype.generateKey = function (keyType, expireCurrentSeconds, onResult) {
        var _this = this;
        var routeValues = {
            keyType: keyType
        };
        var queryValues = {
            expireCurrentSeconds: expireCurrentSeconds
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "92ed5cf4-c38b-465a-9059-2f2fb7c624b5", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GalleryApi.prototype.getSigningKey = function (keyType, onResult) {
        var _this = this;
        var routeValues = {
            keyType: keyType
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "gallery", "92ed5cf4-c38b-465a-9059-2f2fb7c624b5", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return GalleryApi;
})(basem.ClientApiBase);
exports.GalleryApi = GalleryApi;
var QGalleryApi = (function (_super) {
    __extends(QGalleryApi, _super);
    function QGalleryApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, GalleryApi);
    }
    QGalleryApi.prototype.shareExtensionById = function (extensionId, accountName) {
        var deferred = Q.defer();
        this.api.shareExtensionById(extensionId, accountName, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.unshareExtensionById = function (extensionId, accountName) {
        var deferred = Q.defer();
        this.api.unshareExtensionById(extensionId, accountName, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.shareExtension = function (publisherName, extensionName, accountName) {
        var deferred = Q.defer();
        this.api.shareExtension(publisherName, extensionName, accountName, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.unshareExtension = function (publisherName, extensionName, accountName) {
        var deferred = Q.defer();
        this.api.unshareExtension(publisherName, extensionName, accountName, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getAcquisitionOptions = function (itemId, installationTarget) {
        var deferred = Q.defer();
        this.api.getAcquisitionOptions(itemId, installationTarget, function (err, statusCode, acquisitionoption) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(acquisitionoption);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.requestAcquisition = function (acquisitionRequest) {
        var deferred = Q.defer();
        this.api.requestAcquisition(acquisitionRequest, function (err, statusCode, acquisitionrequest) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(acquisitionrequest);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getAssetByName = function (publisherName, extensionName, version, assetType, accountToken, acceptDefault) {
        var deferred = Q.defer();
        this.api.getAssetByName(publisherName, extensionName, version, assetType, accountToken, acceptDefault, function (err, statusCode, assetbyname) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(assetbyname);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getAsset = function (extensionId, version, assetType, accountToken, acceptDefault) {
        var deferred = Q.defer();
        this.api.getAsset(extensionId, version, assetType, accountToken, acceptDefault, function (err, statusCode, asset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(asset);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getCategories = function (languages) {
        var deferred = Q.defer();
        this.api.getCategories(languages, function (err, statusCode, categories) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(categories);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getCertificate = function (publisherName, extensionName, version) {
        var deferred = Q.defer();
        this.api.getCertificate(publisherName, extensionName, version, function (err, statusCode, certificate) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(certificate);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.queryExtensions = function (extensionQuery, accountToken) {
        var deferred = Q.defer();
        this.api.queryExtensions(extensionQuery, accountToken, function (err, statusCode, extensionquery) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extensionquery);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.createExtension = function (extensionPackage) {
        var deferred = Q.defer();
        this.api.createExtension(extensionPackage, function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.deleteExtensionById = function (extensionId, version) {
        var deferred = Q.defer();
        this.api.deleteExtensionById(extensionId, version, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getExtensionById = function (extensionId, version, flags) {
        var deferred = Q.defer();
        this.api.getExtensionById(extensionId, version, flags, function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.updateExtensionById = function (extensionPackage, extensionId) {
        var deferred = Q.defer();
        this.api.updateExtensionById(extensionPackage, extensionId, function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.createExtensionWithPublisher = function (extensionPackage, publisherName) {
        var deferred = Q.defer();
        this.api.createExtensionWithPublisher(extensionPackage, publisherName, function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.deleteExtension = function (publisherName, extensionName, version) {
        var deferred = Q.defer();
        this.api.deleteExtension(publisherName, extensionName, version, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getExtension = function (publisherName, extensionName, version, flags, accountToken) {
        var deferred = Q.defer();
        this.api.getExtension(publisherName, extensionName, version, flags, accountToken, function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.updateExtension = function (extensionPackage, publisherName, extensionName) {
        var deferred = Q.defer();
        this.api.updateExtension(extensionPackage, publisherName, extensionName, function (err, statusCode, extension) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(extension);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getPublisherPermissions = function (publisherName) {
        var deferred = Q.defer();
        this.api.getPublisherPermissions(publisherName, function (err, statusCode, permissions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(permissions);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.updatePublisherPermissions = function (publisherPermission, publisherName, identityId) {
        var deferred = Q.defer();
        this.api.updatePublisherPermissions(publisherPermission, publisherName, identityId, function (err, statusCode, permission) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(permission);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getExtensionPermissions = function (publisherName, extensionName) {
        var deferred = Q.defer();
        this.api.getExtensionPermissions(publisherName, extensionName, function (err, statusCode, permissions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(permissions);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.updateExtensionPermissions = function (publisherPermission, publisherName, extensionName, identityId) {
        var deferred = Q.defer();
        this.api.updateExtensionPermissions(publisherPermission, publisherName, extensionName, identityId, function (err, statusCode, permission) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(permission);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getAssetWithToken = function (publisherName, extensionName, version, assetType, assetToken, accountToken, acceptDefault) {
        var deferred = Q.defer();
        this.api.getAssetWithToken(publisherName, extensionName, version, assetType, assetToken, accountToken, acceptDefault, function (err, statusCode, privateasset) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(privateasset);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.queryPublishers = function (publisherQuery) {
        var deferred = Q.defer();
        this.api.queryPublishers(publisherQuery, function (err, statusCode, publisherquery) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(publisherquery);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.createPublisher = function (publisher) {
        var deferred = Q.defer();
        this.api.createPublisher(publisher, function (err, statusCode, publisher) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(publisher);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.deletePublisher = function (publisherName) {
        var deferred = Q.defer();
        this.api.deletePublisher(publisherName, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getPublisher = function (publisherName, flags) {
        var deferred = Q.defer();
        this.api.getPublisher(publisherName, flags, function (err, statusCode, publisher) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(publisher);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.updatePublisher = function (publisher, publisherName) {
        var deferred = Q.defer();
        this.api.updatePublisher(publisher, publisherName, function (err, statusCode, publisher) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(publisher);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.generateKey = function (keyType, expireCurrentSeconds) {
        var deferred = Q.defer();
        this.api.generateKey(keyType, expireCurrentSeconds, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGalleryApi.prototype.getSigningKey = function (keyType) {
        var deferred = Q.defer();
        this.api.getSigningKey(keyType, function (err, statusCode, signingkey) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(signingkey);
            }
        });
        return deferred.promise;
    };
    return QGalleryApi;
})(basem.QClientApiBase);
exports.QGalleryApi = QGalleryApi;
