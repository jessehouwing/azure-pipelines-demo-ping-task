/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var TaskAgentInterfaces = require("./interfaces/TaskAgentInterfaces");
var VSSInterfaces = require("./interfaces/common/VSSInterfaces");
var TaskApi = (function (_super) {
    __extends(TaskApi, _super);
    function TaskApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Task-api');
    }
    TaskApi.prototype.getPlanAttachments = function (scopeIdentifier, hubName, planId, type, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            type: type
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "eb55e5d6-2f30-4295-b5ed-38da50b1fc52", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAttachment, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.createAttachment = function (customHeaders, contentStream, scopeIdentifier, hubName, planId, timelineId, recordId, type, name, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            timelineId: timelineId,
            recordId: recordId,
            type: type,
            name: name
        };
        customHeaders = customHeaders || {};
        customHeaders["Content-Type"] = "application/octet-stream";
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "7898f959-9cdf-4096-b29e-7f293031629e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAttachment, responseIsCollection: false };
            _this.restClient.uploadStream('PUT', url, apiVersion, contentStream, customHeaders, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.getAttachment = function (scopeIdentifier, hubName, planId, timelineId, recordId, type, name, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            timelineId: timelineId,
            recordId: recordId,
            type: type,
            name: name
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "7898f959-9cdf-4096-b29e-7f293031629e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAttachment, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.getAttachmentContent = function (scopeIdentifier, hubName, planId, timelineId, recordId, type, name, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            timelineId: timelineId,
            recordId: recordId,
            type: type,
            name: name
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "7898f959-9cdf-4096-b29e-7f293031629e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.getAttachments = function (scopeIdentifier, hubName, planId, timelineId, recordId, type, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            timelineId: timelineId,
            recordId: recordId,
            type: type
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "7898f959-9cdf-4096-b29e-7f293031629e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAttachment, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.appendTimelineRecordFeed = function (lines, scopeIdentifier, hubName, planId, timelineId, recordId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            timelineId: timelineId,
            recordId: recordId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "858983e4-19bd-4c5e-864c-507b59b58b12", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: VSSInterfaces.TypeInfo.VssJsonCollectionWrapperV, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, lines, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskApi.prototype.appendLogContent = function (customHeaders, contentStream, scopeIdentifier, hubName, planId, logId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            logId: logId
        };
        customHeaders = customHeaders || {};
        customHeaders["Content-Type"] = "application/octet-stream";
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "46f5667d-263a-4684-91b1-dff7fdcf64e2", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskLog, responseIsCollection: false };
            _this.restClient.uploadStream('POST', url, apiVersion, contentStream, customHeaders, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.createLog = function (log, scopeIdentifier, hubName, planId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "46f5667d-263a-4684-91b1-dff7fdcf64e2", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskLog, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskLog, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, log, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.getLog = function (scopeIdentifier, hubName, planId, logId, startLine, endLine, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            logId: logId
        };
        var queryValues = {
            startLine: startLine,
            endLine: endLine
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "46f5667d-263a-4684-91b1-dff7fdcf64e2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.getLogs = function (scopeIdentifier, hubName, planId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "46f5667d-263a-4684-91b1-dff7fdcf64e2", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskLog, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.getPlan = function (scopeIdentifier, hubName, planId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "5cecd946-d704-471e-a45f-3b4064fcfaba", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskOrchestrationPlan, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.getRecords = function (scopeIdentifier, hubName, planId, timelineId, changeId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            timelineId: timelineId
        };
        var queryValues = {
            changeId: changeId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "8893bc5b-35b2-4be7-83cb-99e683551db4", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TimelineRecord, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.updateRecords = function (records, scopeIdentifier, hubName, planId, timelineId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            timelineId: timelineId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "8893bc5b-35b2-4be7-83cb-99e683551db4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: VSSInterfaces.TypeInfo.VssJsonCollectionWrapperV, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TimelineRecord, responseIsCollection: true };
            _this.restClient.update(url, apiVersion, records, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.createTimeline = function (timeline, scopeIdentifier, hubName, planId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "83597576-cc2c-453c-bea6-2882ae6a1653", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.Timeline, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.Timeline, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, timeline, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.deleteTimeline = function (scopeIdentifier, hubName, planId, timelineId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            timelineId: timelineId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "83597576-cc2c-453c-bea6-2882ae6a1653", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TaskApi.prototype.getTimeline = function (scopeIdentifier, hubName, planId, timelineId, changeId, includeRecords, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId,
            timelineId: timelineId
        };
        var queryValues = {
            changeId: changeId,
            includeRecords: includeRecords
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "83597576-cc2c-453c-bea6-2882ae6a1653", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.Timeline, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TaskApi.prototype.getTimelines = function (scopeIdentifier, hubName, planId, onResult) {
        var _this = this;
        var routeValues = {
            scopeIdentifier: scopeIdentifier,
            hubName: hubName,
            planId: planId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "distributedtask", "83597576-cc2c-453c-bea6-2882ae6a1653", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.Timeline, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return TaskApi;
})(basem.ClientApiBase);
exports.TaskApi = TaskApi;
var QTaskApi = (function (_super) {
    __extends(QTaskApi, _super);
    function QTaskApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, TaskApi);
    }
    QTaskApi.prototype.getPlanAttachments = function (scopeIdentifier, hubName, planId, type) {
        var deferred = Q.defer();
        this.api.getPlanAttachments(scopeIdentifier, hubName, planId, type, function (err, statusCode, attachments) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(attachments);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.createAttachment = function (customHeaders, contentStream, scopeIdentifier, hubName, planId, timelineId, recordId, type, name) {
        var deferred = Q.defer();
        this.api.createAttachment(customHeaders, contentStream, scopeIdentifier, hubName, planId, timelineId, recordId, type, name, function (err, statusCode, attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(attachment);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.getAttachment = function (scopeIdentifier, hubName, planId, timelineId, recordId, type, name) {
        var deferred = Q.defer();
        this.api.getAttachment(scopeIdentifier, hubName, planId, timelineId, recordId, type, name, function (err, statusCode, attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(attachment);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.getAttachmentContent = function (scopeIdentifier, hubName, planId, timelineId, recordId, type, name) {
        var deferred = Q.defer();
        this.api.getAttachmentContent(scopeIdentifier, hubName, planId, timelineId, recordId, type, name, function (err, statusCode, attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(attachment);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.getAttachments = function (scopeIdentifier, hubName, planId, timelineId, recordId, type) {
        var deferred = Q.defer();
        this.api.getAttachments(scopeIdentifier, hubName, planId, timelineId, recordId, type, function (err, statusCode, attachments) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(attachments);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.appendTimelineRecordFeed = function (lines, scopeIdentifier, hubName, planId, timelineId, recordId) {
        var deferred = Q.defer();
        this.api.appendTimelineRecordFeed(lines, scopeIdentifier, hubName, planId, timelineId, recordId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.appendLogContent = function (customHeaders, contentStream, scopeIdentifier, hubName, planId, logId) {
        var deferred = Q.defer();
        this.api.appendLogContent(customHeaders, contentStream, scopeIdentifier, hubName, planId, logId, function (err, statusCode, log) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(log);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.createLog = function (log, scopeIdentifier, hubName, planId) {
        var deferred = Q.defer();
        this.api.createLog(log, scopeIdentifier, hubName, planId, function (err, statusCode, log) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(log);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.getLog = function (scopeIdentifier, hubName, planId, logId, startLine, endLine) {
        var deferred = Q.defer();
        this.api.getLog(scopeIdentifier, hubName, planId, logId, startLine, endLine, function (err, statusCode, logs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(logs);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.getLogs = function (scopeIdentifier, hubName, planId) {
        var deferred = Q.defer();
        this.api.getLogs(scopeIdentifier, hubName, planId, function (err, statusCode, logs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(logs);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.getPlan = function (scopeIdentifier, hubName, planId) {
        var deferred = Q.defer();
        this.api.getPlan(scopeIdentifier, hubName, planId, function (err, statusCode, plan) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(plan);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.getRecords = function (scopeIdentifier, hubName, planId, timelineId, changeId) {
        var deferred = Q.defer();
        this.api.getRecords(scopeIdentifier, hubName, planId, timelineId, changeId, function (err, statusCode, records) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(records);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.updateRecords = function (records, scopeIdentifier, hubName, planId, timelineId) {
        var deferred = Q.defer();
        this.api.updateRecords(records, scopeIdentifier, hubName, planId, timelineId, function (err, statusCode, record) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(record);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.createTimeline = function (timeline, scopeIdentifier, hubName, planId) {
        var deferred = Q.defer();
        this.api.createTimeline(timeline, scopeIdentifier, hubName, planId, function (err, statusCode, timeline) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(timeline);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.deleteTimeline = function (scopeIdentifier, hubName, planId, timelineId) {
        var deferred = Q.defer();
        this.api.deleteTimeline(scopeIdentifier, hubName, planId, timelineId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.getTimeline = function (scopeIdentifier, hubName, planId, timelineId, changeId, includeRecords) {
        var deferred = Q.defer();
        this.api.getTimeline(scopeIdentifier, hubName, planId, timelineId, changeId, includeRecords, function (err, statusCode, timeline) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(timeline);
            }
        });
        return deferred.promise;
    };
    QTaskApi.prototype.getTimelines = function (scopeIdentifier, hubName, planId) {
        var deferred = Q.defer();
        this.api.getTimelines(scopeIdentifier, hubName, planId, function (err, statusCode, timelines) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(timelines);
            }
        });
        return deferred.promise;
    };
    return QTaskApi;
})(basem.QClientApiBase);
exports.QTaskApi = QTaskApi;
