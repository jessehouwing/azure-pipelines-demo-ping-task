// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
/// <reference path="../node/node.d.ts"/>
var url = require("url");
var http = require("http");
var https = require("https");
http.globalAgent.maxSockets = 100;
var HttpClient = (function () {
    function HttpClient(userAgent, handlers, socketTimeout) {
        this.userAgent = userAgent;
        this.handlers = handlers;
        if (socketTimeout) {
            this.socketTimeout = socketTimeout;
        }
        else {
            this.socketTimeout = 3 * 60000;
        }
    }
    HttpClient.prototype.get = function (verb, requestUrl, headers, onResult) {
        var options = this._getOptions(verb, requestUrl, headers);
        this.request(options.protocol, options.options, null, onResult);
    };
    HttpClient.prototype.send = function (verb, requestUrl, objs, headers, onResult) {
        var options = this._getOptions(verb, requestUrl, headers);
        this.request(options.protocol, options.options, objs, onResult);
    };
    HttpClient.prototype.sendFile = function (verb, requestUrl, content, headers, onResult) {
        var options = this._getOptions(verb, requestUrl, headers);
        var req = options.protocol.request(options.options, function (res) {
            var output = '';
            res.on('data', function (chunk) {
                output += chunk;
            });
            res.on('end', function () {
                onResult(null, res, output);
            });
        });
        req.on('error', function (err) {
            onResult(err, null, null);
        });
        content.on('close', function () {
            req.end();
        });
        content.pipe(req);
    };
    HttpClient.prototype.getStream = function (requestUrl, apiVersion, type, onResult) {
        var headers = {};
        headers['Accept'] = this.makeAcceptHeader(type, apiVersion);
        var options = this._getOptions('GET', requestUrl, headers);
        var req = options.protocol.request(options.options, function (res) {
            onResult(null, res.statusCode, res);
        });
        req.on('error', function (err) {
            onResult(err, err.statusCode, null);
        });
        req.end();
    };
    HttpClient.prototype.makeAcceptHeader = function (type, apiVersion) {
        return type + (apiVersion ? (";api-version=" + apiVersion) : "");
    };
    HttpClient.prototype._getOptions = function (method, requestUrl, headers) {
        var parsedUrl = url.parse(requestUrl);
        var usingSsl = parsedUrl.protocol === 'https:';
        var prot = usingSsl ? https : http;
        var defaultPort = usingSsl ? 443 : 80;
        var proxyUrl;
        if (process.env.HTTP_PROXY) {
            proxyUrl = url.parse(process.env.HTTP_PROXY);
            prot = proxyUrl.protocol === 'https:' ? https : http;
        }
        var options = { headers: {} };
        var useProxy = proxyUrl && proxyUrl.hostname;
        if (useProxy) {
            options = {
                host: proxyUrl.hostname,
                port: proxyUrl.port || 8888,
                path: requestUrl,
                method: method,
                headers: {}
            };
        }
        else {
            options = {
                host: parsedUrl.hostname,
                port: parsedUrl.port || defaultPort,
                path: (parsedUrl.pathname || '') + (parsedUrl.search || ''),
                method: method,
                headers: {}
            };
        }
        options.headers = headers;
        if (useProxy) {
            options.headers['Host'] = parsedUrl.hostname;
        }
        options.headers["User-Agent"] = this.userAgent;
        if (this.handlers) {
            this.handlers.forEach(function (handler) {
                handler.prepareRequest(options);
            });
        }
        return {
            protocol: prot,
            options: options
        };
    };
    HttpClient.prototype.request = function (protocol, options, objs, onResult) {
        var reqData;
        var socket;
        if (objs) {
            reqData = JSON.stringify(objs, null, 2);
            options.headers["Content-Length"] = Buffer.byteLength(reqData, 'utf8');
        }
        var req = protocol.request(options, function (res) {
            var output = '';
            res.setEncoding('utf8');
            res.on('data', function (chunk) {
                output += chunk;
            });
            res.on('end', function () {
                onResult(null, res, output);
            });
        });
        req.on('socket', function (sock) {
            socket = sock;
        });
        req.setTimeout(this.socketTimeout, function () {
            if (socket) {
                socket.end();
            }
        });
        req.on('error', function (err) {
            onResult(err, null, null);
        });
        if (reqData) {
            req.write(reqData, 'utf8');
        }
        req.end();
    };
    return HttpClient;
})();
exports.HttpClient = HttpClient;
