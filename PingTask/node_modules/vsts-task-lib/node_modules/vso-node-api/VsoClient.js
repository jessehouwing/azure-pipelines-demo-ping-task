//*******************************************************************************************************
// significant portions of this file copied from: VSO\src\Vssf\WebPlatform\Platform\Scripts\VSS\WebApi\RestClient.ts
//*******************************************************************************************************
/// <reference path="../q/Q.d.ts"/>
var Q = require("q");
var url = require("url");
var path = require("path");
var InvalidApiResourceVersionError = (function () {
    function InvalidApiResourceVersionError(message) {
        this.name = "Invalid resource version";
        this.message = message;
    }
    return InvalidApiResourceVersionError;
})();
exports.InvalidApiResourceVersionError = InvalidApiResourceVersionError;
var VsoClient = (function () {
    function VsoClient(baseUrl, restClient) {
        this.baseUrl = baseUrl;
        this.basePath = url.parse(baseUrl).pathname;
        this.restClient = restClient;
        this._locationsByAreaPromises = {};
        this._initializationPromise = Q.fcall(function () { return true; });
    }
    VsoClient.prototype.compareResourceVersions = function (locationVersion, apiVersion) {
        if (locationVersion == apiVersion) {
            return 0;
        }
        locationVersion = locationVersion.replace(VsoClient.PREVIEW_INDICATOR, "");
        apiVersion = apiVersion.replace(VsoClient.PREVIEW_INDICATOR, "");
        var splitLocationVersion = locationVersion.split('.');
        var splitApiVersion = apiVersion.split('.');
        var i;
        for (i = 0; i < Math.min(splitLocationVersion.length, splitApiVersion.length); i++) {
            var locationVersionPart = parseInt(splitLocationVersion[i]);
            var apiVersionPart = parseInt(splitApiVersion[i]);
            if (locationVersionPart != apiVersionPart) {
                return locationVersionPart - apiVersionPart;
            }
        }
        return splitLocationVersion.length - splitApiVersion.length;
    };
    VsoClient.prototype.getVersioningData = function (apiVersion, area, locationId, routeValues, queryParams) {
        var _this = this;
        var requestUrl;
        var deferred = Q.defer();
        this.beginGetLocation(area, locationId)
            .then(function (location) {
            if (!location) {
                throw new Error("Failed to find api location for area: " + area + " id: " + locationId);
            }
            if (!apiVersion) {
                apiVersion = location.maxVersion + VsoClient.PREVIEW_INDICATOR + location.resourceVersion;
            }
            else {
                if (_this.compareResourceVersions(location.minVersion, apiVersion) > 1) {
                    throw new InvalidApiResourceVersionError("The client being used is older than the server. The server no longer supports this resource (deprecated). Update the client.");
                }
                else if (_this.compareResourceVersions(location.maxVersion, apiVersion) < 1) {
                    apiVersion = location.maxVersion + VsoClient.PREVIEW_INDICATOR + location.resourceVersion;
                }
            }
            requestUrl = _this.getRequestUrl(location.routeTemplate, location.area, location.resourceName, routeValues, queryParams);
            var versionData = {
                apiVersion: apiVersion,
                requestUrl: requestUrl
            };
            deferred.resolve(versionData);
        })
            .fail(function (err) {
            deferred.reject(err);
        });
        return deferred.promise;
    };
    VsoClient.prototype._setInitializationPromise = function (promise) {
        if (promise) {
            this._initializationPromise = promise;
        }
    };
    VsoClient.prototype.beginGetLocation = function (area, locationId) {
        var _this = this;
        return this._initializationPromise.then(function () {
            return _this.beginGetAreaLocations(area);
        }).then(function (areaLocations) {
            return areaLocations[(locationId || "").toLowerCase()];
        });
    };
    VsoClient.prototype.beginGetAreaLocations = function (area) {
        var areaLocationsPromise = this._locationsByAreaPromises[area];
        if (!areaLocationsPromise) {
            var deferred = Q.defer();
            areaLocationsPromise = deferred.promise;
            var requestUrl = this.resolveUrl(VsoClient.APIS_RELATIVE_PATH + "/" + area);
            this._issueOptionsRequest(requestUrl, function (err, statusCode, locationsResult) {
                if (err) {
                    err.statusCode = statusCode;
                    deferred.reject(err);
                }
                else {
                    var locationsLookup = {};
                    var resourceLocations = locationsResult.value;
                    var i;
                    for (i = 0; i < locationsResult.count; i++) {
                        var resourceLocation = resourceLocations[i];
                        locationsLookup[resourceLocation.id.toLowerCase()] = resourceLocation;
                    }
                    deferred.resolve(locationsLookup);
                }
            });
            this._locationsByAreaPromises[area] = areaLocationsPromise;
        }
        return areaLocationsPromise;
    };
    VsoClient.prototype.resolveUrl = function (relativeUrl) {
        return url.resolve(this.baseUrl, path.join(this.basePath, relativeUrl));
    };
    VsoClient.prototype._issueOptionsRequest = function (requestUrl, onResult) {
        return this.restClient.options(requestUrl, onResult);
    };
    VsoClient.prototype.getRequestUrl = function (routeTemplate, area, resource, routeValues, queryParams) {
        routeValues = routeValues || {};
        if (!routeValues.area) {
            routeValues.area = area;
        }
        if (!routeValues.resource) {
            routeValues.resource = resource;
        }
        var relativeUrl = this.replaceRouteValues(routeTemplate, routeValues);
        var first = true;
        for (var queryValue in queryParams) {
            if (queryParams[queryValue] != null) {
                if (first) {
                    relativeUrl += "?" + queryValue + "=" + queryParams[queryValue];
                    first = false;
                }
                else {
                    relativeUrl += "&" + queryValue + "=" + queryParams[queryValue];
                }
            }
        }
        return url.resolve(this.baseUrl, path.join(this.basePath, relativeUrl));
    };
    VsoClient.prototype.replaceRouteValues = function (routeTemplate, routeValues) {
        var result = "", currentPathPart = "", paramName = "", insideParam = false, charIndex, routeTemplateLength = routeTemplate.length, c;
        for (charIndex = 0; charIndex < routeTemplateLength; charIndex++) {
            c = routeTemplate[charIndex];
            if (insideParam) {
                if (c == "}") {
                    insideParam = false;
                    if (routeValues[paramName]) {
                        currentPathPart += encodeURIComponent(routeValues[paramName]);
                    }
                    else {
                        var strippedParamName = paramName.replace(/[^a-z0-9]/ig, '');
                        if (routeValues[strippedParamName]) {
                            currentPathPart += encodeURIComponent(routeValues[strippedParamName]);
                        }
                    }
                    paramName = "";
                }
                else {
                    paramName += c;
                }
            }
            else {
                if (c == "/") {
                    if (currentPathPart) {
                        if (result) {
                            result += "/";
                        }
                        result += currentPathPart;
                        currentPathPart = "";
                    }
                }
                else if (c == "{") {
                    if ((charIndex + 1) < routeTemplateLength && routeTemplate[charIndex + 1] == "{") {
                        currentPathPart += c;
                        charIndex++;
                    }
                    else {
                        insideParam = true;
                    }
                }
                else if (c == '}') {
                    currentPathPart += c;
                    if ((charIndex + 1) < routeTemplateLength && routeTemplate[charIndex + 1] == "}") {
                        charIndex++;
                    }
                }
                else {
                    currentPathPart += c;
                }
            }
        }
        if (currentPathPart) {
            if (result) {
                result += "/";
            }
            result += currentPathPart;
        }
        return result;
    };
    VsoClient.prototype._getLinkResponseHeaders = function (xhr) {
        var results = {}, responseHeadersString = xhr.getAllResponseHeaders(), rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, linkRegExp = /\<(.*?)\>;rel=\"(.*?)\"/g, headerMatch, linkMatch;
        if (responseHeadersString) {
            while (headerMatch = rheaders.exec(responseHeadersString)) {
                if (headerMatch[1].toLowerCase() === 'link') {
                    while (linkMatch = linkRegExp.exec(headerMatch[2])) {
                        results[linkMatch[2]] = linkMatch[1];
                    }
                }
            }
        }
        return results;
    };
    VsoClient.APIS_RELATIVE_PATH = "_apis";
    VsoClient.PREVIEW_INDICATOR = "-preview.";
    return VsoClient;
})();
exports.VsoClient = VsoClient;
