/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var FormInputInterfaces = require("../interfaces/common/FormInputInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (AgentArtifactType) {
    AgentArtifactType[AgentArtifactType["XamlBuild"] = 0] = "XamlBuild";
    AgentArtifactType[AgentArtifactType["Build"] = 1] = "Build";
    AgentArtifactType[AgentArtifactType["Jenkins"] = 2] = "Jenkins";
    AgentArtifactType[AgentArtifactType["FileShare"] = 3] = "FileShare";
    AgentArtifactType[AgentArtifactType["Nuget"] = 4] = "Nuget";
    AgentArtifactType[AgentArtifactType["TfsOnPrem"] = 5] = "TfsOnPrem";
    AgentArtifactType[AgentArtifactType["GitHub"] = 6] = "GitHub";
    AgentArtifactType[AgentArtifactType["TFGit"] = 7] = "TFGit";
})(exports.AgentArtifactType || (exports.AgentArtifactType = {}));
var AgentArtifactType = exports.AgentArtifactType;
(function (ApprovalStatus) {
    ApprovalStatus[ApprovalStatus["Undefined"] = 0] = "Undefined";
    ApprovalStatus[ApprovalStatus["Pending"] = 1] = "Pending";
    ApprovalStatus[ApprovalStatus["Approved"] = 2] = "Approved";
    ApprovalStatus[ApprovalStatus["Rejected"] = 4] = "Rejected";
    ApprovalStatus[ApprovalStatus["Reassigned"] = 6] = "Reassigned";
    ApprovalStatus[ApprovalStatus["Canceled"] = 7] = "Canceled";
})(exports.ApprovalStatus || (exports.ApprovalStatus = {}));
var ApprovalStatus = exports.ApprovalStatus;
(function (ApprovalType) {
    ApprovalType[ApprovalType["Undefined"] = 0] = "Undefined";
    ApprovalType[ApprovalType["PreDeploy"] = 1] = "PreDeploy";
    ApprovalType[ApprovalType["PostDeploy"] = 2] = "PostDeploy";
})(exports.ApprovalType || (exports.ApprovalType = {}));
var ApprovalType = exports.ApprovalType;
(function (AuditAction) {
    AuditAction[AuditAction["Add"] = 1] = "Add";
    AuditAction[AuditAction["Update"] = 2] = "Update";
    AuditAction[AuditAction["Delete"] = 3] = "Delete";
})(exports.AuditAction || (exports.AuditAction = {}));
var AuditAction = exports.AuditAction;
(function (EnvironmentStatus) {
    EnvironmentStatus[EnvironmentStatus["NotStarted"] = 0] = "NotStarted";
    EnvironmentStatus[EnvironmentStatus["Pending"] = 1] = "Pending";
    EnvironmentStatus[EnvironmentStatus["Succeeded"] = 2] = "Succeeded";
    EnvironmentStatus[EnvironmentStatus["Rejected"] = 3] = "Rejected";
    EnvironmentStatus[EnvironmentStatus["InProgress"] = 4] = "InProgress";
    EnvironmentStatus[EnvironmentStatus["Abandoned"] = 5] = "Abandoned";
    EnvironmentStatus[EnvironmentStatus["Stopped"] = 6] = "Stopped";
    EnvironmentStatus[EnvironmentStatus["Canceled"] = 7] = "Canceled";
})(exports.EnvironmentStatus || (exports.EnvironmentStatus = {}));
var EnvironmentStatus = exports.EnvironmentStatus;
(function (ReleaseQueryOrder) {
    ReleaseQueryOrder[ReleaseQueryOrder["Descending"] = 0] = "Descending";
    ReleaseQueryOrder[ReleaseQueryOrder["Ascending"] = 1] = "Ascending";
})(exports.ReleaseQueryOrder || (exports.ReleaseQueryOrder = {}));
var ReleaseQueryOrder = exports.ReleaseQueryOrder;
(function (ReleaseReason) {
    ReleaseReason[ReleaseReason["None"] = 0] = "None";
    ReleaseReason[ReleaseReason["Manual"] = 1] = "Manual";
    ReleaseReason[ReleaseReason["ContinuousIntegration"] = 2] = "ContinuousIntegration";
})(exports.ReleaseReason || (exports.ReleaseReason = {}));
var ReleaseReason = exports.ReleaseReason;
(function (ReleaseStatus) {
    ReleaseStatus[ReleaseStatus["Undefined"] = 0] = "Undefined";
    ReleaseStatus[ReleaseStatus["Draft"] = 1] = "Draft";
    ReleaseStatus[ReleaseStatus["InProgress"] = 2] = "InProgress";
    ReleaseStatus[ReleaseStatus["Released"] = 3] = "Released";
    ReleaseStatus[ReleaseStatus["Stopped"] = 4] = "Stopped";
    ReleaseStatus[ReleaseStatus["Rejected"] = 5] = "Rejected";
    ReleaseStatus[ReleaseStatus["Abandoned"] = 6] = "Abandoned";
    ReleaseStatus[ReleaseStatus["Canceled"] = 7] = "Canceled";
})(exports.ReleaseStatus || (exports.ReleaseStatus = {}));
var ReleaseStatus = exports.ReleaseStatus;
(function (ReleaseTriggerType) {
    ReleaseTriggerType[ReleaseTriggerType["Undefined"] = 0] = "Undefined";
    ReleaseTriggerType[ReleaseTriggerType["ArtifactSource"] = 1] = "ArtifactSource";
})(exports.ReleaseTriggerType || (exports.ReleaseTriggerType = {}));
var ReleaseTriggerType = exports.ReleaseTriggerType;
(function (TaskStatus) {
    TaskStatus[TaskStatus["Unknown"] = 0] = "Unknown";
    TaskStatus[TaskStatus["Pending"] = 1] = "Pending";
    TaskStatus[TaskStatus["InProgress"] = 2] = "InProgress";
    TaskStatus[TaskStatus["Success"] = 3] = "Success";
    TaskStatus[TaskStatus["Failure"] = 4] = "Failure";
    TaskStatus[TaskStatus["Canceled"] = 5] = "Canceled";
    TaskStatus[TaskStatus["Skipped"] = 6] = "Skipped";
})(exports.TaskStatus || (exports.TaskStatus = {}));
var TaskStatus = exports.TaskStatus;
exports.TypeInfo = {
    AgentArtifactDefinition: {
        fields: null
    },
    AgentArtifactType: {
        enumValues: {
            "xamlBuild": 0,
            "build": 1,
            "jenkins": 2,
            "fileShare": 3,
            "nuget": 4,
            "tfsOnPrem": 5,
            "gitHub": 6,
            "tFGit": 7
        }
    },
    ApprovalPendingEvent: {
        fields: null
    },
    ApprovalStatus: {
        enumValues: {
            "undefined": 0,
            "pending": 1,
            "approved": 2,
            "rejected": 4,
            "reassigned": 6,
            "canceled": 7
        }
    },
    ApprovalType: {
        enumValues: {
            "undefined": 0,
            "preDeploy": 1,
            "postDeploy": 2
        }
    },
    ApprovalUpdateMetadata: {
        fields: null
    },
    Artifact: {
        fields: null
    },
    ArtifactDefinition: {
        fields: null
    },
    ArtifactInstanceData: {
        fields: null
    },
    ArtifactProvider: {
        fields: null
    },
    ArtifactSource: {
        fields: null
    },
    ArtifactSourceId: {
        fields: null
    },
    ArtifactSourceIdsQueryResult: {
        fields: null
    },
    ArtifactSourceReference: {
        fields: null
    },
    ArtifactTypeDefinition: {
        fields: null
    },
    ArtifactVersion: {
        fields: null
    },
    ArtifactVersionQueryResult: {
        fields: null
    },
    AuditAction: {
        enumValues: {
            "add": 1,
            "update": 2,
            "delete": 3
        }
    },
    BuildVersion: {
        fields: null
    },
    Change: {
        fields: null
    },
    ConfigurationVariableValue: {
        fields: null
    },
    Consumer: {
        fields: null
    },
    EnvironmentStatus: {
        enumValues: {
            "notStarted": 0,
            "pending": 1,
            "succeeded": 2,
            "rejected": 3,
            "inProgress": 4,
            "abandoned": 5,
            "stopped": 6,
            "canceled": 7
        }
    },
    Issue: {
        fields: null
    },
    RealtimeReleaseEvent: {
        fields: null
    },
    Release: {
        fields: null
    },
    ReleaseApproval: {
        fields: null
    },
    ReleaseArtifact: {
        fields: null
    },
    ReleaseDefinition: {
        fields: null
    },
    ReleaseDefinitionApprovalStep: {
        fields: null
    },
    ReleaseDefinitionDeployStep: {
        fields: null
    },
    ReleaseDefinitionEnvironment: {
        fields: null
    },
    ReleaseDefinitionEnvironmentStep: {
        fields: null
    },
    ReleaseDefinitionEnvironmentSummary: {
        fields: null
    },
    ReleaseDefinitionEnvironmentTemplate: {
        fields: null
    },
    ReleaseDefinitionRevision: {
        fields: null
    },
    ReleaseDefinitionSummary: {
        fields: null
    },
    ReleaseEnvironment: {
        fields: null
    },
    ReleaseEnvironmentCompletedEvent: {
        fields: null
    },
    ReleaseQueryOrder: {
        enumValues: {
            "descending": 0,
            "ascending": 1
        }
    },
    ReleaseReason: {
        enumValues: {
            "none": 0,
            "manual": 1,
            "continuousIntegration": 2
        }
    },
    ReleaseStartMetadata: {
        fields: null
    },
    ReleaseStatus: {
        enumValues: {
            "undefined": 0,
            "draft": 1,
            "inProgress": 2,
            "released": 3,
            "stopped": 4,
            "rejected": 5,
            "abandoned": 6,
            "canceled": 7
        }
    },
    ReleaseTask: {
        fields: null
    },
    ReleaseTaskLogUpdatedEvent: {
        fields: null
    },
    ReleaseTasksUpdatedEvent: {
        fields: null
    },
    ReleaseTrigger: {
        fields: null
    },
    ReleaseTriggerType: {
        enumValues: {
            "undefined": 0,
            "artifactSource": 1
        }
    },
    ReleaseUpdatedEvent: {
        fields: null
    },
    ReleaseUpdateMetadata: {
        fields: null
    },
    ReleaseWorkItemRef: {
        fields: null
    },
    ShallowReference: {
        fields: null
    },
    SourceIdInput: {
        fields: null
    },
    TaskStatus: {
        enumValues: {
            "unknown": 0,
            "pending": 1,
            "inProgress": 2,
            "success": 3,
            "failure": 4,
            "canceled": 5,
            "skipped": 6
        }
    },
    WorkflowTask: {
        fields: null
    }
};
exports.TypeInfo.AgentArtifactDefinition.fields = {
    artifactType: {
        enumType: exports.TypeInfo.AgentArtifactType
    }
};
exports.TypeInfo.ApprovalPendingEvent.fields = {};
exports.TypeInfo.ApprovalUpdateMetadata.fields = {
    scheduledTime: {
        isDate: true
    },
    status: {
        enumType: exports.TypeInfo.ApprovalStatus
    }
};
exports.TypeInfo.Artifact.fields = {
    definitions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactDefinition
    },
    source: {
        typeInfo: exports.TypeInfo.ArtifactSource
    }
};
exports.TypeInfo.ArtifactDefinition.fields = {
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true
    },
    modifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    modifiedOn: {
        isDate: true
    }
};
exports.TypeInfo.ArtifactInstanceData.fields = {};
exports.TypeInfo.ArtifactProvider.fields = {};
exports.TypeInfo.ArtifactSource.fields = {
    actualSourceReference: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactSourceReference
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true
    },
    modifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    modifiedOn: {
        isDate: true
    },
    sourceData: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputValue
    }
};
exports.TypeInfo.ArtifactSourceId.fields = {
    sourceIdInputs: {
        isArray: true,
        typeInfo: exports.TypeInfo.SourceIdInput
    }
};
exports.TypeInfo.ArtifactSourceIdsQueryResult.fields = {
    artifactSourceIds: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactSourceId
    }
};
exports.TypeInfo.ArtifactSourceReference.fields = {};
exports.TypeInfo.ArtifactTypeDefinition.fields = {
    inputDescriptors: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputDescriptor
    }
};
exports.TypeInfo.ArtifactVersion.fields = {
    versions: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildVersion
    }
};
exports.TypeInfo.ArtifactVersionQueryResult.fields = {
    artifactVersions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ArtifactVersion
    }
};
exports.TypeInfo.BuildVersion.fields = {};
exports.TypeInfo.Change.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    timestamp: {
        isDate: true
    }
};
exports.TypeInfo.ConfigurationVariableValue.fields = {};
exports.TypeInfo.Consumer.fields = {};
exports.TypeInfo.Issue.fields = {};
exports.TypeInfo.RealtimeReleaseEvent.fields = {};
exports.TypeInfo.Release.fields = {
    artifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.Artifact
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true
    },
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseEnvironment
    },
    modifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    modifiedOn: {
        isDate: true
    },
    reason: {
        enumType: exports.TypeInfo.ReleaseReason
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.ReleaseStatus
    },
    variables: {
        isArray: true,
        typeInfo: exports.TypeInfo.ConfigurationVariableValue
    }
};
exports.TypeInfo.ReleaseApproval.fields = {
    approvalHistory: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    approvalType: {
        enumType: exports.TypeInfo.ApprovalType
    },
    approvedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    approver: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true
    },
    dateCreated: {
        isDate: true
    },
    dateLastModified: {
        isDate: true
    },
    modifiedOn: {
        isDate: true
    },
    release: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releaseEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.ApprovalStatus
    }
};
exports.TypeInfo.ReleaseArtifact.fields = {
    artifactProvider: {
        typeInfo: exports.TypeInfo.ArtifactProvider
    }
};
exports.TypeInfo.ReleaseDefinition.fields = {
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdOn: {
        isDate: true
    },
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment
    },
    linkedArtifacts: {
        isArray: true,
        typeInfo: exports.TypeInfo.Artifact
    },
    modifiedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    modifiedOn: {
        isDate: true
    },
    triggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTrigger
    },
    variables: {
        isArray: true,
        typeInfo: exports.TypeInfo.ConfigurationVariableValue
    }
};
exports.TypeInfo.ReleaseDefinitionApprovalStep.fields = {
    approver: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.ReleaseDefinitionDeployStep.fields = {
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    }
};
exports.TypeInfo.ReleaseDefinitionEnvironment.fields = {
    deployStep: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionDeployStep
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    postDeploySteps: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovalStep
    },
    preDeploySteps: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionApprovalStep
    },
    variables: {
        isArray: true,
        typeInfo: exports.TypeInfo.ConfigurationVariableValue
    }
};
exports.TypeInfo.ReleaseDefinitionEnvironmentStep.fields = {};
exports.TypeInfo.ReleaseDefinitionEnvironmentSummary.fields = {
    lastReleases: {
        isArray: true,
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.ReleaseDefinitionEnvironmentTemplate.fields = {
    environment: {
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironment
    }
};
exports.TypeInfo.ReleaseDefinitionRevision.fields = {
    changedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changedDate: {
        isDate: true
    },
    changeType: {
        enumType: exports.TypeInfo.AuditAction
    }
};
exports.TypeInfo.ReleaseDefinitionSummary.fields = {
    environments: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseDefinitionEnvironmentSummary
    },
    releaseDefinition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    releases: {
        isArray: true,
        typeInfo: exports.TypeInfo.Release
    }
};
exports.TypeInfo.ReleaseEnvironment.fields = {
    createdOn: {
        isDate: true
    },
    modifiedOn: {
        isDate: true
    },
    originalPostDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    originalPreDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    postDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    preDeployApprovals: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseApproval
    },
    status: {
        enumType: exports.TypeInfo.EnvironmentStatus
    },
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
    },
    variables: {
        isArray: true,
        typeInfo: exports.TypeInfo.ConfigurationVariableValue
    },
    workflowTasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkflowTask
    }
};
exports.TypeInfo.ReleaseEnvironmentCompletedEvent.fields = {
    environment: {
        typeInfo: exports.TypeInfo.ReleaseEnvironment
    },
    releaseCreatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.ReleaseStartMetadata.fields = {
    artifactSourceData: {
        isArray: true,
        typeInfo: FormInputInterfaces.TypeInfo.InputValue
    },
    reason: {
        enumType: exports.TypeInfo.ReleaseReason
    }
};
exports.TypeInfo.ReleaseTask.fields = {
    dateEnded: {
        isDate: true
    },
    dateStarted: {
        isDate: true
    },
    issues: {
        isArray: true,
        typeInfo: exports.TypeInfo.Issue
    },
    status: {
        enumType: exports.TypeInfo.TaskStatus
    }
};
exports.TypeInfo.ReleaseTaskLogUpdatedEvent.fields = {};
exports.TypeInfo.ReleaseTasksUpdatedEvent.fields = {
    tasks: {
        isArray: true,
        typeInfo: exports.TypeInfo.ReleaseTask
    }
};
exports.TypeInfo.ReleaseTrigger.fields = {
    triggerType: {
        enumType: exports.TypeInfo.ReleaseTriggerType
    }
};
exports.TypeInfo.ReleaseUpdatedEvent.fields = {
    release: {
        typeInfo: exports.TypeInfo.Release
    }
};
exports.TypeInfo.ReleaseUpdateMetadata.fields = {
    requestTime: {
        isDate: true
    },
    status: {
        enumType: exports.TypeInfo.ReleaseStatus
    }
};
exports.TypeInfo.ReleaseWorkItemRef.fields = {};
exports.TypeInfo.ShallowReference.fields = {};
exports.TypeInfo.SourceIdInput.fields = {};
exports.TypeInfo.WorkflowTask.fields = {};
