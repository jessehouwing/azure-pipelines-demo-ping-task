/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var TfsCoreInterfaces = require("../interfaces/CoreInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (GitObjectType) {
    GitObjectType[GitObjectType["Bad"] = 0] = "Bad";
    GitObjectType[GitObjectType["Commit"] = 1] = "Commit";
    GitObjectType[GitObjectType["Tree"] = 2] = "Tree";
    GitObjectType[GitObjectType["Blob"] = 3] = "Blob";
    GitObjectType[GitObjectType["Tag"] = 4] = "Tag";
    GitObjectType[GitObjectType["Ext2"] = 5] = "Ext2";
    GitObjectType[GitObjectType["OfsDelta"] = 6] = "OfsDelta";
    GitObjectType[GitObjectType["RefDelta"] = 7] = "RefDelta";
})(exports.GitObjectType || (exports.GitObjectType = {}));
var GitObjectType = exports.GitObjectType;
(function (GitPathActions) {
    GitPathActions[GitPathActions["None"] = 0] = "None";
    GitPathActions[GitPathActions["Edit"] = 1] = "Edit";
    GitPathActions[GitPathActions["Delete"] = 2] = "Delete";
    GitPathActions[GitPathActions["Add"] = 3] = "Add";
    GitPathActions[GitPathActions["Rename"] = 4] = "Rename";
})(exports.GitPathActions || (exports.GitPathActions = {}));
var GitPathActions = exports.GitPathActions;
(function (GitRefUpdateMode) {
    GitRefUpdateMode[GitRefUpdateMode["BestEffort"] = 0] = "BestEffort";
    GitRefUpdateMode[GitRefUpdateMode["AllOrNone"] = 1] = "AllOrNone";
})(exports.GitRefUpdateMode || (exports.GitRefUpdateMode = {}));
var GitRefUpdateMode = exports.GitRefUpdateMode;
(function (GitRefUpdateStatus) {
    GitRefUpdateStatus[GitRefUpdateStatus["Succeeded"] = 0] = "Succeeded";
    GitRefUpdateStatus[GitRefUpdateStatus["ForcePushRequired"] = 1] = "ForcePushRequired";
    GitRefUpdateStatus[GitRefUpdateStatus["StaleOldObjectId"] = 2] = "StaleOldObjectId";
    GitRefUpdateStatus[GitRefUpdateStatus["InvalidRefName"] = 3] = "InvalidRefName";
    GitRefUpdateStatus[GitRefUpdateStatus["Unprocessed"] = 4] = "Unprocessed";
    GitRefUpdateStatus[GitRefUpdateStatus["UnresolvableToCommit"] = 5] = "UnresolvableToCommit";
    GitRefUpdateStatus[GitRefUpdateStatus["WritePermissionRequired"] = 6] = "WritePermissionRequired";
    GitRefUpdateStatus[GitRefUpdateStatus["ManageNotePermissionRequired"] = 7] = "ManageNotePermissionRequired";
    GitRefUpdateStatus[GitRefUpdateStatus["CreateBranchPermissionRequired"] = 8] = "CreateBranchPermissionRequired";
    GitRefUpdateStatus[GitRefUpdateStatus["CreateTagPermissionRequired"] = 9] = "CreateTagPermissionRequired";
    GitRefUpdateStatus[GitRefUpdateStatus["RejectedByPlugin"] = 10] = "RejectedByPlugin";
    GitRefUpdateStatus[GitRefUpdateStatus["Locked"] = 11] = "Locked";
    GitRefUpdateStatus[GitRefUpdateStatus["RefNameConflict"] = 12] = "RefNameConflict";
    GitRefUpdateStatus[GitRefUpdateStatus["RejectedByPolicy"] = 13] = "RejectedByPolicy";
    GitRefUpdateStatus[GitRefUpdateStatus["SucceededNonExistentRef"] = 14] = "SucceededNonExistentRef";
    GitRefUpdateStatus[GitRefUpdateStatus["SucceededCorruptRef"] = 15] = "SucceededCorruptRef";
})(exports.GitRefUpdateStatus || (exports.GitRefUpdateStatus = {}));
var GitRefUpdateStatus = exports.GitRefUpdateStatus;
(function (GitRepositoryPermissions) {
    GitRepositoryPermissions[GitRepositoryPermissions["None"] = 0] = "None";
    GitRepositoryPermissions[GitRepositoryPermissions["Administer"] = 1] = "Administer";
    GitRepositoryPermissions[GitRepositoryPermissions["GenericRead"] = 2] = "GenericRead";
    GitRepositoryPermissions[GitRepositoryPermissions["GenericContribute"] = 4] = "GenericContribute";
    GitRepositoryPermissions[GitRepositoryPermissions["ForcePush"] = 8] = "ForcePush";
    GitRepositoryPermissions[GitRepositoryPermissions["CreateBranch"] = 16] = "CreateBranch";
    GitRepositoryPermissions[GitRepositoryPermissions["CreateTag"] = 32] = "CreateTag";
    GitRepositoryPermissions[GitRepositoryPermissions["ManageNote"] = 64] = "ManageNote";
    GitRepositoryPermissions[GitRepositoryPermissions["PolicyExempt"] = 128] = "PolicyExempt";
    GitRepositoryPermissions[GitRepositoryPermissions["All"] = 255] = "All";
    GitRepositoryPermissions[GitRepositoryPermissions["BranchLevelPermissions"] = 141] = "BranchLevelPermissions";
})(exports.GitRepositoryPermissions || (exports.GitRepositoryPermissions = {}));
var GitRepositoryPermissions = exports.GitRepositoryPermissions;
(function (GitStatusState) {
    GitStatusState[GitStatusState["NotSet"] = 0] = "NotSet";
    GitStatusState[GitStatusState["Pending"] = 1] = "Pending";
    GitStatusState[GitStatusState["Succeeded"] = 2] = "Succeeded";
    GitStatusState[GitStatusState["Failure"] = 3] = "Failure";
    GitStatusState[GitStatusState["Error"] = 4] = "Error";
})(exports.GitStatusState || (exports.GitStatusState = {}));
var GitStatusState = exports.GitStatusState;
(function (GitVersionOptions) {
    GitVersionOptions[GitVersionOptions["None"] = 0] = "None";
    GitVersionOptions[GitVersionOptions["PreviousChange"] = 1] = "PreviousChange";
    GitVersionOptions[GitVersionOptions["FirstParent"] = 2] = "FirstParent";
})(exports.GitVersionOptions || (exports.GitVersionOptions = {}));
var GitVersionOptions = exports.GitVersionOptions;
(function (GitVersionType) {
    GitVersionType[GitVersionType["Branch"] = 0] = "Branch";
    GitVersionType[GitVersionType["Tag"] = 1] = "Tag";
    GitVersionType[GitVersionType["Commit"] = 2] = "Commit";
    GitVersionType[GitVersionType["Index"] = 3] = "Index";
})(exports.GitVersionType || (exports.GitVersionType = {}));
var GitVersionType = exports.GitVersionType;
(function (ItemContentType) {
    ItemContentType[ItemContentType["RawText"] = 0] = "RawText";
    ItemContentType[ItemContentType["Base64Encoded"] = 1] = "Base64Encoded";
})(exports.ItemContentType || (exports.ItemContentType = {}));
var ItemContentType = exports.ItemContentType;
(function (PullRequestAsyncStatus) {
    PullRequestAsyncStatus[PullRequestAsyncStatus["NotSet"] = 0] = "NotSet";
    PullRequestAsyncStatus[PullRequestAsyncStatus["Queued"] = 1] = "Queued";
    PullRequestAsyncStatus[PullRequestAsyncStatus["Conflicts"] = 2] = "Conflicts";
    PullRequestAsyncStatus[PullRequestAsyncStatus["Succeeded"] = 3] = "Succeeded";
    PullRequestAsyncStatus[PullRequestAsyncStatus["RejectedByPolicy"] = 4] = "RejectedByPolicy";
    PullRequestAsyncStatus[PullRequestAsyncStatus["Failure"] = 5] = "Failure";
})(exports.PullRequestAsyncStatus || (exports.PullRequestAsyncStatus = {}));
var PullRequestAsyncStatus = exports.PullRequestAsyncStatus;
(function (PullRequestStatus) {
    PullRequestStatus[PullRequestStatus["NotSet"] = 0] = "NotSet";
    PullRequestStatus[PullRequestStatus["Active"] = 1] = "Active";
    PullRequestStatus[PullRequestStatus["Abandoned"] = 2] = "Abandoned";
    PullRequestStatus[PullRequestStatus["Completed"] = 3] = "Completed";
    PullRequestStatus[PullRequestStatus["All"] = 4] = "All";
})(exports.PullRequestStatus || (exports.PullRequestStatus = {}));
var PullRequestStatus = exports.PullRequestStatus;
(function (TfvcVersionOption) {
    TfvcVersionOption[TfvcVersionOption["None"] = 0] = "None";
    TfvcVersionOption[TfvcVersionOption["Previous"] = 1] = "Previous";
    TfvcVersionOption[TfvcVersionOption["UseRename"] = 2] = "UseRename";
})(exports.TfvcVersionOption || (exports.TfvcVersionOption = {}));
var TfvcVersionOption = exports.TfvcVersionOption;
(function (TfvcVersionType) {
    TfvcVersionType[TfvcVersionType["None"] = 0] = "None";
    TfvcVersionType[TfvcVersionType["Changeset"] = 1] = "Changeset";
    TfvcVersionType[TfvcVersionType["Shelveset"] = 2] = "Shelveset";
    TfvcVersionType[TfvcVersionType["Change"] = 3] = "Change";
    TfvcVersionType[TfvcVersionType["Date"] = 4] = "Date";
    TfvcVersionType[TfvcVersionType["Latest"] = 5] = "Latest";
    TfvcVersionType[TfvcVersionType["Tip"] = 6] = "Tip";
    TfvcVersionType[TfvcVersionType["MergeSource"] = 7] = "MergeSource";
})(exports.TfvcVersionType || (exports.TfvcVersionType = {}));
var TfvcVersionType = exports.TfvcVersionType;
(function (VersionControlChangeType) {
    VersionControlChangeType[VersionControlChangeType["None"] = 0] = "None";
    VersionControlChangeType[VersionControlChangeType["Add"] = 1] = "Add";
    VersionControlChangeType[VersionControlChangeType["Edit"] = 2] = "Edit";
    VersionControlChangeType[VersionControlChangeType["Encoding"] = 4] = "Encoding";
    VersionControlChangeType[VersionControlChangeType["Rename"] = 8] = "Rename";
    VersionControlChangeType[VersionControlChangeType["Delete"] = 16] = "Delete";
    VersionControlChangeType[VersionControlChangeType["Undelete"] = 32] = "Undelete";
    VersionControlChangeType[VersionControlChangeType["Branch"] = 64] = "Branch";
    VersionControlChangeType[VersionControlChangeType["Merge"] = 128] = "Merge";
    VersionControlChangeType[VersionControlChangeType["Lock"] = 256] = "Lock";
    VersionControlChangeType[VersionControlChangeType["Rollback"] = 512] = "Rollback";
    VersionControlChangeType[VersionControlChangeType["SourceRename"] = 1024] = "SourceRename";
    VersionControlChangeType[VersionControlChangeType["TargetRename"] = 2048] = "TargetRename";
    VersionControlChangeType[VersionControlChangeType["Property"] = 4096] = "Property";
    VersionControlChangeType[VersionControlChangeType["All"] = 8191] = "All";
})(exports.VersionControlChangeType || (exports.VersionControlChangeType = {}));
var VersionControlChangeType = exports.VersionControlChangeType;
(function (VersionControlRecursionType) {
    VersionControlRecursionType[VersionControlRecursionType["None"] = 0] = "None";
    VersionControlRecursionType[VersionControlRecursionType["OneLevel"] = 1] = "OneLevel";
    VersionControlRecursionType[VersionControlRecursionType["Full"] = 120] = "Full";
})(exports.VersionControlRecursionType || (exports.VersionControlRecursionType = {}));
var VersionControlRecursionType = exports.VersionControlRecursionType;
exports.TypeInfo = {
    AssociatedWorkItem: {
        fields: null
    },
    Change: {
        fields: null
    },
    ChangeCountDictionary: {
        fields: null
    },
    ChangeList: {
        fields: null
    },
    ChangeListSearchCriteria: {
        fields: null
    },
    CheckinNote: {
        fields: null
    },
    FileContentMetadata: {
        fields: null
    },
    GitBaseVersionDescriptor: {
        fields: null
    },
    GitBlobRef: {
        fields: null
    },
    GitBranchStats: {
        fields: null
    },
    GitChange: {
        fields: null
    },
    GitCommit: {
        fields: null
    },
    GitCommitChanges: {
        fields: null
    },
    GitCommitDiffs: {
        fields: null
    },
    GitCommitRef: {
        fields: null
    },
    GitCommitToCreate: {
        fields: null
    },
    GitHistoryQueryResults: {
        fields: null
    },
    GitItem: {
        fields: null
    },
    GitItemDescriptor: {
        fields: null
    },
    GitItemRequestData: {
        fields: null
    },
    GitMediaObjectRef: {
        fields: null
    },
    GitObjectType: {
        enumValues: {
            "bad": 0,
            "commit": 1,
            "tree": 2,
            "blob": 3,
            "tag": 4,
            "ext2": 5,
            "ofsDelta": 6,
            "refDelta": 7
        }
    },
    GitPathAction: {
        fields: null
    },
    GitPathActions: {
        enumValues: {
            "none": 0,
            "edit": 1,
            "delete": 2,
            "add": 3,
            "rename": 4
        }
    },
    GitPullRequest: {
        fields: null
    },
    GitPullRequestCompletionOptions: {
        fields: null
    },
    GitPullRequestSearchCriteria: {
        fields: null
    },
    GitPush: {
        fields: null
    },
    GitPushEventData: {
        fields: null
    },
    GitPushRef: {
        fields: null
    },
    GitPushSearchCriteria: {
        fields: null
    },
    GitQueryCommitsCriteria: {
        fields: null
    },
    GitRef: {
        fields: null
    },
    GitRefUpdate: {
        fields: null
    },
    GitRefUpdateMode: {
        enumValues: {
            "bestEffort": 0,
            "allOrNone": 1
        }
    },
    GitRefUpdateResult: {
        fields: null
    },
    GitRefUpdateResultSet: {
        fields: null
    },
    GitRefUpdateStatus: {
        enumValues: {
            "succeeded": 0,
            "forcePushRequired": 1,
            "staleOldObjectId": 2,
            "invalidRefName": 3,
            "unprocessed": 4,
            "unresolvableToCommit": 5,
            "writePermissionRequired": 6,
            "manageNotePermissionRequired": 7,
            "createBranchPermissionRequired": 8,
            "createTagPermissionRequired": 9,
            "rejectedByPlugin": 10,
            "locked": 11,
            "refNameConflict": 12,
            "rejectedByPolicy": 13,
            "succeededNonExistentRef": 14,
            "succeededCorruptRef": 15
        }
    },
    GitRepository: {
        fields: null
    },
    GitRepositoryPermissions: {
        enumValues: {
            "none": 0,
            "administer": 1,
            "genericRead": 2,
            "genericContribute": 4,
            "forcePush": 8,
            "createBranch": 16,
            "createTag": 32,
            "manageNote": 64,
            "policyExempt": 128,
            "all": 255,
            "branchLevelPermissions": 141
        }
    },
    GitStatus: {
        fields: null
    },
    GitStatusContext: {
        fields: null
    },
    GitStatusState: {
        enumValues: {
            "notSet": 0,
            "pending": 1,
            "succeeded": 2,
            "failure": 3,
            "error": 4
        }
    },
    GitTargetVersionDescriptor: {
        fields: null
    },
    GitTreeEntryRef: {
        fields: null
    },
    GitTreeRef: {
        fields: null
    },
    GitUserDate: {
        fields: null
    },
    GitVersionDescriptor: {
        fields: null
    },
    GitVersionOptions: {
        enumValues: {
            "none": 0,
            "previousChange": 1,
            "firstParent": 2
        }
    },
    GitVersionType: {
        enumValues: {
            "branch": 0,
            "tag": 1,
            "commit": 2,
            "index": 3
        }
    },
    HistoryEntry: {
        fields: null
    },
    HistoryQueryResults: {
        fields: null
    },
    IdentityRefWithVote: {
        fields: null
    },
    IncludedGitCommit: {
        fields: null
    },
    ItemContent: {
        fields: null
    },
    ItemContentType: {
        enumValues: {
            "rawText": 0,
            "base64Encoded": 1
        }
    },
    ItemDetailsOptions: {
        fields: null
    },
    ItemModel: {
        fields: null
    },
    PullRequestAsyncStatus: {
        enumValues: {
            "notSet": 0,
            "queued": 1,
            "conflicts": 2,
            "succeeded": 3,
            "rejectedByPolicy": 4,
            "failure": 5
        }
    },
    PullRequestStatus: {
        enumValues: {
            "notSet": 0,
            "active": 1,
            "abandoned": 2,
            "completed": 3,
            "all": 4
        }
    },
    TfvcBranch: {
        fields: null
    },
    TfvcBranchMapping: {
        fields: null
    },
    TfvcBranchRef: {
        fields: null
    },
    TfvcChange: {
        fields: null
    },
    TfvcChangeset: {
        fields: null
    },
    TfvcChangesetRef: {
        fields: null
    },
    TfvcChangesetSearchCriteria: {
        fields: null
    },
    TfvcChangesetsRequestData: {
        fields: null
    },
    TfvcCheckinEventData: {
        fields: null
    },
    TfvcHistoryEntry: {
        fields: null
    },
    TfvcItem: {
        fields: null
    },
    TfvcItemDescriptor: {
        fields: null
    },
    TfvcItemRequestData: {
        fields: null
    },
    TfvcLabel: {
        fields: null
    },
    TfvcLabelRef: {
        fields: null
    },
    TfvcLabelRequestData: {
        fields: null
    },
    TfvcMergeSource: {
        fields: null
    },
    TfvcPolicyFailureInfo: {
        fields: null
    },
    TfvcPolicyOverrideInfo: {
        fields: null
    },
    TfvcShallowBranchRef: {
        fields: null
    },
    TfvcShelveset: {
        fields: null
    },
    TfvcShelvesetRef: {
        fields: null
    },
    TfvcShelvesetRequestData: {
        fields: null
    },
    TfvcVersionDescriptor: {
        fields: null
    },
    TfvcVersionOption: {
        enumValues: {
            "none": 0,
            "previous": 1,
            "useRename": 2
        }
    },
    TfvcVersionType: {
        enumValues: {
            "none": 0,
            "changeset": 1,
            "shelveset": 2,
            "change": 3,
            "date": 4,
            "latest": 5,
            "tip": 6,
            "mergeSource": 7
        }
    },
    UpdateRefsRequest: {
        fields: null
    },
    VersionControlChangeType: {
        enumValues: {
            "none": 0,
            "add": 1,
            "edit": 2,
            "encoding": 4,
            "rename": 8,
            "delete": 16,
            "undelete": 32,
            "branch": 64,
            "merge": 128,
            "lock": 256,
            "rollback": 512,
            "sourceRename": 1024,
            "targetRename": 2048,
            "property": 4096,
            "all": 8191
        }
    },
    VersionControlProjectInfo: {
        fields: null
    },
    VersionControlRecursionType: {
        enumValues: {
            "none": 0,
            "oneLevel": 1,
            "full": 120
        }
    }
};
exports.TypeInfo.AssociatedWorkItem.fields = {};
exports.TypeInfo.Change.fields = {
    changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    },
    newContent: {
        typeInfo: exports.TypeInfo.ItemContent
    }
};
exports.TypeInfo.ChangeCountDictionary.fields = {};
exports.TypeInfo.ChangeList.fields = {
    creationDate: {
        isDate: true
    },
    notes: {
        isArray: true,
        typeInfo: exports.TypeInfo.CheckinNote
    },
    sortDate: {
        isDate: true
    }
};
exports.TypeInfo.ChangeListSearchCriteria.fields = {};
exports.TypeInfo.CheckinNote.fields = {};
exports.TypeInfo.FileContentMetadata.fields = {};
exports.TypeInfo.GitBaseVersionDescriptor.fields = {
    baseVersionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    baseVersionType: {
        enumType: exports.TypeInfo.GitVersionType
    },
    versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    versionType: {
        enumType: exports.TypeInfo.GitVersionType
    }
};
exports.TypeInfo.GitBlobRef.fields = {};
exports.TypeInfo.GitBranchStats.fields = {
    commit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    }
};
exports.TypeInfo.GitChange.fields = {
    changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    },
    item: {
        typeInfo: exports.TypeInfo.GitItem
    },
    newContent: {
        typeInfo: exports.TypeInfo.ItemContent
    }
};
exports.TypeInfo.GitCommit.fields = {
    author: {
        typeInfo: exports.TypeInfo.GitUserDate
    },
    changeCounts: {
        typeInfo: exports.TypeInfo.ChangeCountDictionary
    },
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
    },
    committer: {
        typeInfo: exports.TypeInfo.GitUserDate
    },
    push: {
        typeInfo: exports.TypeInfo.GitPushRef
    }
};
exports.TypeInfo.GitCommitChanges.fields = {
    changeCounts: {
        typeInfo: exports.TypeInfo.ChangeCountDictionary
    },
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
    }
};
exports.TypeInfo.GitCommitDiffs.fields = {
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
    }
};
exports.TypeInfo.GitCommitRef.fields = {
    author: {
        typeInfo: exports.TypeInfo.GitUserDate
    },
    changeCounts: {
        typeInfo: exports.TypeInfo.ChangeCountDictionary
    },
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitChange
    },
    committer: {
        typeInfo: exports.TypeInfo.GitUserDate
    }
};
exports.TypeInfo.GitCommitToCreate.fields = {
    baseRef: {
        typeInfo: exports.TypeInfo.GitRef
    },
    pathActions: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitPathAction
    }
};
exports.TypeInfo.GitHistoryQueryResults.fields = {};
exports.TypeInfo.GitItem.fields = {
    contentMetadata: {
        typeInfo: exports.TypeInfo.FileContentMetadata
    },
    gitObjectType: {
        enumType: exports.TypeInfo.GitObjectType
    },
    latestProcessedChange: {
        typeInfo: exports.TypeInfo.GitCommitRef
    }
};
exports.TypeInfo.GitItemDescriptor.fields = {
    recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
    },
    versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    versionType: {
        enumType: exports.TypeInfo.GitVersionType
    }
};
exports.TypeInfo.GitItemRequestData.fields = {
    itemDescriptors: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitItemDescriptor
    }
};
exports.TypeInfo.GitMediaObjectRef.fields = {};
exports.TypeInfo.GitPathAction.fields = {
    action: {
        enumType: exports.TypeInfo.GitPathActions
    }
};
exports.TypeInfo.GitPullRequest.fields = {
    closedDate: {
        isDate: true
    },
    commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    completionOptions: {
        typeInfo: exports.TypeInfo.GitPullRequestCompletionOptions
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    creationDate: {
        isDate: true
    },
    lastMergeCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    lastMergeSourceCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    lastMergeTargetCommit: {
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    mergeStatus: {
        enumType: exports.TypeInfo.PullRequestAsyncStatus
    },
    repository: {
        typeInfo: exports.TypeInfo.GitRepository
    },
    reviewers: {
        isArray: true,
        typeInfo: exports.TypeInfo.IdentityRefWithVote
    },
    status: {
        enumType: exports.TypeInfo.PullRequestStatus
    }
};
exports.TypeInfo.GitPullRequestCompletionOptions.fields = {};
exports.TypeInfo.GitPullRequestSearchCriteria.fields = {
    status: {
        enumType: exports.TypeInfo.PullRequestStatus
    }
};
exports.TypeInfo.GitPush.fields = {
    commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommitRef
    },
    date: {
        isDate: true
    },
    pushedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    refUpdates: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitRefUpdate
    },
    repository: {
        typeInfo: exports.TypeInfo.GitRepository
    }
};
exports.TypeInfo.GitPushEventData.fields = {
    commits: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitCommit
    },
    repository: {
        typeInfo: exports.TypeInfo.GitRepository
    }
};
exports.TypeInfo.GitPushRef.fields = {
    date: {
        isDate: true
    },
    pushedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.GitPushSearchCriteria.fields = {
    fromDate: {
        isDate: true
    },
    toDate: {
        isDate: true
    }
};
exports.TypeInfo.GitQueryCommitsCriteria.fields = {
    compareVersion: {
        typeInfo: exports.TypeInfo.GitVersionDescriptor
    },
    itemVersion: {
        typeInfo: exports.TypeInfo.GitVersionDescriptor
    }
};
exports.TypeInfo.GitRef.fields = {
    isLockedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    statuses: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitStatus
    }
};
exports.TypeInfo.GitRefUpdate.fields = {};
exports.TypeInfo.GitRefUpdateResult.fields = {
    updateStatus: {
        enumType: exports.TypeInfo.GitRefUpdateStatus
    }
};
exports.TypeInfo.GitRefUpdateResultSet.fields = {
    pushTime: {
        isDate: true
    },
    results: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitRefUpdateResult
    }
};
exports.TypeInfo.GitRepository.fields = {
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    }
};
exports.TypeInfo.GitStatus.fields = {
    context: {
        typeInfo: exports.TypeInfo.GitStatusContext
    },
    createdBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    creationDate: {
        isDate: true
    },
    state: {
        enumType: exports.TypeInfo.GitStatusState
    }
};
exports.TypeInfo.GitStatusContext.fields = {};
exports.TypeInfo.GitTargetVersionDescriptor.fields = {
    targetVersionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    targetVersionType: {
        enumType: exports.TypeInfo.GitVersionType
    },
    versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    versionType: {
        enumType: exports.TypeInfo.GitVersionType
    }
};
exports.TypeInfo.GitTreeEntryRef.fields = {
    gitObjectType: {
        enumType: exports.TypeInfo.GitObjectType
    }
};
exports.TypeInfo.GitTreeRef.fields = {
    treeEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitTreeEntryRef
    }
};
exports.TypeInfo.GitUserDate.fields = {
    date: {
        isDate: true
    }
};
exports.TypeInfo.GitVersionDescriptor.fields = {
    versionOptions: {
        enumType: exports.TypeInfo.GitVersionOptions
    },
    versionType: {
        enumType: exports.TypeInfo.GitVersionType
    }
};
exports.TypeInfo.HistoryEntry.fields = {
    itemChangeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    }
};
exports.TypeInfo.HistoryQueryResults.fields = {};
exports.TypeInfo.IdentityRefWithVote.fields = {
    votedFor: {
        isArray: true,
        typeInfo: exports.TypeInfo.IdentityRefWithVote
    }
};
exports.TypeInfo.IncludedGitCommit.fields = {
    commitTime: {
        isDate: true
    }
};
exports.TypeInfo.ItemContent.fields = {
    contentType: {
        enumType: exports.TypeInfo.ItemContentType
    }
};
exports.TypeInfo.ItemDetailsOptions.fields = {
    recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
    }
};
exports.TypeInfo.ItemModel.fields = {
    contentMetadata: {
        typeInfo: exports.TypeInfo.FileContentMetadata
    }
};
exports.TypeInfo.TfvcBranch.fields = {
    children: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcBranch
    },
    createdDate: {
        isDate: true
    },
    mappings: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcBranchMapping
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    parent: {
        typeInfo: exports.TypeInfo.TfvcShallowBranchRef
    },
    relatedBranches: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcShallowBranchRef
    }
};
exports.TypeInfo.TfvcBranchMapping.fields = {};
exports.TypeInfo.TfvcBranchRef.fields = {
    createdDate: {
        isDate: true
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.TfvcChange.fields = {
    changeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    },
    item: {
        typeInfo: exports.TypeInfo.TfvcItem
    },
    mergeSources: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcMergeSource
    },
    newContent: {
        typeInfo: exports.TypeInfo.ItemContent
    }
};
exports.TypeInfo.TfvcChangeset.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcChange
    },
    checkedInBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    checkinNotes: {
        isArray: true,
        typeInfo: exports.TypeInfo.CheckinNote
    },
    createdDate: {
        isDate: true
    },
    policyOverride: {
        typeInfo: exports.TypeInfo.TfvcPolicyOverrideInfo
    },
    workItems: {
        isArray: true,
        typeInfo: exports.TypeInfo.AssociatedWorkItem
    }
};
exports.TypeInfo.TfvcChangesetRef.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    checkedInBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdDate: {
        isDate: true
    }
};
exports.TypeInfo.TfvcChangesetSearchCriteria.fields = {};
exports.TypeInfo.TfvcChangesetsRequestData.fields = {};
exports.TypeInfo.TfvcCheckinEventData.fields = {
    changeset: {
        typeInfo: exports.TypeInfo.TfvcChangeset
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    }
};
exports.TypeInfo.TfvcHistoryEntry.fields = {
    itemChangeType: {
        enumType: exports.TypeInfo.VersionControlChangeType
    }
};
exports.TypeInfo.TfvcItem.fields = {
    changeDate: {
        isDate: true
    },
    contentMetadata: {
        typeInfo: exports.TypeInfo.FileContentMetadata
    }
};
exports.TypeInfo.TfvcItemDescriptor.fields = {
    recursionLevel: {
        enumType: exports.TypeInfo.VersionControlRecursionType
    },
    versionOption: {
        enumType: exports.TypeInfo.TfvcVersionOption
    },
    versionType: {
        enumType: exports.TypeInfo.TfvcVersionType
    }
};
exports.TypeInfo.TfvcItemRequestData.fields = {
    itemDescriptors: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcItemDescriptor
    }
};
exports.TypeInfo.TfvcLabel.fields = {
    items: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcItem
    },
    modifiedDate: {
        isDate: true
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.TfvcLabelRef.fields = {
    modifiedDate: {
        isDate: true
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.TfvcLabelRequestData.fields = {};
exports.TypeInfo.TfvcMergeSource.fields = {};
exports.TypeInfo.TfvcPolicyFailureInfo.fields = {};
exports.TypeInfo.TfvcPolicyOverrideInfo.fields = {
    policyFailures: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcPolicyFailureInfo
    }
};
exports.TypeInfo.TfvcShallowBranchRef.fields = {};
exports.TypeInfo.TfvcShelveset.fields = {
    changes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TfvcChange
    },
    createdDate: {
        isDate: true
    },
    notes: {
        isArray: true,
        typeInfo: exports.TypeInfo.CheckinNote
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    policyOverride: {
        typeInfo: exports.TypeInfo.TfvcPolicyOverrideInfo
    },
    workItems: {
        isArray: true,
        typeInfo: exports.TypeInfo.AssociatedWorkItem
    }
};
exports.TypeInfo.TfvcShelvesetRef.fields = {
    createdDate: {
        isDate: true
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.TfvcShelvesetRequestData.fields = {};
exports.TypeInfo.TfvcVersionDescriptor.fields = {
    versionOption: {
        enumType: exports.TypeInfo.TfvcVersionOption
    },
    versionType: {
        enumType: exports.TypeInfo.TfvcVersionType
    }
};
exports.TypeInfo.UpdateRefsRequest.fields = {
    refUpdateRequests: {
        isArray: true,
        typeInfo: exports.TypeInfo.GitRefUpdate
    },
    updateMode: {
        enumType: exports.TypeInfo.GitRefUpdateMode
    }
};
exports.TypeInfo.VersionControlProjectInfo.fields = {
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    }
};
