/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (AcquisitionAssignmentType) {
    AcquisitionAssignmentType[AcquisitionAssignmentType["None"] = 0] = "None";
    AcquisitionAssignmentType[AcquisitionAssignmentType["Me"] = 1] = "Me";
    AcquisitionAssignmentType[AcquisitionAssignmentType["All"] = 2] = "All";
})(exports.AcquisitionAssignmentType || (exports.AcquisitionAssignmentType = {}));
var AcquisitionAssignmentType = exports.AcquisitionAssignmentType;
(function (AcquisitionOperationType) {
    AcquisitionOperationType[AcquisitionOperationType["Get"] = 0] = "Get";
    AcquisitionOperationType[AcquisitionOperationType["Install"] = 1] = "Install";
    AcquisitionOperationType[AcquisitionOperationType["Buy"] = 2] = "Buy";
    AcquisitionOperationType[AcquisitionOperationType["Try"] = 3] = "Try";
    AcquisitionOperationType[AcquisitionOperationType["Request"] = 4] = "Request";
})(exports.AcquisitionOperationType || (exports.AcquisitionOperationType = {}));
var AcquisitionOperationType = exports.AcquisitionOperationType;
(function (ExtensionQueryFilterType) {
    ExtensionQueryFilterType[ExtensionQueryFilterType["Tag"] = 1] = "Tag";
    ExtensionQueryFilterType[ExtensionQueryFilterType["DisplayName"] = 2] = "DisplayName";
    ExtensionQueryFilterType[ExtensionQueryFilterType["Private"] = 3] = "Private";
    ExtensionQueryFilterType[ExtensionQueryFilterType["Id"] = 4] = "Id";
    ExtensionQueryFilterType[ExtensionQueryFilterType["Category"] = 5] = "Category";
    ExtensionQueryFilterType[ExtensionQueryFilterType["ContributionType"] = 6] = "ContributionType";
    ExtensionQueryFilterType[ExtensionQueryFilterType["Name"] = 7] = "Name";
    ExtensionQueryFilterType[ExtensionQueryFilterType["InstallationTarget"] = 8] = "InstallationTarget";
})(exports.ExtensionQueryFilterType || (exports.ExtensionQueryFilterType = {}));
var ExtensionQueryFilterType = exports.ExtensionQueryFilterType;
(function (ExtensionQueryFlags) {
    ExtensionQueryFlags[ExtensionQueryFlags["None"] = 0] = "None";
    ExtensionQueryFlags[ExtensionQueryFlags["IncludeVersions"] = 1] = "IncludeVersions";
    ExtensionQueryFlags[ExtensionQueryFlags["IncludeFiles"] = 2] = "IncludeFiles";
    ExtensionQueryFlags[ExtensionQueryFlags["IncludeCategoryAndTags"] = 4] = "IncludeCategoryAndTags";
    ExtensionQueryFlags[ExtensionQueryFlags["IncludeSharedAccounts"] = 8] = "IncludeSharedAccounts";
    ExtensionQueryFlags[ExtensionQueryFlags["IncludeVersionProperties"] = 16] = "IncludeVersionProperties";
    ExtensionQueryFlags[ExtensionQueryFlags["ExcludeNonValidated"] = 32] = "ExcludeNonValidated";
    ExtensionQueryFlags[ExtensionQueryFlags["IncludeInstallationTargets"] = 64] = "IncludeInstallationTargets";
    ExtensionQueryFlags[ExtensionQueryFlags["IncludeAssetUri"] = 128] = "IncludeAssetUri";
    ExtensionQueryFlags[ExtensionQueryFlags["IncludeStatistics"] = 256] = "IncludeStatistics";
    ExtensionQueryFlags[ExtensionQueryFlags["AllAttributes"] = 479] = "AllAttributes";
})(exports.ExtensionQueryFlags || (exports.ExtensionQueryFlags = {}));
var ExtensionQueryFlags = exports.ExtensionQueryFlags;
(function (ExtensionStatisticOperation) {
    ExtensionStatisticOperation[ExtensionStatisticOperation["None"] = 0] = "None";
    ExtensionStatisticOperation[ExtensionStatisticOperation["Set"] = 1] = "Set";
    ExtensionStatisticOperation[ExtensionStatisticOperation["Increment"] = 2] = "Increment";
    ExtensionStatisticOperation[ExtensionStatisticOperation["Decrement"] = 3] = "Decrement";
})(exports.ExtensionStatisticOperation || (exports.ExtensionStatisticOperation = {}));
var ExtensionStatisticOperation = exports.ExtensionStatisticOperation;
(function (ExtensionVersionFlags) {
    ExtensionVersionFlags[ExtensionVersionFlags["None"] = 0] = "None";
    ExtensionVersionFlags[ExtensionVersionFlags["Validated"] = 1] = "Validated";
})(exports.ExtensionVersionFlags || (exports.ExtensionVersionFlags = {}));
var ExtensionVersionFlags = exports.ExtensionVersionFlags;
(function (PagingDirection) {
    PagingDirection[PagingDirection["Backward"] = 1] = "Backward";
    PagingDirection[PagingDirection["Forward"] = 2] = "Forward";
})(exports.PagingDirection || (exports.PagingDirection = {}));
var PagingDirection = exports.PagingDirection;
(function (PublishedExtensionFlags) {
    PublishedExtensionFlags[PublishedExtensionFlags["None"] = 0] = "None";
    PublishedExtensionFlags[PublishedExtensionFlags["Disabled"] = 1] = "Disabled";
    PublishedExtensionFlags[PublishedExtensionFlags["BuiltIn"] = 2] = "BuiltIn";
    PublishedExtensionFlags[PublishedExtensionFlags["Validated"] = 4] = "Validated";
    PublishedExtensionFlags[PublishedExtensionFlags["Trusted"] = 8] = "Trusted";
    PublishedExtensionFlags[PublishedExtensionFlags["Public"] = 256] = "Public";
    PublishedExtensionFlags[PublishedExtensionFlags["MultiVersion"] = 512] = "MultiVersion";
    PublishedExtensionFlags[PublishedExtensionFlags["System"] = 1024] = "System";
    PublishedExtensionFlags[PublishedExtensionFlags["Preview"] = 2048] = "Preview";
})(exports.PublishedExtensionFlags || (exports.PublishedExtensionFlags = {}));
var PublishedExtensionFlags = exports.PublishedExtensionFlags;
(function (PublisherFlags) {
    PublisherFlags[PublisherFlags["UnChanged"] = 1073741824] = "UnChanged";
    PublisherFlags[PublisherFlags["None"] = 0] = "None";
    PublisherFlags[PublisherFlags["Disabled"] = 1] = "Disabled";
    PublisherFlags[PublisherFlags["Verified"] = 2] = "Verified";
    PublisherFlags[PublisherFlags["ServiceFlags"] = 3] = "ServiceFlags";
})(exports.PublisherFlags || (exports.PublisherFlags = {}));
var PublisherFlags = exports.PublisherFlags;
(function (PublisherPermissions) {
    PublisherPermissions[PublisherPermissions["Read"] = 1] = "Read";
    PublisherPermissions[PublisherPermissions["Write"] = 2] = "Write";
    PublisherPermissions[PublisherPermissions["Create"] = 4] = "Create";
    PublisherPermissions[PublisherPermissions["Publish"] = 8] = "Publish";
    PublisherPermissions[PublisherPermissions["Admin"] = 16] = "Admin";
    PublisherPermissions[PublisherPermissions["TrustedPartner"] = 32] = "TrustedPartner";
    PublisherPermissions[PublisherPermissions["PrivateRead"] = 64] = "PrivateRead";
})(exports.PublisherPermissions || (exports.PublisherPermissions = {}));
var PublisherPermissions = exports.PublisherPermissions;
(function (PublisherQueryFilterType) {
    PublisherQueryFilterType[PublisherQueryFilterType["Tag"] = 1] = "Tag";
    PublisherQueryFilterType[PublisherQueryFilterType["DisplayName"] = 2] = "DisplayName";
    PublisherQueryFilterType[PublisherQueryFilterType["My"] = 3] = "My";
})(exports.PublisherQueryFilterType || (exports.PublisherQueryFilterType = {}));
var PublisherQueryFilterType = exports.PublisherQueryFilterType;
(function (PublisherQueryFlags) {
    PublisherQueryFlags[PublisherQueryFlags["None"] = 0] = "None";
    PublisherQueryFlags[PublisherQueryFlags["IncludeExtensions"] = 1] = "IncludeExtensions";
})(exports.PublisherQueryFlags || (exports.PublisherQueryFlags = {}));
var PublisherQueryFlags = exports.PublisherQueryFlags;
(function (SigningKeyPermissions) {
    SigningKeyPermissions[SigningKeyPermissions["Read"] = 1] = "Read";
    SigningKeyPermissions[SigningKeyPermissions["Write"] = 2] = "Write";
})(exports.SigningKeyPermissions || (exports.SigningKeyPermissions = {}));
var SigningKeyPermissions = exports.SigningKeyPermissions;
exports.TypeInfo = {
    AcquisitionAssignmentType: {
        enumValues: {
            "none": 0,
            "me": 1,
            "all": 2
        }
    },
    AcquisitionOperationType: {
        enumValues: {
            "get": 0,
            "install": 1,
            "buy": 2,
            "try": 3,
            "request": 4
        }
    },
    AcquisitionOptions: {
        fields: null
    },
    ExtensionAcquisitionRequest: {
        fields: null
    },
    ExtensionFile: {
        fields: null
    },
    ExtensionFilterResult: {
        fields: null
    },
    ExtensionPackage: {
        fields: null
    },
    ExtensionQuery: {
        fields: null
    },
    ExtensionQueryFilterType: {
        enumValues: {
            "tag": 1,
            "displayName": 2,
            "private": 3,
            "id": 4,
            "category": 5,
            "contributionType": 6,
            "name": 7,
            "installationTarget": 8
        }
    },
    ExtensionQueryFlags: {
        enumValues: {
            "none": 0,
            "includeVersions": 1,
            "includeFiles": 2,
            "includeCategoryAndTags": 4,
            "includeSharedAccounts": 8,
            "includeVersionProperties": 16,
            "excludeNonValidated": 32,
            "includeInstallationTargets": 64,
            "includeAssetUri": 128,
            "includeStatistics": 256,
            "allAttributes": 479
        }
    },
    ExtensionQueryResult: {
        fields: null
    },
    ExtensionShare: {
        fields: null
    },
    ExtensionStatistic: {
        fields: null
    },
    ExtensionStatisticOperation: {
        enumValues: {
            "none": 0,
            "set": 1,
            "increment": 2,
            "decrement": 3
        }
    },
    ExtensionVersion: {
        fields: null
    },
    ExtensionVersionFlags: {
        enumValues: {
            "none": 0,
            "validated": 1
        }
    },
    FilterCriteria: {
        fields: null
    },
    InstallationTarget: {
        fields: null
    },
    PagingDirection: {
        enumValues: {
            "backward": 1,
            "forward": 2
        }
    },
    PublishedExtension: {
        fields: null
    },
    PublishedExtensionFlags: {
        enumValues: {
            "none": 0,
            "disabled": 1,
            "builtIn": 2,
            "validated": 4,
            "trusted": 8,
            "public": 256,
            "multiVersion": 512,
            "system": 1024,
            "preview": 2048
        }
    },
    Publisher: {
        fields: null
    },
    PublisherFacts: {
        fields: null
    },
    PublisherFilterResult: {
        fields: null
    },
    PublisherFlags: {
        enumValues: {
            "unChanged": 1073741824,
            "none": 0,
            "disabled": 1,
            "verified": 2,
            "serviceFlags": 3
        }
    },
    PublisherPermission: {
        fields: null
    },
    PublisherPermissions: {
        enumValues: {
            "read": 1,
            "write": 2,
            "create": 4,
            "publish": 8,
            "admin": 16,
            "trustedPartner": 32,
            "privateRead": 64
        }
    },
    PublisherQuery: {
        fields: null
    },
    PublisherQueryFilterType: {
        enumValues: {
            "tag": 1,
            "displayName": 2,
            "my": 3
        }
    },
    PublisherQueryFlags: {
        enumValues: {
            "none": 0,
            "includeExtensions": 1
        }
    },
    PublisherQueryResult: {
        fields: null
    },
    QueryFilter: {
        fields: null
    },
    SigningKeyPermissions: {
        enumValues: {
            "read": 1,
            "write": 2
        }
    }
};
exports.TypeInfo.AcquisitionOptions.fields = {
    operations: {
        isArray: true,
        enumType: exports.TypeInfo.AcquisitionOperationType
    }
};
exports.TypeInfo.ExtensionAcquisitionRequest.fields = {
    assignmentType: {
        enumType: exports.TypeInfo.AcquisitionAssignmentType
    },
    operationType: {
        enumType: exports.TypeInfo.AcquisitionOperationType
    }
};
exports.TypeInfo.ExtensionFile.fields = {};
exports.TypeInfo.ExtensionFilterResult.fields = {
    extensions: {
        isArray: true,
        typeInfo: exports.TypeInfo.PublishedExtension
    }
};
exports.TypeInfo.ExtensionPackage.fields = {};
exports.TypeInfo.ExtensionQuery.fields = {
    filters: {
        isArray: true,
        typeInfo: exports.TypeInfo.QueryFilter
    },
    flags: {
        enumType: exports.TypeInfo.ExtensionQueryFlags
    }
};
exports.TypeInfo.ExtensionQueryResult.fields = {
    results: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionFilterResult
    }
};
exports.TypeInfo.ExtensionShare.fields = {};
exports.TypeInfo.ExtensionStatistic.fields = {};
exports.TypeInfo.ExtensionVersion.fields = {
    files: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionFile
    },
    flags: {
        enumType: exports.TypeInfo.ExtensionVersionFlags
    },
    lastUpdated: {
        isDate: true
    }
};
exports.TypeInfo.FilterCriteria.fields = {};
exports.TypeInfo.InstallationTarget.fields = {};
exports.TypeInfo.PublishedExtension.fields = {
    flags: {
        enumType: exports.TypeInfo.PublishedExtensionFlags
    },
    installationTargets: {
        isArray: true,
        typeInfo: exports.TypeInfo.InstallationTarget
    },
    lastUpdated: {
        isDate: true
    },
    publisher: {
        typeInfo: exports.TypeInfo.PublisherFacts
    },
    sharedWith: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionShare
    },
    statistics: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionStatistic
    },
    versions: {
        isArray: true,
        typeInfo: exports.TypeInfo.ExtensionVersion
    }
};
exports.TypeInfo.Publisher.fields = {
    extensions: {
        isArray: true,
        typeInfo: exports.TypeInfo.PublishedExtension
    },
    flags: {
        enumType: exports.TypeInfo.PublisherFlags
    },
    lastUpdated: {
        isDate: true
    }
};
exports.TypeInfo.PublisherFacts.fields = {};
exports.TypeInfo.PublisherFilterResult.fields = {
    publishers: {
        isArray: true,
        typeInfo: exports.TypeInfo.Publisher
    }
};
exports.TypeInfo.PublisherPermission.fields = {
    identity: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    permissions: {
        enumType: exports.TypeInfo.PublisherPermissions
    }
};
exports.TypeInfo.PublisherQuery.fields = {
    filters: {
        isArray: true,
        typeInfo: exports.TypeInfo.QueryFilter
    },
    flags: {
        enumType: exports.TypeInfo.PublisherQueryFlags
    }
};
exports.TypeInfo.PublisherQueryResult.fields = {
    results: {
        isArray: true,
        typeInfo: exports.TypeInfo.PublisherFilterResult
    }
};
exports.TypeInfo.QueryFilter.fields = {
    criteria: {
        isArray: true,
        typeInfo: exports.TypeInfo.FilterCriteria
    },
    direction: {
        enumType: exports.TypeInfo.PagingDirection
    }
};
