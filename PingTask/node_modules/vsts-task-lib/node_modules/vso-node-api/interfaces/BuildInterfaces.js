/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var TfsCoreInterfaces = require("../interfaces/CoreInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (AgentStatus) {
    AgentStatus[AgentStatus["Unavailable"] = 0] = "Unavailable";
    AgentStatus[AgentStatus["Available"] = 1] = "Available";
    AgentStatus[AgentStatus["Offline"] = 2] = "Offline";
})(exports.AgentStatus || (exports.AgentStatus = {}));
var AgentStatus = exports.AgentStatus;
(function (AuditAction) {
    AuditAction[AuditAction["Add"] = 1] = "Add";
    AuditAction[AuditAction["Update"] = 2] = "Update";
    AuditAction[AuditAction["Delete"] = 3] = "Delete";
})(exports.AuditAction || (exports.AuditAction = {}));
var AuditAction = exports.AuditAction;
(function (BuildAuthorizationScope) {
    BuildAuthorizationScope[BuildAuthorizationScope["ProjectCollection"] = 1] = "ProjectCollection";
    BuildAuthorizationScope[BuildAuthorizationScope["Project"] = 2] = "Project";
})(exports.BuildAuthorizationScope || (exports.BuildAuthorizationScope = {}));
var BuildAuthorizationScope = exports.BuildAuthorizationScope;
(function (BuildOptionInputType) {
    BuildOptionInputType[BuildOptionInputType["String"] = 0] = "String";
    BuildOptionInputType[BuildOptionInputType["Boolean"] = 1] = "Boolean";
    BuildOptionInputType[BuildOptionInputType["StringList"] = 2] = "StringList";
    BuildOptionInputType[BuildOptionInputType["Radio"] = 3] = "Radio";
    BuildOptionInputType[BuildOptionInputType["PickList"] = 4] = "PickList";
    BuildOptionInputType[BuildOptionInputType["MultiLine"] = 5] = "MultiLine";
})(exports.BuildOptionInputType || (exports.BuildOptionInputType = {}));
var BuildOptionInputType = exports.BuildOptionInputType;
(function (BuildPhaseStatus) {
    BuildPhaseStatus[BuildPhaseStatus["Unknown"] = 0] = "Unknown";
    BuildPhaseStatus[BuildPhaseStatus["Failed"] = 1] = "Failed";
    BuildPhaseStatus[BuildPhaseStatus["Succeeded"] = 2] = "Succeeded";
})(exports.BuildPhaseStatus || (exports.BuildPhaseStatus = {}));
var BuildPhaseStatus = exports.BuildPhaseStatus;
(function (BuildQueryOrder) {
    BuildQueryOrder[BuildQueryOrder["FinishTimeAscending"] = 2] = "FinishTimeAscending";
    BuildQueryOrder[BuildQueryOrder["FinishTimeDescending"] = 3] = "FinishTimeDescending";
})(exports.BuildQueryOrder || (exports.BuildQueryOrder = {}));
var BuildQueryOrder = exports.BuildQueryOrder;
(function (BuildReason) {
    BuildReason[BuildReason["None"] = 0] = "None";
    BuildReason[BuildReason["Manual"] = 1] = "Manual";
    BuildReason[BuildReason["IndividualCI"] = 2] = "IndividualCI";
    BuildReason[BuildReason["BatchedCI"] = 4] = "BatchedCI";
    BuildReason[BuildReason["Schedule"] = 8] = "Schedule";
    BuildReason[BuildReason["UserCreated"] = 32] = "UserCreated";
    BuildReason[BuildReason["ValidateShelveset"] = 64] = "ValidateShelveset";
    BuildReason[BuildReason["CheckInShelveset"] = 128] = "CheckInShelveset";
    BuildReason[BuildReason["Triggered"] = 175] = "Triggered";
    BuildReason[BuildReason["All"] = 239] = "All";
})(exports.BuildReason || (exports.BuildReason = {}));
var BuildReason = exports.BuildReason;
(function (BuildResult) {
    BuildResult[BuildResult["None"] = 0] = "None";
    BuildResult[BuildResult["Succeeded"] = 2] = "Succeeded";
    BuildResult[BuildResult["PartiallySucceeded"] = 4] = "PartiallySucceeded";
    BuildResult[BuildResult["Failed"] = 8] = "Failed";
    BuildResult[BuildResult["Canceled"] = 32] = "Canceled";
})(exports.BuildResult || (exports.BuildResult = {}));
var BuildResult = exports.BuildResult;
(function (BuildStatus) {
    BuildStatus[BuildStatus["None"] = 0] = "None";
    BuildStatus[BuildStatus["InProgress"] = 1] = "InProgress";
    BuildStatus[BuildStatus["Completed"] = 2] = "Completed";
    BuildStatus[BuildStatus["Cancelling"] = 4] = "Cancelling";
    BuildStatus[BuildStatus["Postponed"] = 8] = "Postponed";
    BuildStatus[BuildStatus["NotStarted"] = 32] = "NotStarted";
    BuildStatus[BuildStatus["All"] = 47] = "All";
})(exports.BuildStatus || (exports.BuildStatus = {}));
var BuildStatus = exports.BuildStatus;
(function (ControllerStatus) {
    ControllerStatus[ControllerStatus["Unavailable"] = 0] = "Unavailable";
    ControllerStatus[ControllerStatus["Available"] = 1] = "Available";
    ControllerStatus[ControllerStatus["Offline"] = 2] = "Offline";
})(exports.ControllerStatus || (exports.ControllerStatus = {}));
var ControllerStatus = exports.ControllerStatus;
(function (DefinitionQuality) {
    DefinitionQuality[DefinitionQuality["Definition"] = 1] = "Definition";
    DefinitionQuality[DefinitionQuality["Draft"] = 2] = "Draft";
})(exports.DefinitionQuality || (exports.DefinitionQuality = {}));
var DefinitionQuality = exports.DefinitionQuality;
(function (DefinitionQueryOrder) {
    DefinitionQueryOrder[DefinitionQueryOrder["None"] = 0] = "None";
    DefinitionQueryOrder[DefinitionQueryOrder["LastModifiedAscending"] = 1] = "LastModifiedAscending";
    DefinitionQueryOrder[DefinitionQueryOrder["LastModifiedDescending"] = 2] = "LastModifiedDescending";
})(exports.DefinitionQueryOrder || (exports.DefinitionQueryOrder = {}));
var DefinitionQueryOrder = exports.DefinitionQueryOrder;
(function (DefinitionQueueStatus) {
    DefinitionQueueStatus[DefinitionQueueStatus["Enabled"] = 0] = "Enabled";
    DefinitionQueueStatus[DefinitionQueueStatus["Paused"] = 1] = "Paused";
    DefinitionQueueStatus[DefinitionQueueStatus["Disabled"] = 2] = "Disabled";
})(exports.DefinitionQueueStatus || (exports.DefinitionQueueStatus = {}));
var DefinitionQueueStatus = exports.DefinitionQueueStatus;
(function (DefinitionTriggerType) {
    DefinitionTriggerType[DefinitionTriggerType["None"] = 1] = "None";
    DefinitionTriggerType[DefinitionTriggerType["ContinuousIntegration"] = 2] = "ContinuousIntegration";
    DefinitionTriggerType[DefinitionTriggerType["BatchedContinuousIntegration"] = 4] = "BatchedContinuousIntegration";
    DefinitionTriggerType[DefinitionTriggerType["Schedule"] = 8] = "Schedule";
    DefinitionTriggerType[DefinitionTriggerType["GatedCheckIn"] = 16] = "GatedCheckIn";
    DefinitionTriggerType[DefinitionTriggerType["BatchedGatedCheckIn"] = 32] = "BatchedGatedCheckIn";
    DefinitionTriggerType[DefinitionTriggerType["All"] = 63] = "All";
})(exports.DefinitionTriggerType || (exports.DefinitionTriggerType = {}));
var DefinitionTriggerType = exports.DefinitionTriggerType;
(function (DefinitionType) {
    DefinitionType[DefinitionType["Xaml"] = 1] = "Xaml";
    DefinitionType[DefinitionType["Build"] = 2] = "Build";
})(exports.DefinitionType || (exports.DefinitionType = {}));
var DefinitionType = exports.DefinitionType;
(function (DeleteOptions) {
    DeleteOptions[DeleteOptions["None"] = 0] = "None";
    DeleteOptions[DeleteOptions["DropLocation"] = 1] = "DropLocation";
    DeleteOptions[DeleteOptions["TestResults"] = 2] = "TestResults";
    DeleteOptions[DeleteOptions["Label"] = 4] = "Label";
    DeleteOptions[DeleteOptions["Details"] = 8] = "Details";
    DeleteOptions[DeleteOptions["Symbols"] = 16] = "Symbols";
    DeleteOptions[DeleteOptions["All"] = 31] = "All";
})(exports.DeleteOptions || (exports.DeleteOptions = {}));
var DeleteOptions = exports.DeleteOptions;
(function (GetOption) {
    GetOption[GetOption["LatestOnQueue"] = 0] = "LatestOnQueue";
    GetOption[GetOption["LatestOnBuild"] = 1] = "LatestOnBuild";
    GetOption[GetOption["Custom"] = 2] = "Custom";
})(exports.GetOption || (exports.GetOption = {}));
var GetOption = exports.GetOption;
(function (IssueType) {
    IssueType[IssueType["Error"] = 1] = "Error";
    IssueType[IssueType["Warning"] = 2] = "Warning";
})(exports.IssueType || (exports.IssueType = {}));
var IssueType = exports.IssueType;
(function (ProcessTemplateType) {
    ProcessTemplateType[ProcessTemplateType["Custom"] = 0] = "Custom";
    ProcessTemplateType[ProcessTemplateType["Default"] = 1] = "Default";
    ProcessTemplateType[ProcessTemplateType["Upgrade"] = 2] = "Upgrade";
})(exports.ProcessTemplateType || (exports.ProcessTemplateType = {}));
var ProcessTemplateType = exports.ProcessTemplateType;
(function (QueryDeletedOption) {
    QueryDeletedOption[QueryDeletedOption["ExcludeDeleted"] = 0] = "ExcludeDeleted";
    QueryDeletedOption[QueryDeletedOption["IncludeDeleted"] = 1] = "IncludeDeleted";
    QueryDeletedOption[QueryDeletedOption["OnlyDeleted"] = 2] = "OnlyDeleted";
})(exports.QueryDeletedOption || (exports.QueryDeletedOption = {}));
var QueryDeletedOption = exports.QueryDeletedOption;
(function (QueueOptions) {
    QueueOptions[QueueOptions["None"] = 0] = "None";
    QueueOptions[QueueOptions["DoNotRun"] = 1] = "DoNotRun";
})(exports.QueueOptions || (exports.QueueOptions = {}));
var QueueOptions = exports.QueueOptions;
(function (QueuePriority) {
    QueuePriority[QueuePriority["Low"] = 5] = "Low";
    QueuePriority[QueuePriority["BelowNormal"] = 4] = "BelowNormal";
    QueuePriority[QueuePriority["Normal"] = 3] = "Normal";
    QueuePriority[QueuePriority["AboveNormal"] = 2] = "AboveNormal";
    QueuePriority[QueuePriority["High"] = 1] = "High";
})(exports.QueuePriority || (exports.QueuePriority = {}));
var QueuePriority = exports.QueuePriority;
(function (ScheduleDays) {
    ScheduleDays[ScheduleDays["None"] = 0] = "None";
    ScheduleDays[ScheduleDays["Monday"] = 1] = "Monday";
    ScheduleDays[ScheduleDays["Tuesday"] = 2] = "Tuesday";
    ScheduleDays[ScheduleDays["Wednesday"] = 4] = "Wednesday";
    ScheduleDays[ScheduleDays["Thursday"] = 8] = "Thursday";
    ScheduleDays[ScheduleDays["Friday"] = 16] = "Friday";
    ScheduleDays[ScheduleDays["Saturday"] = 32] = "Saturday";
    ScheduleDays[ScheduleDays["Sunday"] = 64] = "Sunday";
    ScheduleDays[ScheduleDays["All"] = 127] = "All";
})(exports.ScheduleDays || (exports.ScheduleDays = {}));
var ScheduleDays = exports.ScheduleDays;
(function (ServiceHostStatus) {
    ServiceHostStatus[ServiceHostStatus["Online"] = 1] = "Online";
    ServiceHostStatus[ServiceHostStatus["Offline"] = 2] = "Offline";
})(exports.ServiceHostStatus || (exports.ServiceHostStatus = {}));
var ServiceHostStatus = exports.ServiceHostStatus;
(function (TaskResult) {
    TaskResult[TaskResult["Succeeded"] = 0] = "Succeeded";
    TaskResult[TaskResult["SucceededWithIssues"] = 1] = "SucceededWithIssues";
    TaskResult[TaskResult["Failed"] = 2] = "Failed";
    TaskResult[TaskResult["Canceled"] = 3] = "Canceled";
    TaskResult[TaskResult["Skipped"] = 4] = "Skipped";
    TaskResult[TaskResult["Abandoned"] = 5] = "Abandoned";
})(exports.TaskResult || (exports.TaskResult = {}));
var TaskResult = exports.TaskResult;
(function (TimelineRecordState) {
    TimelineRecordState[TimelineRecordState["Pending"] = 0] = "Pending";
    TimelineRecordState[TimelineRecordState["InProgress"] = 1] = "InProgress";
    TimelineRecordState[TimelineRecordState["Completed"] = 2] = "Completed";
})(exports.TimelineRecordState || (exports.TimelineRecordState = {}));
var TimelineRecordState = exports.TimelineRecordState;
(function (ValidationResult) {
    ValidationResult[ValidationResult["OK"] = 0] = "OK";
    ValidationResult[ValidationResult["Warning"] = 1] = "Warning";
    ValidationResult[ValidationResult["Error"] = 2] = "Error";
})(exports.ValidationResult || (exports.ValidationResult = {}));
var ValidationResult = exports.ValidationResult;
(function (WorkspaceMappingType) {
    WorkspaceMappingType[WorkspaceMappingType["Map"] = 0] = "Map";
    WorkspaceMappingType[WorkspaceMappingType["Cloak"] = 1] = "Cloak";
})(exports.WorkspaceMappingType || (exports.WorkspaceMappingType = {}));
var WorkspaceMappingType = exports.WorkspaceMappingType;
exports.TypeInfo = {
    AgentPoolQueue: {
        fields: null
    },
    AgentStatus: {
        enumValues: {
            "unavailable": 0,
            "available": 1,
            "offline": 2
        }
    },
    ArtifactResource: {
        fields: null
    },
    AuditAction: {
        enumValues: {
            "add": 1,
            "update": 2,
            "delete": 3
        }
    },
    Build: {
        fields: null
    },
    BuildAgent: {
        fields: null
    },
    BuildArtifact: {
        fields: null
    },
    BuildArtifactAddedEvent: {
        fields: null
    },
    BuildAuthorizationScope: {
        enumValues: {
            "projectCollection": 1,
            "project": 2
        }
    },
    BuildBadge: {
        fields: null
    },
    BuildCompletedEvent: {
        fields: null
    },
    BuildController: {
        fields: null
    },
    BuildDefinition: {
        fields: null
    },
    BuildDefinitionChangedEvent: {
        fields: null
    },
    BuildDefinitionChangingEvent: {
        fields: null
    },
    BuildDefinitionReference: {
        fields: null
    },
    BuildDefinitionRevision: {
        fields: null
    },
    BuildDefinitionSourceProvider: {
        fields: null
    },
    BuildDefinitionStep: {
        fields: null
    },
    BuildDefinitionTemplate: {
        fields: null
    },
    BuildDefinitionVariable: {
        fields: null
    },
    BuildDeletedEvent: {
        fields: null
    },
    BuildDeployment: {
        fields: null
    },
    BuildLog: {
        fields: null
    },
    BuildLogReference: {
        fields: null
    },
    BuildOption: {
        fields: null
    },
    BuildOptionDefinition: {
        fields: null
    },
    BuildOptionDefinitionReference: {
        fields: null
    },
    BuildOptionGroupDefinition: {
        fields: null
    },
    BuildOptionInputDefinition: {
        fields: null
    },
    BuildOptionInputType: {
        enumValues: {
            "string": 0,
            "boolean": 1,
            "stringList": 2,
            "radio": 3,
            "pickList": 4,
            "multiLine": 5
        }
    },
    BuildPhaseStatus: {
        enumValues: {
            "unknown": 0,
            "failed": 1,
            "succeeded": 2
        }
    },
    BuildPollingSummaryEvent: {
        fields: null
    },
    BuildProcessTemplate: {
        fields: null
    },
    BuildQueryOrder: {
        enumValues: {
            "finishTimeAscending": 2,
            "finishTimeDescending": 3
        }
    },
    BuildReason: {
        enumValues: {
            "none": 0,
            "manual": 1,
            "individualCI": 2,
            "batchedCI": 4,
            "schedule": 8,
            "userCreated": 32,
            "validateShelveset": 64,
            "checkInShelveset": 128,
            "triggered": 175,
            "all": 239
        }
    },
    BuildRepository: {
        fields: null
    },
    BuildRequestValidationResult: {
        fields: null
    },
    BuildResourceUsage: {
        fields: null
    },
    BuildResult: {
        enumValues: {
            "none": 0,
            "succeeded": 2,
            "partiallySucceeded": 4,
            "failed": 8,
            "canceled": 32
        }
    },
    BuildServer: {
        fields: null
    },
    BuildSettings: {
        fields: null
    },
    BuildStartedEvent: {
        fields: null
    },
    BuildStatus: {
        enumValues: {
            "none": 0,
            "inProgress": 1,
            "completed": 2,
            "cancelling": 4,
            "postponed": 8,
            "notStarted": 32,
            "all": 47
        }
    },
    BuildSummary: {
        fields: null
    },
    BuildTrigger: {
        fields: null
    },
    BuildUpdatedEvent: {
        fields: null
    },
    BuildWorkspace: {
        fields: null
    },
    Change: {
        fields: null
    },
    ConsoleLogEvent: {
        fields: null
    },
    ContinuousDeploymentDefinition: {
        fields: null
    },
    ContinuousIntegrationTrigger: {
        fields: null
    },
    ControllerStatus: {
        enumValues: {
            "unavailable": 0,
            "available": 1,
            "offline": 2
        }
    },
    DefinitionQuality: {
        enumValues: {
            "definition": 1,
            "draft": 2
        }
    },
    DefinitionQueryOrder: {
        enumValues: {
            "none": 0,
            "lastModifiedAscending": 1,
            "lastModifiedDescending": 2
        }
    },
    DefinitionQueueStatus: {
        enumValues: {
            "enabled": 0,
            "paused": 1,
            "disabled": 2
        }
    },
    DefinitionReference: {
        fields: null
    },
    DefinitionTriggerType: {
        enumValues: {
            "none": 1,
            "continuousIntegration": 2,
            "batchedContinuousIntegration": 4,
            "schedule": 8,
            "gatedCheckIn": 16,
            "batchedGatedCheckIn": 32,
            "all": 63
        }
    },
    DefinitionType: {
        enumValues: {
            "xaml": 1,
            "build": 2
        }
    },
    DeleteOptions: {
        enumValues: {
            "none": 0,
            "dropLocation": 1,
            "testResults": 2,
            "label": 4,
            "details": 8,
            "symbols": 16,
            "all": 31
        }
    },
    Deployment: {
        fields: null
    },
    DeploymentBuild: {
        fields: null
    },
    DeploymentDeploy: {
        fields: null
    },
    DeploymentTest: {
        fields: null
    },
    GetOption: {
        enumValues: {
            "latestOnQueue": 0,
            "latestOnBuild": 1,
            "custom": 2
        }
    },
    InformationNode: {
        fields: null
    },
    Issue: {
        fields: null
    },
    IssueType: {
        enumValues: {
            "error": 1,
            "warning": 2
        }
    },
    MappingDetails: {
        fields: null
    },
    ProcessTemplateType: {
        enumValues: {
            "custom": 0,
            "default": 1,
            "upgrade": 2
        }
    },
    PropertyValue: {
        fields: null
    },
    QueryDeletedOption: {
        enumValues: {
            "excludeDeleted": 0,
            "includeDeleted": 1,
            "onlyDeleted": 2
        }
    },
    QueueOptions: {
        enumValues: {
            "none": 0,
            "doNotRun": 1
        }
    },
    QueuePriority: {
        enumValues: {
            "low": 5,
            "belowNormal": 4,
            "normal": 3,
            "aboveNormal": 2,
            "high": 1
        }
    },
    RealtimeBuildEvent: {
        fields: null
    },
    RequestReference: {
        fields: null
    },
    RetentionPolicy: {
        fields: null
    },
    Schedule: {
        fields: null
    },
    ScheduleDays: {
        enumValues: {
            "none": 0,
            "monday": 1,
            "tuesday": 2,
            "wednesday": 4,
            "thursday": 8,
            "friday": 16,
            "saturday": 32,
            "sunday": 64,
            "all": 127
        }
    },
    ScheduleTrigger: {
        fields: null
    },
    ServiceHostStatus: {
        enumValues: {
            "online": 1,
            "offline": 2
        }
    },
    ShallowReference: {
        fields: null
    },
    SvnMappingDetails: {
        fields: null
    },
    SvnWorkspace: {
        fields: null
    },
    TaskAgentPoolReference: {
        fields: null
    },
    TaskDefinitionReference: {
        fields: null
    },
    TaskOrchestrationPlanReference: {
        fields: null
    },
    TaskResult: {
        enumValues: {
            "succeeded": 0,
            "succeededWithIssues": 1,
            "failed": 2,
            "canceled": 3,
            "skipped": 4,
            "abandoned": 5
        }
    },
    Timeline: {
        fields: null
    },
    TimelineRecord: {
        fields: null
    },
    TimelineRecordState: {
        enumValues: {
            "pending": 0,
            "inProgress": 1,
            "completed": 2
        }
    },
    TimelineRecordsUpdatedEvent: {
        fields: null
    },
    TimelineReference: {
        fields: null
    },
    ValidationResult: {
        enumValues: {
            "oK": 0,
            "warning": 1,
            "error": 2
        }
    },
    WorkspaceMapping: {
        fields: null
    },
    WorkspaceMappingType: {
        enumValues: {
            "map": 0,
            "cloak": 1
        }
    },
    WorkspaceTemplate: {
        fields: null
    },
    XamlBuildDefinition: {
        fields: null
    }
};
exports.TypeInfo.AgentPoolQueue.fields = {
    pool: {
        typeInfo: exports.TypeInfo.TaskAgentPoolReference
    }
};
exports.TypeInfo.ArtifactResource.fields = {};
exports.TypeInfo.Build.fields = {
    controller: {
        typeInfo: exports.TypeInfo.BuildController
    },
    definition: {
        typeInfo: exports.TypeInfo.DefinitionReference
    },
    finishTime: {
        isDate: true
    },
    lastChangedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastChangedDate: {
        isDate: true
    },
    logs: {
        typeInfo: exports.TypeInfo.BuildLogReference
    },
    orchestrationPlan: {
        typeInfo: exports.TypeInfo.TaskOrchestrationPlanReference
    },
    priority: {
        enumType: exports.TypeInfo.QueuePriority
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    queue: {
        typeInfo: exports.TypeInfo.AgentPoolQueue
    },
    queueOptions: {
        enumType: exports.TypeInfo.QueueOptions
    },
    queueTime: {
        isDate: true
    },
    reason: {
        enumType: exports.TypeInfo.BuildReason
    },
    repository: {
        typeInfo: exports.TypeInfo.BuildRepository
    },
    requestedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    requestedFor: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    result: {
        enumType: exports.TypeInfo.BuildResult
    },
    startTime: {
        isDate: true
    },
    status: {
        enumType: exports.TypeInfo.BuildStatus
    },
    validationResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildRequestValidationResult
    }
};
exports.TypeInfo.BuildAgent.fields = {
    controller: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    createdDate: {
        isDate: true
    },
    server: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.AgentStatus
    },
    updatedDate: {
        isDate: true
    }
};
exports.TypeInfo.BuildArtifact.fields = {
    resource: {
        typeInfo: exports.TypeInfo.ArtifactResource
    }
};
exports.TypeInfo.BuildArtifactAddedEvent.fields = {
    artifact: {
        typeInfo: exports.TypeInfo.BuildArtifact
    },
    build: {
        typeInfo: exports.TypeInfo.Build
    }
};
exports.TypeInfo.BuildBadge.fields = {};
exports.TypeInfo.BuildCompletedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    }
};
exports.TypeInfo.BuildController.fields = {
    createdDate: {
        isDate: true
    },
    status: {
        enumType: exports.TypeInfo.ControllerStatus
    },
    updatedDate: {
        isDate: true
    }
};
exports.TypeInfo.BuildDefinition.fields = {
    authoredBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    build: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildDefinitionStep
    },
    createdDate: {
        isDate: true
    },
    draftOf: {
        typeInfo: exports.TypeInfo.DefinitionReference
    },
    jobAuthorizationScope: {
        enumType: exports.TypeInfo.BuildAuthorizationScope
    },
    options: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildOption
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    quality: {
        enumType: exports.TypeInfo.DefinitionQuality
    },
    queue: {
        typeInfo: exports.TypeInfo.AgentPoolQueue
    },
    queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
    },
    repository: {
        typeInfo: exports.TypeInfo.BuildRepository
    },
    retentionRules: {
        isArray: true,
        typeInfo: exports.TypeInfo.RetentionPolicy
    },
    triggers: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildTrigger
    },
    type: {
        enumType: exports.TypeInfo.DefinitionType
    },
    variables: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildDefinitionVariable
    }
};
exports.TypeInfo.BuildDefinitionChangedEvent.fields = {
    changeType: {
        enumType: exports.TypeInfo.AuditAction
    },
    definition: {
        typeInfo: exports.TypeInfo.BuildDefinition
    }
};
exports.TypeInfo.BuildDefinitionChangingEvent.fields = {
    changeType: {
        enumType: exports.TypeInfo.AuditAction
    },
    newDefinition: {
        typeInfo: exports.TypeInfo.BuildDefinition
    },
    originalDefinition: {
        typeInfo: exports.TypeInfo.BuildDefinition
    }
};
exports.TypeInfo.BuildDefinitionReference.fields = {
    authoredBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    createdDate: {
        isDate: true
    },
    draftOf: {
        typeInfo: exports.TypeInfo.DefinitionReference
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    quality: {
        enumType: exports.TypeInfo.DefinitionQuality
    },
    queue: {
        typeInfo: exports.TypeInfo.AgentPoolQueue
    },
    queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
    },
    type: {
        enumType: exports.TypeInfo.DefinitionType
    }
};
exports.TypeInfo.BuildDefinitionRevision.fields = {
    changedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    changedDate: {
        isDate: true
    },
    changeType: {
        enumType: exports.TypeInfo.AuditAction
    }
};
exports.TypeInfo.BuildDefinitionSourceProvider.fields = {
    lastModified: {
        isDate: true
    },
    supportedTriggerTypes: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    }
};
exports.TypeInfo.BuildDefinitionStep.fields = {
    task: {
        typeInfo: exports.TypeInfo.TaskDefinitionReference
    }
};
exports.TypeInfo.BuildDefinitionTemplate.fields = {
    template: {
        typeInfo: exports.TypeInfo.BuildDefinition
    }
};
exports.TypeInfo.BuildDefinitionVariable.fields = {};
exports.TypeInfo.BuildDeletedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    }
};
exports.TypeInfo.BuildDeployment.fields = {
    deployment: {
        typeInfo: exports.TypeInfo.BuildSummary
    },
    sourceBuild: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.BuildLog.fields = {
    createdOn: {
        isDate: true
    },
    lastChangedOn: {
        isDate: true
    }
};
exports.TypeInfo.BuildLogReference.fields = {};
exports.TypeInfo.BuildOption.fields = {
    definition: {
        typeInfo: exports.TypeInfo.BuildOptionDefinitionReference
    }
};
exports.TypeInfo.BuildOptionDefinition.fields = {
    groups: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildOptionGroupDefinition
    },
    inputs: {
        isArray: true,
        typeInfo: exports.TypeInfo.BuildOptionInputDefinition
    }
};
exports.TypeInfo.BuildOptionDefinitionReference.fields = {};
exports.TypeInfo.BuildOptionGroupDefinition.fields = {};
exports.TypeInfo.BuildOptionInputDefinition.fields = {
    type: {
        enumType: exports.TypeInfo.BuildOptionInputType
    }
};
exports.TypeInfo.BuildPollingSummaryEvent.fields = {};
exports.TypeInfo.BuildProcessTemplate.fields = {
    supportedReasons: {
        enumType: exports.TypeInfo.BuildReason
    },
    templateType: {
        enumType: exports.TypeInfo.ProcessTemplateType
    }
};
exports.TypeInfo.BuildRepository.fields = {};
exports.TypeInfo.BuildRequestValidationResult.fields = {
    result: {
        enumType: exports.TypeInfo.ValidationResult
    }
};
exports.TypeInfo.BuildResourceUsage.fields = {};
exports.TypeInfo.BuildServer.fields = {
    agents: {
        isArray: true,
        typeInfo: exports.TypeInfo.ShallowReference
    },
    controller: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    status: {
        enumType: exports.TypeInfo.ServiceHostStatus
    },
    statusChangedDate: {
        isDate: true
    }
};
exports.TypeInfo.BuildSettings.fields = {
    defaultRetentionPolicy: {
        typeInfo: exports.TypeInfo.RetentionPolicy
    },
    maximumRetentionPolicy: {
        typeInfo: exports.TypeInfo.RetentionPolicy
    }
};
exports.TypeInfo.BuildStartedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    }
};
exports.TypeInfo.BuildSummary.fields = {
    build: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    finishTime: {
        isDate: true
    },
    reason: {
        enumType: exports.TypeInfo.BuildReason
    },
    requestedFor: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    startTime: {
        isDate: true
    },
    status: {
        enumType: exports.TypeInfo.BuildStatus
    }
};
exports.TypeInfo.BuildTrigger.fields = {
    triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    }
};
exports.TypeInfo.BuildUpdatedEvent.fields = {
    build: {
        typeInfo: exports.TypeInfo.Build
    }
};
exports.TypeInfo.BuildWorkspace.fields = {
    mappings: {
        isArray: true,
        typeInfo: exports.TypeInfo.MappingDetails
    }
};
exports.TypeInfo.Change.fields = {
    author: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    timestamp: {
        isDate: true
    }
};
exports.TypeInfo.ConsoleLogEvent.fields = {};
exports.TypeInfo.ContinuousDeploymentDefinition.fields = {
    connectedService: {
        typeInfo: TfsCoreInterfaces.TypeInfo.WebApiConnectedServiceRef
    },
    definition: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    }
};
exports.TypeInfo.ContinuousIntegrationTrigger.fields = {
    triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    }
};
exports.TypeInfo.DefinitionReference.fields = {
    createdDate: {
        isDate: true
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
    },
    type: {
        enumType: exports.TypeInfo.DefinitionType
    }
};
exports.TypeInfo.Deployment.fields = {};
exports.TypeInfo.DeploymentBuild.fields = {};
exports.TypeInfo.DeploymentDeploy.fields = {};
exports.TypeInfo.DeploymentTest.fields = {};
exports.TypeInfo.InformationNode.fields = {
    lastModifiedDate: {
        isDate: true
    }
};
exports.TypeInfo.Issue.fields = {
    type: {
        enumType: exports.TypeInfo.IssueType
    }
};
exports.TypeInfo.MappingDetails.fields = {};
exports.TypeInfo.PropertyValue.fields = {
    changedDate: {
        isDate: true
    }
};
exports.TypeInfo.RealtimeBuildEvent.fields = {};
exports.TypeInfo.RequestReference.fields = {
    requestedFor: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.RetentionPolicy.fields = {};
exports.TypeInfo.Schedule.fields = {
    daysToBuild: {
        enumType: exports.TypeInfo.ScheduleDays
    }
};
exports.TypeInfo.ScheduleTrigger.fields = {
    schedules: {
        isArray: true,
        typeInfo: exports.TypeInfo.Schedule
    },
    triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    }
};
exports.TypeInfo.ShallowReference.fields = {};
exports.TypeInfo.SvnMappingDetails.fields = {};
exports.TypeInfo.SvnWorkspace.fields = {
    mappings: {
        isArray: true,
        typeInfo: exports.TypeInfo.SvnMappingDetails
    }
};
exports.TypeInfo.TaskAgentPoolReference.fields = {};
exports.TypeInfo.TaskDefinitionReference.fields = {};
exports.TypeInfo.TaskOrchestrationPlanReference.fields = {};
exports.TypeInfo.Timeline.fields = {
    lastChangedOn: {
        isDate: true
    },
    records: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineRecord
    }
};
exports.TypeInfo.TimelineRecord.fields = {
    details: {
        typeInfo: exports.TypeInfo.TimelineReference
    },
    finishTime: {
        isDate: true
    },
    issues: {
        isArray: true,
        typeInfo: exports.TypeInfo.Issue
    },
    lastModified: {
        isDate: true
    },
    log: {
        typeInfo: exports.TypeInfo.BuildLogReference
    },
    result: {
        enumType: exports.TypeInfo.TaskResult
    },
    startTime: {
        isDate: true
    },
    state: {
        enumType: exports.TypeInfo.TimelineRecordState
    }
};
exports.TypeInfo.TimelineRecordsUpdatedEvent.fields = {
    timelineRecords: {
        isArray: true,
        typeInfo: exports.TypeInfo.TimelineRecord
    }
};
exports.TypeInfo.TimelineReference.fields = {};
exports.TypeInfo.WorkspaceMapping.fields = {
    mappingType: {
        enumType: exports.TypeInfo.WorkspaceMappingType
    }
};
exports.TypeInfo.WorkspaceTemplate.fields = {
    lastModifiedDate: {
        isDate: true
    },
    mappings: {
        isArray: true,
        typeInfo: exports.TypeInfo.WorkspaceMapping
    }
};
exports.TypeInfo.XamlBuildDefinition.fields = {
    controller: {
        typeInfo: exports.TypeInfo.BuildController
    },
    createdDate: {
        isDate: true
    },
    createdOn: {
        isDate: true
    },
    lastBuild: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    project: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    queueStatus: {
        enumType: exports.TypeInfo.DefinitionQueueStatus
    },
    repository: {
        typeInfo: exports.TypeInfo.BuildRepository
    },
    supportedReasons: {
        enumType: exports.TypeInfo.BuildReason
    },
    triggerType: {
        enumType: exports.TypeInfo.DefinitionTriggerType
    },
    type: {
        enumType: exports.TypeInfo.DefinitionType
    }
};
