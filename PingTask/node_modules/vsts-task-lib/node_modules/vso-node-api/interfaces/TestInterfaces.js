/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var TfsCoreInterfaces = require("../interfaces/CoreInterfaces");
var VSSInterfaces = require("../interfaces/common/VSSInterfaces");
(function (AttachmentType) {
    AttachmentType[AttachmentType["GeneralAttachment"] = 0] = "GeneralAttachment";
    AttachmentType[AttachmentType["AfnStrip"] = 1] = "AfnStrip";
    AttachmentType[AttachmentType["BugFilingData"] = 2] = "BugFilingData";
    AttachmentType[AttachmentType["CodeCoverage"] = 3] = "CodeCoverage";
    AttachmentType[AttachmentType["IntermediateCollectorData"] = 4] = "IntermediateCollectorData";
    AttachmentType[AttachmentType["RunConfig"] = 5] = "RunConfig";
    AttachmentType[AttachmentType["TestImpactDetails"] = 6] = "TestImpactDetails";
    AttachmentType[AttachmentType["TmiTestRunDeploymentFiles"] = 7] = "TmiTestRunDeploymentFiles";
    AttachmentType[AttachmentType["TmiTestRunReverseDeploymentFiles"] = 8] = "TmiTestRunReverseDeploymentFiles";
    AttachmentType[AttachmentType["TmiTestResultDetail"] = 9] = "TmiTestResultDetail";
    AttachmentType[AttachmentType["TmiTestRunSummary"] = 10] = "TmiTestRunSummary";
})(exports.AttachmentType || (exports.AttachmentType = {}));
var AttachmentType = exports.AttachmentType;
(function (CoverageQueryFlags) {
    CoverageQueryFlags[CoverageQueryFlags["Modules"] = 1] = "Modules";
    CoverageQueryFlags[CoverageQueryFlags["Functions"] = 2] = "Functions";
    CoverageQueryFlags[CoverageQueryFlags["BlockData"] = 4] = "BlockData";
})(exports.CoverageQueryFlags || (exports.CoverageQueryFlags = {}));
var CoverageQueryFlags = exports.CoverageQueryFlags;
(function (CustomTestFieldScope) {
    CustomTestFieldScope[CustomTestFieldScope["None"] = 0] = "None";
    CustomTestFieldScope[CustomTestFieldScope["TestRun"] = 1] = "TestRun";
    CustomTestFieldScope[CustomTestFieldScope["TestResult"] = 2] = "TestResult";
    CustomTestFieldScope[CustomTestFieldScope["System"] = 4] = "System";
    CustomTestFieldScope[CustomTestFieldScope["All"] = 7] = "All";
})(exports.CustomTestFieldScope || (exports.CustomTestFieldScope = {}));
var CustomTestFieldScope = exports.CustomTestFieldScope;
(function (CustomTestFieldType) {
    CustomTestFieldType[CustomTestFieldType["Bit"] = 2] = "Bit";
    CustomTestFieldType[CustomTestFieldType["Int"] = 8] = "Int";
    CustomTestFieldType[CustomTestFieldType["Float"] = 6] = "Float";
    CustomTestFieldType[CustomTestFieldType["Guid"] = 14] = "Guid";
    CustomTestFieldType[CustomTestFieldType["DateTime"] = 4] = "DateTime";
    CustomTestFieldType[CustomTestFieldType["String"] = 12] = "String";
})(exports.CustomTestFieldType || (exports.CustomTestFieldType = {}));
var CustomTestFieldType = exports.CustomTestFieldType;
(function (GroupTestResultsBy) {
    GroupTestResultsBy[GroupTestResultsBy["None"] = 0] = "None";
    GroupTestResultsBy[GroupTestResultsBy["AutomatedTestStorage"] = 1] = "AutomatedTestStorage";
})(exports.GroupTestResultsBy || (exports.GroupTestResultsBy = {}));
var GroupTestResultsBy = exports.GroupTestResultsBy;
(function (ResultDetails) {
    ResultDetails[ResultDetails["None"] = 0] = "None";
    ResultDetails[ResultDetails["Iterations"] = 1] = "Iterations";
    ResultDetails[ResultDetails["WorkItems"] = 2] = "WorkItems";
})(exports.ResultDetails || (exports.ResultDetails = {}));
var ResultDetails = exports.ResultDetails;
(function (ResultOutcome) {
    ResultOutcome[ResultOutcome["Pass"] = 1] = "Pass";
    ResultOutcome[ResultOutcome["Fail"] = 2] = "Fail";
    ResultOutcome[ResultOutcome["Pending"] = 3] = "Pending";
})(exports.ResultOutcome || (exports.ResultOutcome = {}));
var ResultOutcome = exports.ResultOutcome;
(function (TestOutcome) {
    TestOutcome[TestOutcome["Unspecified"] = 0] = "Unspecified";
    TestOutcome[TestOutcome["None"] = 1] = "None";
    TestOutcome[TestOutcome["Passed"] = 2] = "Passed";
    TestOutcome[TestOutcome["Failed"] = 3] = "Failed";
    TestOutcome[TestOutcome["Inconclusive"] = 4] = "Inconclusive";
    TestOutcome[TestOutcome["Timeout"] = 5] = "Timeout";
    TestOutcome[TestOutcome["Aborted"] = 6] = "Aborted";
    TestOutcome[TestOutcome["Blocked"] = 7] = "Blocked";
    TestOutcome[TestOutcome["NotExecuted"] = 8] = "NotExecuted";
    TestOutcome[TestOutcome["Warning"] = 9] = "Warning";
    TestOutcome[TestOutcome["Error"] = 10] = "Error";
    TestOutcome[TestOutcome["NotApplicable"] = 11] = "NotApplicable";
    TestOutcome[TestOutcome["Paused"] = 12] = "Paused";
    TestOutcome[TestOutcome["InProgress"] = 13] = "InProgress";
    TestOutcome[TestOutcome["MaxValue"] = 13] = "MaxValue";
})(exports.TestOutcome || (exports.TestOutcome = {}));
var TestOutcome = exports.TestOutcome;
(function (TestRunState) {
    TestRunState[TestRunState["Unspecified"] = 0] = "Unspecified";
    TestRunState[TestRunState["NotStarted"] = 1] = "NotStarted";
    TestRunState[TestRunState["InProgress"] = 2] = "InProgress";
    TestRunState[TestRunState["Completed"] = 3] = "Completed";
    TestRunState[TestRunState["Aborted"] = 4] = "Aborted";
    TestRunState[TestRunState["Waiting"] = 5] = "Waiting";
    TestRunState[TestRunState["NeedsInvestigation"] = 6] = "NeedsInvestigation";
})(exports.TestRunState || (exports.TestRunState = {}));
var TestRunState = exports.TestRunState;
(function (TestRunSubstate) {
    TestRunSubstate[TestRunSubstate["None"] = 0] = "None";
    TestRunSubstate[TestRunSubstate["CreatingEnvironment"] = 1] = "CreatingEnvironment";
    TestRunSubstate[TestRunSubstate["RunningTests"] = 2] = "RunningTests";
    TestRunSubstate[TestRunSubstate["CanceledByUser"] = 3] = "CanceledByUser";
    TestRunSubstate[TestRunSubstate["AbortedBySystem"] = 4] = "AbortedBySystem";
    TestRunSubstate[TestRunSubstate["TimedOut"] = 5] = "TimedOut";
    TestRunSubstate[TestRunSubstate["PendingAnalysis"] = 6] = "PendingAnalysis";
    TestRunSubstate[TestRunSubstate["Analyzed"] = 7] = "Analyzed";
    TestRunSubstate[TestRunSubstate["CancellationInProgress"] = 8] = "CancellationInProgress";
})(exports.TestRunSubstate || (exports.TestRunSubstate = {}));
var TestRunSubstate = exports.TestRunSubstate;
exports.TypeInfo = {
    AggregatedResultsAnalysis: {
        fields: null
    },
    AggregatedResultsByOutcome: {
        fields: null
    },
    AggregatedResultsWithDetails: {
        fields: null
    },
    AttachmentType: {
        enumValues: {
            "generalAttachment": 0,
            "afnStrip": 1,
            "bugFilingData": 2,
            "codeCoverage": 3,
            "intermediateCollectorData": 4,
            "runConfig": 5,
            "testImpactDetails": 6,
            "tmiTestRunDeploymentFiles": 7,
            "tmiTestRunReverseDeploymentFiles": 8,
            "tmiTestResultDetail": 9,
            "tmiTestRunSummary": 10
        }
    },
    BatchResponse: {
        fields: null
    },
    BuildConfiguration: {
        fields: null
    },
    BuildCoverage: {
        fields: null
    },
    BuildReference: {
        fields: null
    },
    CodeCoverageData: {
        fields: null
    },
    CodeCoverageStatistics: {
        fields: null
    },
    CodeCoverageSummary: {
        fields: null
    },
    CoverageQueryFlags: {
        enumValues: {
            "modules": 1,
            "functions": 2,
            "blockData": 4
        }
    },
    CoverageStatistics: {
        fields: null
    },
    CustomTestField: {
        fields: null
    },
    CustomTestFieldDefinition: {
        fields: null
    },
    CustomTestFieldScope: {
        enumValues: {
            "none": 0,
            "testRun": 1,
            "testResult": 2,
            "system": 4,
            "all": 7
        }
    },
    CustomTestFieldType: {
        enumValues: {
            "bit": 2,
            "int": 8,
            "float": 6,
            "guid": 14,
            "dateTime": 4,
            "string": 12
        }
    },
    DtlEnvironmentDetails: {
        fields: null
    },
    FailingSince: {
        fields: null
    },
    FunctionCoverage: {
        fields: null
    },
    GroupTestResultsBy: {
        enumValues: {
            "none": 0,
            "automatedTestStorage": 1
        }
    },
    LastResultDetails: {
        fields: null
    },
    ModuleCoverage: {
        fields: null
    },
    PlanUpdateModel: {
        fields: null
    },
    PointAssignment: {
        fields: null
    },
    PointUpdateModel: {
        fields: null
    },
    PointWorkItemProperty: {
        fields: null
    },
    QueryModel: {
        fields: null
    },
    Response: {
        fields: null
    },
    ResultDetails: {
        enumValues: {
            "none": 0,
            "iterations": 1,
            "workItems": 2
        }
    },
    ResultOutcome: {
        enumValues: {
            "pass": 1,
            "fail": 2,
            "pending": 3
        }
    },
    ResultRetentionSettings: {
        fields: null
    },
    ResultUpdateRequestModel: {
        fields: null
    },
    ResultUpdateResponseModel: {
        fields: null
    },
    RunCreateModel: {
        fields: null
    },
    RunFilter: {
        fields: null
    },
    RunStatistic: {
        fields: null
    },
    RunUpdateModel: {
        fields: null
    },
    ShallowReference: {
        fields: null
    },
    SharedStepModel: {
        fields: null
    },
    SuiteCreateModel: {
        fields: null
    },
    SuiteTestCase: {
        fields: null
    },
    SuiteUpdateModel: {
        fields: null
    },
    TestActionResultModel: {
        fields: null
    },
    TestAttachmentReference: {
        fields: null
    },
    TestAttachmentRequestModel: {
        fields: null
    },
    TestCaseResult: {
        fields: null
    },
    TestCaseResult2: {
        fields: null
    },
    TestCaseResultAttachmentModel: {
        fields: null
    },
    TestCaseResultIdentifier: {
        fields: null
    },
    TestCaseResultUpdateModel: {
        fields: null
    },
    TestEnvironment: {
        fields: null
    },
    TestFailureDetails: {
        fields: null
    },
    TestFailuresAnalysis: {
        fields: null
    },
    TestIterationDetailsModel: {
        fields: null
    },
    TestMessageLogDetails: {
        fields: null
    },
    TestOutcome: {
        enumValues: {
            "unspecified": 0,
            "none": 1,
            "passed": 2,
            "failed": 3,
            "inconclusive": 4,
            "timeout": 5,
            "aborted": 6,
            "blocked": 7,
            "notExecuted": 8,
            "warning": 9,
            "error": 10,
            "notApplicable": 11,
            "paused": 12,
            "inProgress": 13,
            "maxValue": 13
        }
    },
    TestPlan: {
        fields: null
    },
    TestPlansWithSelection: {
        fields: null
    },
    TestPoint: {
        fields: null
    },
    TestReport: {
        fields: null
    },
    TestResolutionState: {
        fields: null
    },
    TestResultCreateModel: {
        fields: null
    },
    TestResultModelBase: {
        fields: null
    },
    TestResultParameterModel: {
        fields: null
    },
    TestResultsDetailsForGroup: {
        fields: null
    },
    TestRun: {
        fields: null
    },
    TestRunCoverage: {
        fields: null
    },
    TestRunState: {
        enumValues: {
            "unspecified": 0,
            "notStarted": 1,
            "inProgress": 2,
            "completed": 3,
            "aborted": 4,
            "waiting": 5,
            "needsInvestigation": 6
        }
    },
    TestRunStatistic: {
        fields: null
    },
    TestRunSubstate: {
        enumValues: {
            "none": 0,
            "creatingEnvironment": 1,
            "runningTests": 2,
            "canceledByUser": 3,
            "abortedBySystem": 4,
            "timedOut": 5,
            "pendingAnalysis": 6,
            "analyzed": 7,
            "cancellationInProgress": 8
        }
    },
    TestSettings: {
        fields: null
    },
    TestSuite: {
        fields: null
    },
    WorkItemReference: {
        fields: null
    }
};
exports.TypeInfo.AggregatedResultsAnalysis.fields = {
    previousBuild: {
        typeInfo: exports.TypeInfo.BuildReference
    },
    resultsByOutcome: {
        isArray: true,
        typeInfo: exports.TypeInfo.AggregatedResultsByOutcome
    }
};
exports.TypeInfo.AggregatedResultsByOutcome.fields = {
    outcome: {
        enumType: exports.TypeInfo.TestOutcome
    }
};
exports.TypeInfo.AggregatedResultsWithDetails.fields = {
    resultsForGroup: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultsDetailsForGroup
    }
};
exports.TypeInfo.BatchResponse.fields = {
    responses: {
        isArray: true,
        typeInfo: exports.TypeInfo.Response
    }
};
exports.TypeInfo.BuildConfiguration.fields = {
    project: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.BuildCoverage.fields = {
    configuration: {
        typeInfo: exports.TypeInfo.BuildConfiguration
    },
    modules: {
        isArray: true,
        typeInfo: exports.TypeInfo.ModuleCoverage
    }
};
exports.TypeInfo.BuildReference.fields = {};
exports.TypeInfo.CodeCoverageData.fields = {
    coverageStats: {
        isArray: true,
        typeInfo: exports.TypeInfo.CodeCoverageStatistics
    }
};
exports.TypeInfo.CodeCoverageStatistics.fields = {};
exports.TypeInfo.CodeCoverageSummary.fields = {
    build: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    coverageData: {
        isArray: true,
        typeInfo: exports.TypeInfo.CodeCoverageData
    },
    deltaBuild: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.CoverageStatistics.fields = {};
exports.TypeInfo.CustomTestField.fields = {};
exports.TypeInfo.CustomTestFieldDefinition.fields = {
    fieldType: {
        enumType: exports.TypeInfo.CustomTestFieldType
    },
    scope: {
        enumType: exports.TypeInfo.CustomTestFieldScope
    }
};
exports.TypeInfo.DtlEnvironmentDetails.fields = {};
exports.TypeInfo.FailingSince.fields = {
    build: {
        typeInfo: exports.TypeInfo.BuildReference
    },
    date: {
        isDate: true
    }
};
exports.TypeInfo.FunctionCoverage.fields = {
    statistics: {
        typeInfo: exports.TypeInfo.CoverageStatistics
    }
};
exports.TypeInfo.LastResultDetails.fields = {
    dateCompleted: {
        isDate: true
    },
    runBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.ModuleCoverage.fields = {
    functions: {
        isArray: true,
        typeInfo: exports.TypeInfo.FunctionCoverage
    },
    statistics: {
        typeInfo: exports.TypeInfo.CoverageStatistics
    }
};
exports.TypeInfo.PlanUpdateModel.fields = {
    area: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    automatedTestEnvironment: {
        typeInfo: exports.TypeInfo.TestEnvironment
    },
    automatedTestSettings: {
        typeInfo: exports.TypeInfo.TestSettings
    },
    build: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    manualTestEnvironment: {
        typeInfo: exports.TypeInfo.TestEnvironment
    },
    manualTestSettings: {
        typeInfo: exports.TypeInfo.TestSettings
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.PointAssignment.fields = {
    configuration: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    tester: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    }
};
exports.TypeInfo.PointUpdateModel.fields = {};
exports.TypeInfo.PointWorkItemProperty.fields = {};
exports.TypeInfo.QueryModel.fields = {};
exports.TypeInfo.Response.fields = {};
exports.TypeInfo.ResultRetentionSettings.fields = {
    lastUpdatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastUpdatedDate: {
        isDate: true
    }
};
exports.TypeInfo.ResultUpdateRequestModel.fields = {
    actionResultDeletes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResultModel
    },
    actionResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResultModel
    },
    parameterDeletes: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultParameterModel
    },
    parameters: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultParameterModel
    },
    testCaseResult: {
        typeInfo: exports.TypeInfo.TestCaseResultUpdateModel
    }
};
exports.TypeInfo.ResultUpdateResponseModel.fields = {};
exports.TypeInfo.RunCreateModel.fields = {
    build: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    customTestFields: {
        isArray: true,
        typeInfo: exports.TypeInfo.CustomTestField
    },
    dtlAutEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    dtlTestEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    environmentDetails: {
        typeInfo: exports.TypeInfo.DtlEnvironmentDetails
    },
    filter: {
        typeInfo: exports.TypeInfo.RunFilter
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    plan: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    testSettings: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.RunFilter.fields = {};
exports.TypeInfo.RunStatistic.fields = {
    resolutionState: {
        typeInfo: exports.TypeInfo.TestResolutionState
    }
};
exports.TypeInfo.RunUpdateModel.fields = {
    build: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    dtlAutEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    dtlEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    dtlEnvironmentDetails: {
        typeInfo: exports.TypeInfo.DtlEnvironmentDetails
    },
    logEntries: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestMessageLogDetails
    },
    substate: {
        enumType: exports.TypeInfo.TestRunSubstate
    },
    testSettings: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.ShallowReference.fields = {};
exports.TypeInfo.SharedStepModel.fields = {};
exports.TypeInfo.SuiteCreateModel.fields = {};
exports.TypeInfo.SuiteTestCase.fields = {
    pointAssignments: {
        isArray: true,
        typeInfo: exports.TypeInfo.PointAssignment
    },
    testCase: {
        typeInfo: exports.TypeInfo.WorkItemReference
    }
};
exports.TypeInfo.SuiteUpdateModel.fields = {};
exports.TypeInfo.TestActionResultModel.fields = {
    completedDate: {
        isDate: true
    },
    sharedStepModel: {
        typeInfo: exports.TypeInfo.SharedStepModel
    },
    startedDate: {
        isDate: true
    }
};
exports.TypeInfo.TestAttachmentReference.fields = {};
exports.TypeInfo.TestAttachmentRequestModel.fields = {};
exports.TypeInfo.TestCaseResult.fields = {
    area: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    associatedBugs: {
        isArray: true,
        typeInfo: exports.TypeInfo.ShallowReference
    },
    build: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    buildReference: {
        typeInfo: exports.TypeInfo.BuildReference
    },
    completedDate: {
        isDate: true
    },
    configuration: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    createdDate: {
        isDate: true
    },
    customFields: {
        isArray: true,
        typeInfo: exports.TypeInfo.CustomTestField
    },
    failingSince: {
        typeInfo: exports.TypeInfo.FailingSince
    },
    iterationDetails: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestIterationDetailsModel
    },
    lastUpdatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastUpdatedDate: {
        isDate: true
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    project: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    runBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    startedDate: {
        isDate: true
    },
    testCase: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    testPoint: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    testRun: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.TestCaseResult2.fields = {
    endTime: {
        isDate: true
    },
    outcome: {
        enumType: exports.TypeInfo.ResultOutcome
    },
    startTime: {
        isDate: true
    }
};
exports.TypeInfo.TestCaseResultAttachmentModel.fields = {};
exports.TypeInfo.TestCaseResultIdentifier.fields = {};
exports.TypeInfo.TestCaseResultUpdateModel.fields = {
    customFields: {
        isArray: true,
        typeInfo: exports.TypeInfo.CustomTestField
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    runBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    testResult: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.TestEnvironment.fields = {};
exports.TypeInfo.TestFailureDetails.fields = {
    testResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.TestFailuresAnalysis.fields = {
    existingFailures: {
        typeInfo: exports.TypeInfo.TestFailureDetails
    },
    fixedTests: {
        typeInfo: exports.TypeInfo.TestFailureDetails
    },
    newFailures: {
        typeInfo: exports.TypeInfo.TestFailureDetails
    },
    previousBuild: {
        typeInfo: exports.TypeInfo.BuildReference
    }
};
exports.TypeInfo.TestIterationDetailsModel.fields = {
    actionResults: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestActionResultModel
    },
    attachments: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestCaseResultAttachmentModel
    },
    completedDate: {
        isDate: true
    },
    parameters: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestResultParameterModel
    },
    startedDate: {
        isDate: true
    }
};
exports.TypeInfo.TestMessageLogDetails.fields = {
    dateCreated: {
        isDate: true
    }
};
exports.TypeInfo.TestPlan.fields = {
    area: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    automatedTestEnvironment: {
        typeInfo: exports.TypeInfo.TestEnvironment
    },
    automatedTestSettings: {
        typeInfo: exports.TypeInfo.TestSettings
    },
    build: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    endDate: {
        isDate: true
    },
    manualTestEnvironment: {
        typeInfo: exports.TypeInfo.TestEnvironment
    },
    manualTestSettings: {
        typeInfo: exports.TypeInfo.TestSettings
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    previousBuild: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    project: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    rootSuite: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    startDate: {
        isDate: true
    },
    updatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    updatedDate: {
        isDate: true
    }
};
exports.TypeInfo.TestPlansWithSelection.fields = {
    plans: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestPlan
    }
};
exports.TypeInfo.TestPoint.fields = {
    assignedTo: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    configuration: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    lastResult: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    lastResultDetails: {
        typeInfo: exports.TypeInfo.LastResultDetails
    },
    lastTestRun: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    lastUpdatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastUpdatedDate: {
        isDate: true
    },
    suite: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    testCase: {
        typeInfo: exports.TypeInfo.WorkItemReference
    },
    testPlan: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.TestReport.fields = {
    aggregatedResultsAnalysis: {
        typeInfo: exports.TypeInfo.AggregatedResultsAnalysis
    },
    build: {
        typeInfo: exports.TypeInfo.BuildReference
    },
    teamProject: {
        typeInfo: TfsCoreInterfaces.TypeInfo.TeamProjectReference
    },
    testFailures: {
        typeInfo: exports.TypeInfo.TestFailuresAnalysis
    }
};
exports.TypeInfo.TestResolutionState.fields = {
    project: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.TestResultCreateModel.fields = {
    area: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    configuration: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    customFields: {
        isArray: true,
        typeInfo: exports.TypeInfo.CustomTestField
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    runBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    testCase: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    testPoint: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.TestResultModelBase.fields = {
    completedDate: {
        isDate: true
    },
    startedDate: {
        isDate: true
    }
};
exports.TypeInfo.TestResultParameterModel.fields = {};
exports.TypeInfo.TestResultsDetailsForGroup.fields = {
    results: {
        isArray: true,
        typeInfo: exports.TypeInfo.TestCaseResult
    },
    resultsCountByOutcome: {
        isArray: true,
        typeInfo: exports.TypeInfo.AggregatedResultsByOutcome
    }
};
exports.TypeInfo.TestRun.fields = {
    build: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    buildConfiguration: {
        typeInfo: exports.TypeInfo.BuildConfiguration
    },
    completedDate: {
        isDate: true
    },
    createdDate: {
        isDate: true
    },
    customFields: {
        isArray: true,
        typeInfo: exports.TypeInfo.CustomTestField
    },
    dtlAutEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    dtlEnvironment: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    dtlEnvironmentCreationDetails: {
        typeInfo: exports.TypeInfo.DtlEnvironmentDetails
    },
    dueDate: {
        isDate: true
    },
    filter: {
        typeInfo: exports.TypeInfo.RunFilter
    },
    lastUpdatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastUpdatedDate: {
        isDate: true
    },
    owner: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    plan: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    project: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    runStatistics: {
        isArray: true,
        typeInfo: exports.TypeInfo.RunStatistic
    },
    startedDate: {
        isDate: true
    },
    substate: {
        enumType: exports.TypeInfo.TestRunSubstate
    },
    testEnvironment: {
        typeInfo: exports.TypeInfo.TestEnvironment
    },
    testSettings: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.TestRunCoverage.fields = {
    modules: {
        isArray: true,
        typeInfo: exports.TypeInfo.ModuleCoverage
    },
    testRun: {
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.TestRunStatistic.fields = {
    run: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    runStatistics: {
        isArray: true,
        typeInfo: exports.TypeInfo.RunStatistic
    }
};
exports.TypeInfo.TestSettings.fields = {};
exports.TypeInfo.TestSuite.fields = {
    defaultConfigurations: {
        isArray: true,
        typeInfo: exports.TypeInfo.ShallowReference
    },
    lastPopulatedDate: {
        isDate: true
    },
    lastUpdatedBy: {
        typeInfo: VSSInterfaces.TypeInfo.IdentityRef
    },
    lastUpdatedDate: {
        isDate: true
    },
    parent: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    plan: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    project: {
        typeInfo: exports.TypeInfo.ShallowReference
    },
    suites: {
        isArray: true,
        typeInfo: exports.TypeInfo.ShallowReference
    }
};
exports.TypeInfo.WorkItemReference.fields = {};
