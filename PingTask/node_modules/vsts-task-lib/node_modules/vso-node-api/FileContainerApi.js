/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var FileContainerInterfaces = require("./interfaces/FileContainerInterfaces");
var VSSInterfaces = require("./interfaces/common/VSSInterfaces");
var FileContainerApi = (function (_super) {
    __extends(FileContainerApi, _super);
    function FileContainerApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-FileContainer-api');
    }
    FileContainerApi.prototype.createItem = function (customHeaders, contentStream, containerId, itemPath, scope, onResult) {
        var _this = this;
        var routeValues = {
            containerId: containerId
        };
        var queryValues = {
            itemPath: itemPath,
            scope: scope
        };
        customHeaders = customHeaders || {};
        customHeaders["Content-Type"] = "application/octet-stream";
        this.vsoClient.getVersioningData("2.2-preview.3", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: FileContainerInterfaces.TypeInfo.FileContainerItem, responseIsCollection: false };
            _this.restClient.uploadStream('PUT', url, apiVersion, contentStream, customHeaders, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    FileContainerApi.prototype.createItems = function (items, containerId, scope, onResult) {
        var _this = this;
        var routeValues = {
            containerId: containerId
        };
        var queryValues = {
            scope: scope
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: VSSInterfaces.TypeInfo.VssJsonCollectionWrapperV, responseTypeMetadata: FileContainerInterfaces.TypeInfo.FileContainerItem, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, items, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    FileContainerApi.prototype.deleteItem = function (containerId, itemPath, scope, onResult) {
        var _this = this;
        var routeValues = {
            containerId: containerId
        };
        var queryValues = {
            itemPath: itemPath,
            scope: scope
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    FileContainerApi.prototype.getContainers = function (scope, artifactUris, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            scope: scope,
            artifactUris: artifactUris
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: FileContainerInterfaces.TypeInfo.FileContainer, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    FileContainerApi.prototype.getItems = function (containerId, scope, itemPath, metadata, format, downloadFileName, includeDownloadTickets, isShallow, onResult) {
        var _this = this;
        var routeValues = {
            containerId: containerId
        };
        var queryValues = {
            scope: scope,
            itemPath: itemPath,
            metadata: metadata,
            '$format': format,
            downloadFileName: downloadFileName,
            includeDownloadTickets: includeDownloadTickets,
            isShallow: isShallow
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "Container", "e4f5c81e-e250-447b-9fef-bd48471bea5e", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: FileContainerInterfaces.TypeInfo.FileContainerItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    FileContainerApi.prototype.browseItems = function (container, itemPath, onResult) {
        var _this = this;
        var routeValues = {
            container: container
        };
        var queryValues = {
            itemPath: itemPath
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "Container", "e71a64ac-b2b5-4230-a4c0-dad657cf97e2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: FileContainerInterfaces.TypeInfo.FileContainerItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return FileContainerApi;
})(basem.ClientApiBase);
exports.FileContainerApi = FileContainerApi;
var QFileContainerApi = (function (_super) {
    __extends(QFileContainerApi, _super);
    function QFileContainerApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, FileContainerApi);
    }
    QFileContainerApi.prototype.createItem = function (customHeaders, contentStream, containerId, itemPath, scope) {
        var deferred = Q.defer();
        this.api.createItem(customHeaders, contentStream, containerId, itemPath, scope, function (err, statusCode, Container) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Container);
            }
        });
        return deferred.promise;
    };
    QFileContainerApi.prototype.createItems = function (items, containerId, scope) {
        var deferred = Q.defer();
        this.api.createItems(items, containerId, scope, function (err, statusCode, Container) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Container);
            }
        });
        return deferred.promise;
    };
    QFileContainerApi.prototype.deleteItem = function (containerId, itemPath, scope) {
        var deferred = Q.defer();
        this.api.deleteItem(containerId, itemPath, scope, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QFileContainerApi.prototype.getContainers = function (scope, artifactUris) {
        var deferred = Q.defer();
        this.api.getContainers(scope, artifactUris, function (err, statusCode, Containers) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Containers);
            }
        });
        return deferred.promise;
    };
    QFileContainerApi.prototype.getItems = function (containerId, scope, itemPath, metadata, format, downloadFileName, includeDownloadTickets, isShallow) {
        var deferred = Q.defer();
        this.api.getItems(containerId, scope, itemPath, metadata, format, downloadFileName, includeDownloadTickets, isShallow, function (err, statusCode, Containers) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Containers);
            }
        });
        return deferred.promise;
    };
    QFileContainerApi.prototype.browseItems = function (container, itemPath) {
        var deferred = Q.defer();
        this.api.browseItems(container, itemPath, function (err, statusCode, Containers) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Containers);
            }
        });
        return deferred.promise;
    };
    return QFileContainerApi;
})(basem.QClientApiBase);
exports.QFileContainerApi = QFileContainerApi;
