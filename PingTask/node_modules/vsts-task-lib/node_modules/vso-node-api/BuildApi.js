/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var BuildInterfaces = require("./interfaces/BuildInterfaces");
var VSSInterfaces = require("./interfaces/common/VSSInterfaces");
var BuildApi = (function (_super) {
    __extends(BuildApi, _super);
    function BuildApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Build-api');
    }
    BuildApi.prototype.createArtifact = function (artifact, buildId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "build", "1db06c96-014e-44e1-ac91-90b2d4b3e984", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: BuildInterfaces.TypeInfo.BuildArtifact, responseTypeMetadata: BuildInterfaces.TypeInfo.BuildArtifact, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, artifact, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getArtifact = function (buildId, artifactName, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        var queryValues = {
            artifactName: artifactName
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "build", "1db06c96-014e-44e1-ac91-90b2d4b3e984", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildArtifact, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getArtifactContentZip = function (buildId, artifactName, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        var queryValues = {
            artifactName: artifactName
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "build", "1db06c96-014e-44e1-ac91-90b2d4b3e984", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getArtifacts = function (buildId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "build", "1db06c96-014e-44e1-ac91-90b2d4b3e984", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildArtifact, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBadge = function (project, definitionId, branchName, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        var queryValues = {
            branchName: branchName
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "de6a4df8-22cd-44ee-af2d-39f6aa7a4261", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildBadge = function (project, repoType, repoId, branchName, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repoType: repoType
        };
        var queryValues = {
            repoId: repoId,
            branchName: branchName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "build", "21b3b9ce-fad5-4567-9ad0-80679794e003", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildBadge, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildBadgeData = function (project, repoType, repoId, branchName, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repoType: repoType
        };
        var queryValues = {
            repoId: repoId,
            branchName: branchName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "build", "21b3b9ce-fad5-4567-9ad0-80679794e003", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.deleteBuild = function (buildId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    BuildApi.prototype.getBuild = function (buildId, project, propertyFilters, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        var queryValues = {
            propertyFilters: propertyFilters
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.Build, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuilds = function (project, definitions, queues, buildNumber, minFinishTime, maxFinishTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, type, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            definitions: definitions && definitions.join(","),
            queues: queues && queues.join(","),
            buildNumber: buildNumber,
            minFinishTime: minFinishTime,
            maxFinishTime: maxFinishTime,
            requestedFor: requestedFor,
            reasonFilter: reasonFilter,
            statusFilter: statusFilter,
            resultFilter: resultFilter,
            tagFilters: tagFilters && tagFilters.join(","),
            properties: properties && properties.join(","),
            type: type,
            '$top': top,
            continuationToken: continuationToken,
            maxBuildsPerDefinition: maxBuildsPerDefinition,
            deletedFilter: deletedFilter,
            queryOrder: queryOrder
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.Build, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.queueBuild = function (build, project, ignoreWarnings, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            ignoreWarnings: ignoreWarnings
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: BuildInterfaces.TypeInfo.Build, responseTypeMetadata: BuildInterfaces.TypeInfo.Build, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, build, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.updateBuild = function (build, buildId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "0cd358e1-9217-4d94-8269-1c1ee6f93dcf", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: BuildInterfaces.TypeInfo.Build, responseTypeMetadata: BuildInterfaces.TypeInfo.Build, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, build, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildCommits = function (project, buildId, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        var queryValues = {
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "54572c7b-bbd3-45d4-80dc-28be08941620", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.Change, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getChangesBetweenBuilds = function (project, fromBuildId, toBuildId, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            fromBuildId: fromBuildId,
            toBuildId: toBuildId,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "f10f0ea5-18a1-43ec-a8fb-2042c7be9b43", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.Change, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildController = function (controllerId, onResult) {
        var _this = this;
        var routeValues = {
            controllerId: controllerId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "fcac1932-2ee1-437f-9b6f-7f696be858f6", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildController, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildControllers = function (name, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            name: name
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "fcac1932-2ee1-437f-9b6f-7f696be858f6", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildController, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.createDefinition = function (definition, project, definitionToCloneId, definitionToCloneRevision, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            definitionToCloneId: definitionToCloneId,
            definitionToCloneRevision: definitionToCloneRevision
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: BuildInterfaces.TypeInfo.BuildDefinition, responseTypeMetadata: BuildInterfaces.TypeInfo.BuildDefinition, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, definition, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.deleteDefinition = function (definitionId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    BuildApi.prototype.getDefinition = function (definitionId, project, revision, propertyFilters, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        var queryValues = {
            revision: revision,
            propertyFilters: propertyFilters && propertyFilters.join(",")
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.DefinitionReference, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getDefinitions = function (project, name, type, repositoryId, repositoryType, queryOrder, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            name: name,
            type: type,
            repositoryId: repositoryId,
            repositoryType: repositoryType,
            queryOrder: queryOrder,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.DefinitionReference, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.updateDefinition = function (definition, definitionId, project, secretsSourceDefinitionId, secretsSourceDefinitionRevision, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        var queryValues = {
            secretsSourceDefinitionId: secretsSourceDefinitionId,
            secretsSourceDefinitionRevision: secretsSourceDefinitionRevision
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "dbeaf647-6167-421a-bda9-c9327b25e2e6", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: BuildInterfaces.TypeInfo.BuildDefinition, responseTypeMetadata: BuildInterfaces.TypeInfo.BuildDefinition, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, definition, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildDeployments = function (project, buildId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "f275be9a-556a-4ee9-b72f-f9c8370ccaee", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.Deployment, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildLog = function (project, buildId, logId, startLine, endLine, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId,
            logId: logId
        };
        var queryValues = {
            startLine: startLine,
            endLine: endLine
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "35a80daf-7f30-45fc-86e8-6b813d9c90df", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildLogs = function (project, buildId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "35a80daf-7f30-45fc-86e8-6b813d9c90df", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildLog, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildLogsZip = function (project, buildId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "35a80daf-7f30-45fc-86e8-6b813d9c90df", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildOptionDefinitions = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "591cb5a4-2d46-4f3a-a697-5cd42b6bd332", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildOptionDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.createQueue = function (queue, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "09f2a4b8-08c9-4991-85c3-d698937568be", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: BuildInterfaces.TypeInfo.AgentPoolQueue, responseTypeMetadata: BuildInterfaces.TypeInfo.AgentPoolQueue, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, queue, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.deleteQueue = function (id, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            id: id
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "09f2a4b8-08c9-4991-85c3-d698937568be", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    BuildApi.prototype.getAgentPoolQueue = function (controllerId, onResult) {
        var _this = this;
        var routeValues = {
            controllerId: controllerId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "09f2a4b8-08c9-4991-85c3-d698937568be", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.AgentPoolQueue, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getQueues = function (name, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            name: name
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "09f2a4b8-08c9-4991-85c3-d698937568be", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.AgentPoolQueue, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getResourceUsage = function (onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "3813d06c-9e36-4ea1-aac3-61a485d60e3d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildResourceUsage, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getDefinitionRevisions = function (project, definitionId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            definitionId: definitionId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "7c116775-52e5-453e-8c5d-914d9762d8c4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildDefinitionRevision, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildSettings = function (onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "build", "aa8c1c9c-ef8b-474a-b8c4-785c7b191d0d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildSettings, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.updateBuildSettings = function (settings, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "build", "aa8c1c9c-ef8b-474a-b8c4-785c7b191d0d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: BuildInterfaces.TypeInfo.BuildSettings, responseTypeMetadata: BuildInterfaces.TypeInfo.BuildSettings, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, settings, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.addBuildTag = function (project, buildId, tag, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId,
            tag: tag
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "6e6114b2-8161-44c8-8f6c-c5505782427f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.replace(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.addBuildTags = function (tags, project, buildId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "6e6114b2-8161-44c8-8f6c-c5505782427f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.create(url, apiVersion, tags, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.deleteBuildTag = function (project, buildId, tag, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId,
            tag: tag
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "6e6114b2-8161-44c8-8f6c-c5505782427f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildTags = function (project, buildId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "6e6114b2-8161-44c8-8f6c-c5505782427f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getTags = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "d84ac5c6-edc7-43d5-adc9-1b34be5dea09", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.deleteTemplate = function (project, templateId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            templateId: templateId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "build", "e884571e-7f92-4d6a-9274-3f5649900835", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    BuildApi.prototype.getTemplate = function (project, templateId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            templateId: templateId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "build", "e884571e-7f92-4d6a-9274-3f5649900835", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildDefinitionTemplate, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getTemplates = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "build", "e884571e-7f92-4d6a-9274-3f5649900835", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.BuildDefinitionTemplate, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.saveTemplate = function (template, project, templateId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            templateId: templateId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "build", "e884571e-7f92-4d6a-9274-3f5649900835", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: BuildInterfaces.TypeInfo.BuildDefinitionTemplate, responseTypeMetadata: BuildInterfaces.TypeInfo.BuildDefinitionTemplate, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, template, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildTimeline = function (project, buildId, timelineId, changeId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId,
            timelineId: timelineId
        };
        var queryValues = {
            changeId: changeId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "8baac422-4c6e-4de5-8532-db96d92acffa", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: BuildInterfaces.TypeInfo.Timeline, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildWorkItemsRefs = function (project, buildId, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        var queryValues = {
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "5a21f5d2-5642-47e4-a0bd-1356e6731bee", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: VSSInterfaces.TypeInfo.ResourceRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getBuildWorkItemsRefsFromCommits = function (commitIds, project, buildId, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        var queryValues = {
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "5a21f5d2-5642-47e4-a0bd-1356e6731bee", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: VSSInterfaces.TypeInfo.ResourceRef, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, commitIds, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    BuildApi.prototype.getWorkItemsBetweenBuilds = function (project, fromBuildId, toBuildId, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            fromBuildId: fromBuildId,
            toBuildId: toBuildId,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "build", "52ba8915-5518-42e3-a4bb-b0182d159e2d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: VSSInterfaces.TypeInfo.ResourceRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return BuildApi;
})(basem.ClientApiBase);
exports.BuildApi = BuildApi;
var QBuildApi = (function (_super) {
    __extends(QBuildApi, _super);
    function QBuildApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, BuildApi);
    }
    QBuildApi.prototype.createArtifact = function (artifact, buildId, project) {
        var deferred = Q.defer();
        this.api.createArtifact(artifact, buildId, project, function (err, statusCode, artifact) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(artifact);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getArtifact = function (buildId, artifactName, project) {
        var deferred = Q.defer();
        this.api.getArtifact(buildId, artifactName, project, function (err, statusCode, artifact) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(artifact);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getArtifactContentZip = function (buildId, artifactName, project) {
        var deferred = Q.defer();
        this.api.getArtifactContentZip(buildId, artifactName, project, function (err, statusCode, artifact) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(artifact);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getArtifacts = function (buildId, project) {
        var deferred = Q.defer();
        this.api.getArtifacts(buildId, project, function (err, statusCode, artifacts) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(artifacts);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBadge = function (project, definitionId, branchName) {
        var deferred = Q.defer();
        this.api.getBadge(project, definitionId, branchName, function (err, statusCode, badge) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(badge);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildBadge = function (project, repoType, repoId, branchName) {
        var deferred = Q.defer();
        this.api.getBuildBadge(project, repoType, repoId, branchName, function (err, statusCode, buildbadge) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(buildbadge);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildBadgeData = function (project, repoType, repoId, branchName) {
        var deferred = Q.defer();
        this.api.getBuildBadgeData(project, repoType, repoId, branchName, function (err, statusCode, buildbadge) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(buildbadge);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.deleteBuild = function (buildId, project) {
        var deferred = Q.defer();
        this.api.deleteBuild(buildId, project, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuild = function (buildId, project, propertyFilters) {
        var deferred = Q.defer();
        this.api.getBuild(buildId, project, propertyFilters, function (err, statusCode, build) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(build);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuilds = function (project, definitions, queues, buildNumber, minFinishTime, maxFinishTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, type, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder) {
        var deferred = Q.defer();
        this.api.getBuilds(project, definitions, queues, buildNumber, minFinishTime, maxFinishTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, type, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, function (err, statusCode, builds) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(builds);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.queueBuild = function (build, project, ignoreWarnings) {
        var deferred = Q.defer();
        this.api.queueBuild(build, project, ignoreWarnings, function (err, statusCode, build) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(build);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.updateBuild = function (build, buildId, project) {
        var deferred = Q.defer();
        this.api.updateBuild(build, buildId, project, function (err, statusCode, build) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(build);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildCommits = function (project, buildId, top) {
        var deferred = Q.defer();
        this.api.getBuildCommits(project, buildId, top, function (err, statusCode, changes) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(changes);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getChangesBetweenBuilds = function (project, fromBuildId, toBuildId, top) {
        var deferred = Q.defer();
        this.api.getChangesBetweenBuilds(project, fromBuildId, toBuildId, top, function (err, statusCode, changes) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(changes);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildController = function (controllerId) {
        var deferred = Q.defer();
        this.api.getBuildController(controllerId, function (err, statusCode, Controller) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Controller);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildControllers = function (name) {
        var deferred = Q.defer();
        this.api.getBuildControllers(name, function (err, statusCode, Controllers) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Controllers);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.createDefinition = function (definition, project, definitionToCloneId, definitionToCloneRevision) {
        var deferred = Q.defer();
        this.api.createDefinition(definition, project, definitionToCloneId, definitionToCloneRevision, function (err, statusCode, definition) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definition);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.deleteDefinition = function (definitionId, project) {
        var deferred = Q.defer();
        this.api.deleteDefinition(definitionId, project, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getDefinition = function (definitionId, project, revision, propertyFilters) {
        var deferred = Q.defer();
        this.api.getDefinition(definitionId, project, revision, propertyFilters, function (err, statusCode, definition) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definition);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getDefinitions = function (project, name, type, repositoryId, repositoryType, queryOrder, top) {
        var deferred = Q.defer();
        this.api.getDefinitions(project, name, type, repositoryId, repositoryType, queryOrder, top, function (err, statusCode, definitions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definitions);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.updateDefinition = function (definition, definitionId, project, secretsSourceDefinitionId, secretsSourceDefinitionRevision) {
        var deferred = Q.defer();
        this.api.updateDefinition(definition, definitionId, project, secretsSourceDefinitionId, secretsSourceDefinitionRevision, function (err, statusCode, definition) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(definition);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildDeployments = function (project, buildId) {
        var deferred = Q.defer();
        this.api.getBuildDeployments(project, buildId, function (err, statusCode, deployments) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(deployments);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildLog = function (project, buildId, logId, startLine, endLine) {
        var deferred = Q.defer();
        this.api.getBuildLog(project, buildId, logId, startLine, endLine, function (err, statusCode, log) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(log);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildLogs = function (project, buildId) {
        var deferred = Q.defer();
        this.api.getBuildLogs(project, buildId, function (err, statusCode, logs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(logs);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildLogsZip = function (project, buildId) {
        var deferred = Q.defer();
        this.api.getBuildLogsZip(project, buildId, function (err, statusCode, log) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(log);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildOptionDefinitions = function (project) {
        var deferred = Q.defer();
        this.api.getBuildOptionDefinitions(project, function (err, statusCode, options) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(options);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.createQueue = function (queue) {
        var deferred = Q.defer();
        this.api.createQueue(queue, function (err, statusCode, queue) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(queue);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.deleteQueue = function (id) {
        var deferred = Q.defer();
        this.api.deleteQueue(id, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getAgentPoolQueue = function (controllerId) {
        var deferred = Q.defer();
        this.api.getAgentPoolQueue(controllerId, function (err, statusCode, queue) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(queue);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getQueues = function (name) {
        var deferred = Q.defer();
        this.api.getQueues(name, function (err, statusCode, queues) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(queues);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getResourceUsage = function () {
        var deferred = Q.defer();
        this.api.getResourceUsage(function (err, statusCode, ResourceUsage) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResourceUsage);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getDefinitionRevisions = function (project, definitionId) {
        var deferred = Q.defer();
        this.api.getDefinitionRevisions(project, definitionId, function (err, statusCode, revisions) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(revisions);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildSettings = function () {
        var deferred = Q.defer();
        this.api.getBuildSettings(function (err, statusCode, setting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(setting);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.updateBuildSettings = function (settings) {
        var deferred = Q.defer();
        this.api.updateBuildSettings(settings, function (err, statusCode, setting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(setting);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.addBuildTag = function (project, buildId, tag) {
        var deferred = Q.defer();
        this.api.addBuildTag(project, buildId, tag, function (err, statusCode, tags) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(tags);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.addBuildTags = function (tags, project, buildId) {
        var deferred = Q.defer();
        this.api.addBuildTags(tags, project, buildId, function (err, statusCode, tags) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(tags);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.deleteBuildTag = function (project, buildId, tag) {
        var deferred = Q.defer();
        this.api.deleteBuildTag(project, buildId, tag, function (err, statusCode, tags) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(tags);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildTags = function (project, buildId) {
        var deferred = Q.defer();
        this.api.getBuildTags(project, buildId, function (err, statusCode, tags) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(tags);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getTags = function (project) {
        var deferred = Q.defer();
        this.api.getTags(project, function (err, statusCode, tags) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(tags);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.deleteTemplate = function (project, templateId) {
        var deferred = Q.defer();
        this.api.deleteTemplate(project, templateId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getTemplate = function (project, templateId) {
        var deferred = Q.defer();
        this.api.getTemplate(project, templateId, function (err, statusCode, template) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(template);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getTemplates = function (project) {
        var deferred = Q.defer();
        this.api.getTemplates(project, function (err, statusCode, templates) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(templates);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.saveTemplate = function (template, project, templateId) {
        var deferred = Q.defer();
        this.api.saveTemplate(template, project, templateId, function (err, statusCode, template) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(template);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildTimeline = function (project, buildId, timelineId, changeId) {
        var deferred = Q.defer();
        this.api.getBuildTimeline(project, buildId, timelineId, changeId, function (err, statusCode, Timeline) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Timeline);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildWorkItemsRefs = function (project, buildId, top) {
        var deferred = Q.defer();
        this.api.getBuildWorkItemsRefs(project, buildId, top, function (err, statusCode, workitems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workitems);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getBuildWorkItemsRefsFromCommits = function (commitIds, project, buildId, top) {
        var deferred = Q.defer();
        this.api.getBuildWorkItemsRefsFromCommits(commitIds, project, buildId, top, function (err, statusCode, workitems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workitems);
            }
        });
        return deferred.promise;
    };
    QBuildApi.prototype.getWorkItemsBetweenBuilds = function (project, fromBuildId, toBuildId, top) {
        var deferred = Q.defer();
        this.api.getWorkItemsBetweenBuilds(project, fromBuildId, toBuildId, top, function (err, statusCode, workitems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(workitems);
            }
        });
        return deferred.promise;
    };
    return QBuildApi;
})(basem.QClientApiBase);
exports.QBuildApi = QBuildApi;
