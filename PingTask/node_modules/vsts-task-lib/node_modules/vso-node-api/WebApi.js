// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
var buildm = require('./BuildApi');
var corem = require('./CoreApi');
var filecontainerm = require('./FileContainerApi');
var gallerym = require('./GalleryApi');
var gitm = require('./GitApi');
var taskagentm = require('./TaskAgentApi');
var taskm = require('./TaskApi');
var testm = require('./TestApi');
var tfvcm = require('./TfvcApi');
var workitemtrackingm = require('./WorkItemTrackingApi');
var releasemanagementm = require('./ReleaseManagementApi');
var apivm = require('./handlers/apiversion');
var basicm = require('./handlers/basiccreds');
var bearm = require('./handlers/bearertoken');
function getVersionHandler(apiVersion) {
    return new apivm.ApiVersionHandler(apiVersion);
}
exports.getVersionHandler = getVersionHandler;
function getBasicHandler(username, password) {
    return new basicm.BasicCredentialHandler(username, password);
}
exports.getBasicHandler = getBasicHandler;
function getBearerHandler(token) {
    return new bearm.BearerCredentialHandler(token);
}
exports.getBearerHandler = getBearerHandler;
var WebApi = (function () {
    function WebApi(serverUrl, authHandler) {
        this.serverUrl = serverUrl;
        this.authHandler = authHandler;
    }
    WebApi.prototype.getBuildApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new buildm.BuildApi(serverUrl, handlers);
    };
    WebApi.prototype.getQBuildApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new buildm.QBuildApi(serverUrl, handlers);
    };
    WebApi.prototype.getCoreApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new corem.CoreApi(serverUrl, handlers);
    };
    WebApi.prototype.getQCoreApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new corem.QCoreApi(serverUrl, handlers);
    };
    WebApi.prototype.getFileContainerApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new filecontainerm.FileContainerApi(serverUrl, handlers);
    };
    WebApi.prototype.getQFileContainerApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new filecontainerm.QFileContainerApi(serverUrl, handlers);
    };
    WebApi.prototype.getGalleryApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new gallerym.GalleryApi(serverUrl, handlers);
    };
    WebApi.prototype.getQGalleryApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new gallerym.QGalleryApi(serverUrl, handlers);
    };
    WebApi.prototype.getGitApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new gitm.GitApi(serverUrl, handlers);
    };
    WebApi.prototype.getQGitApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new gitm.QGitApi(serverUrl, handlers);
    };
    WebApi.prototype.getTaskApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new taskm.TaskApi(serverUrl, handlers);
    };
    WebApi.prototype.getQTaskApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new taskm.QTaskApi(serverUrl, handlers);
    };
    WebApi.prototype.getTaskAgentApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new taskagentm.TaskAgentApi(serverUrl, handlers);
    };
    WebApi.prototype.getQTaskAgentApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new taskagentm.QTaskAgentApi(serverUrl, handlers);
    };
    WebApi.prototype.getTestApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new testm.TestApi(serverUrl, handlers);
    };
    WebApi.prototype.getQTestApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new testm.QTestApi(serverUrl, handlers);
    };
    WebApi.prototype.getTfvcApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new tfvcm.TfvcApi(serverUrl, handlers);
    };
    WebApi.prototype.getQTfvcApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new tfvcm.QTfvcApi(serverUrl, handlers);
    };
    WebApi.prototype.getWorkItemTrackingApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new workitemtrackingm.WorkItemTrackingApi(serverUrl, handlers);
    };
    WebApi.prototype.getQWorkItemTrackingApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new workitemtrackingm.QWorkItemTrackingApi(serverUrl, handlers);
    };
    WebApi.prototype.getReleaseManagemntApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new releasemanagementm.ReleaseManagementApi(serverUrl, handlers);
    };
    WebApi.prototype.getQReleaseManagemntApi = function (serverUrl, handlers) {
        if (serverUrl === void 0) { serverUrl = this.serverUrl; }
        if (handlers === void 0) { handlers = [this.authHandler]; }
        return new releasemanagementm.QReleaseManagementApi(serverUrl, handlers);
    };
    return WebApi;
})();
exports.WebApi = WebApi;
