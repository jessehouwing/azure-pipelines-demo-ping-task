/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var TestInterfaces = require("./interfaces/TestInterfaces");
var TestApi = (function (_super) {
    __extends(TestApi, _super);
    function TestApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Test-api');
    }
    TestApi.prototype.createTestResultAttachment = function (attachmentRequestModel, project, runId, testCaseResultId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestAttachmentRequestModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestAttachmentReference, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, attachmentRequestModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestResultAttachmentContent = function (project, runId, testCaseResultId, attachmentId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            attachmentId: attachmentId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestResultAttachmentZip = function (project, runId, testCaseResultId, attachmentId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            attachmentId: attachmentId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "2bffebe9-2f0f-4639-9af8-56129e9fed2d", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.createTestRunAttachment = function (attachmentRequestModel, project, runId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestAttachmentRequestModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestAttachmentReference, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, attachmentRequestModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestRunAttachmentContent = function (project, runId, attachmentId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            attachmentId: attachmentId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestRunAttachmentZip = function (project, runId, attachmentId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            attachmentId: attachmentId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "4f004af4-a507-489c-9b13-cb62060beb11", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getBuildCodeCoverage = function (project, buildId, flags, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildId: buildId,
            flags: flags
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "77560e8a-4e8c-4d59-894e-a5f264c24444", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.BuildCoverage, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getCodeCoverageSummary = function (project, buildId, deltaBuildId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildId: buildId,
            deltaBuildId: deltaBuildId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "77560e8a-4e8c-4d59-894e-a5f264c24444", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.CodeCoverageSummary, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.updateCodeCoverageSummary = function (coverageData, project, buildId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildId: buildId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "77560e8a-4e8c-4d59-894e-a5f264c24444", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.CodeCoverageData, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, coverageData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TestApi.prototype.getTestRunCodeCoverage = function (project, runId, flags, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        var queryValues = {
            flags: flags
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "9629116f-3b89-4ed8-b358-d4694efda160", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestRunCoverage, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.addCustomFields = function (newFields, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "8ce1923b-f4c7-4e22-b93b-f6284e525ec2", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.CustomTestFieldDefinition, responseTypeMetadata: TestInterfaces.TypeInfo.CustomTestFieldDefinition, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, newFields, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.queryCustomFields = function (project, scopeFilter, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            scopeFilter: scopeFilter
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "8ce1923b-f4c7-4e22-b93b-f6284e525ec2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.CustomTestFieldDefinition, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestRunLogs = function (project, runId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "a1e55200-637e-42e9-a7c0-7e5bfdedb1b3", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestMessageLogDetails, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.createTestPlan = function (testPlan, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "51712106-7278-4208-8563-1c96f40cf5e4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.PlanUpdateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestPlan, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, testPlan, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getPlanById = function (project, planId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "51712106-7278-4208-8563-1c96f40cf5e4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPlan, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getPlans = function (project, owner, skip, top, includePlanDetails, filterActivePlans, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            owner: owner,
            '$skip': skip,
            '$top': top,
            includePlanDetails: includePlanDetails,
            filterActivePlans: filterActivePlans
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "51712106-7278-4208-8563-1c96f40cf5e4", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPlan, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.updateTestPlan = function (planUpdateModel, project, planId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "51712106-7278-4208-8563-1c96f40cf5e4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.PlanUpdateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestPlan, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, planUpdateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getPoint = function (project, planId, suiteId, pointIds, witFields, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            pointIds: pointIds
        };
        var queryValues = {
            witFields: witFields
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "3bcfd5c8-be62-488e-b1da-b8289ce9299c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPoint, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getPoints = function (project, planId, suiteId, witFields, configurationId, testCaseId, testPointIds, includePointDetails, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        var queryValues = {
            witFields: witFields,
            configurationId: configurationId,
            testCaseId: testCaseId,
            testPointIds: testPointIds,
            includePointDetails: includePointDetails,
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "3bcfd5c8-be62-488e-b1da-b8289ce9299c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestPoint, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.updateTestPoints = function (pointUpdateModel, project, planId, suiteId, pointIds, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            pointIds: pointIds
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "3bcfd5c8-be62-488e-b1da-b8289ce9299c", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.PointUpdateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestPoint, responseIsCollection: true };
            _this.restClient.update(url, apiVersion, pointUpdateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.queryTestResultRecentBugs = function (project, testRunId, testResultId, recentDays, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            testRunId: testRunId,
            testResultId: testResultId
        };
        var queryValues = {
            recentDays: recentDays
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "926ff5dc-137f-45f0-bd51-9412fa9810ce", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.WorkItemReference, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.queryReportForBuild = function (project, buildId, sourceWorkflow, includeFailureDetails, buildToCompare, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        var queryValues = {
            sourceWorkflow: sourceWorkflow,
            includeFailureDetails: includeFailureDetails,
            buildToCompare: buildToCompare
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "000ef77b-fea2-498d-a10d-ad1a037f559f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestReport, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestResultDetailsForBuild = function (project, buildId, sourceWorkflow, groupBy, filter, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            buildId: buildId
        };
        var queryValues = {
            sourceWorkflow: sourceWorkflow,
            groupBy: groupBy,
            filter: filter
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "efb387b0-10d5-42e7-be40-95e06ee9430f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.AggregatedResultsWithDetails, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.createResultRetentionSettings = function (retentionSettings, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "a3206d9e-fa8d-42d3-88cb-f75c51e69cde", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.ResultRetentionSettings, responseTypeMetadata: TestInterfaces.TypeInfo.ResultRetentionSettings, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, retentionSettings, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.deleteResultRetentionSettings = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "a3206d9e-fa8d-42d3-88cb-f75c51e69cde", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TestApi.prototype.getResultRetentionSettings = function (project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "a3206d9e-fa8d-42d3-88cb-f75c51e69cde", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.ResultRetentionSettings, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.updateResultRetentionSettings = function (retentionSettings, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "a3206d9e-fa8d-42d3-88cb-f75c51e69cde", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.ResultRetentionSettings, responseTypeMetadata: TestInterfaces.TypeInfo.ResultRetentionSettings, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, retentionSettings, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestIteration = function (project, runId, testCaseResultId, iterationId, includeActionResults, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            iterationId: iterationId
        };
        var queryValues = {
            includeActionResults: includeActionResults
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "73eb9074-3446-4c44-8296-2f811950ff8d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestIterationDetailsModel, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestIterations = function (project, runId, testCaseResultId, includeActionResults, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        var queryValues = {
            includeActionResults: includeActionResults
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "73eb9074-3446-4c44-8296-2f811950ff8d", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestIterationDetailsModel, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.addTestResultsToTestRun = function (resultCreateModels, project, runId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestResultCreateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, resultCreateModels, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.bulkUpdateTestResults = function (resultUpdateModel, project, runId, resultIds, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        var queryValues = {
            resultIds: resultIds && resultIds.join(",")
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestCaseResultUpdateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.update(url, apiVersion, resultUpdateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestCaseResultById = function (project, runId, testCaseResultId, includeIterationDetails, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        var queryValues = {
            includeIterationDetails: includeIterationDetails
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestCaseResults = function (project, runId, includeIterationDetails, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        var queryValues = {
            includeIterationDetails: includeIterationDetails
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestResultById = function (project, runId, testCaseResultId, detailsToInclude, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId
        };
        var queryValues = {
            detailsToInclude: detailsToInclude
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestResults = function (project, runId, detailsToInclude, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        var queryValues = {
            detailsToInclude: detailsToInclude,
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.updateTestResults = function (resultUpdateModels, project, runId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "4637d869-3a76-4468-8057-0bb02aa385cf", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestCaseResultUpdateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.update(url, apiVersion, resultUpdateModels, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestResultsByIds = function (project, ids, fields, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            ids: ids && ids.join(";"),
            fields: fields && fields.join(",")
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "6711da49-8e6f-4d35-9f73-cef7a3c81a5b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getActionResults = function (project, runId, testCaseResultId, iterationId, actionPath, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            iterationId: iterationId,
            actionPath: actionPath
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "eaf40c31-ff84-4062-aafd-d5664be11a37", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestActionResultModel, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getResultParameters = function (project, runId, testCaseResultId, iterationId, paramName, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId,
            testCaseResultId: testCaseResultId,
            iterationId: iterationId
        };
        var queryValues = {
            paramName: paramName
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "7c69810d-3354-4af3-844a-180bd25db08a", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestResultParameterModel, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestResultsByQuery = function (query, project, includeResultDetails, includeIterationDetails, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            includeResultDetails: includeResultDetails,
            includeIterationDetails: includeIterationDetails,
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "d03f4bfd-0863-441a-969f-6bbbd42443ca", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.QueryModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, query, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.queryTestResultTrendReport = function (project, testRunId, testResultId, historyDays, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            testRunId: testRunId,
            testResultId: testResultId
        };
        var queryValues = {
            historyDays: historyDays,
            top: top
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "8d5c5dd8-2d81-408c-862b-d89db9e8fc3b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestCaseResult, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestRunStatistics = function (project, runId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "0a42c424-d764-4a16-a2d5-5c85f87d0ae8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestRunStatistic, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestRunsByQuery = function (query, project, includeRunDetails, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            includeRunDetails: includeRunDetails,
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "2da6cbff-1bbb-43c9-b465-ea22b6f9707c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.QueryModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestRun, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, query, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.createTestRun = function (testRun, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.RunCreateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestRun, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, testRun, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.deleteTestRun = function (project, runId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TestApi.prototype.getTestRunById = function (project, runId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestRun, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestRuns = function (project, buildUri, owner, tmiRunId, planId, includeRunDetails, automated, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            buildUri: buildUri,
            owner: owner,
            tmiRunId: tmiRunId,
            planId: planId,
            includeRunDetails: includeRunDetails,
            automated: automated,
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestRun, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.updateTestRun = function (runUpdateModel, project, runId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            runId: runId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "cadb3810-d47d-4a3c-a234-fe5f3be50138", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.RunUpdateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestRun, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, runUpdateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.addTestCasesToSuite = function (project, planId, suiteId, testCaseIds, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            testCaseIds: testCaseIds
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.SuiteTestCase, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, null, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestCaseById = function (project, planId, suiteId, testCaseIds, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            testCaseIds: testCaseIds
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.SuiteTestCase, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestCases = function (project, planId, suiteId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.SuiteTestCase, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.removeTestCasesFromSuiteUrl = function (project, planId, suiteId, testCaseIds, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId,
            testCaseIds: testCaseIds
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "a4a1ec1c-b03f-41ca-8857-704594ecf58e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TestApi.prototype.createTestSuite = function (testSuite, project, planId, suiteId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.SuiteCreateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, testSuite, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.deleteTestSuite = function (project, planId, suiteId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TestApi.prototype.getTestSuiteById = function (project, planId, suiteId, includeChildSuites, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        var queryValues = {
            includeChildSuites: includeChildSuites
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getTestSuitesForPlan = function (project, planId, includeSuites, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId
        };
        var queryValues = {
            includeSuites: includeSuites,
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.updateTestSuite = function (suiteUpdateModel, project, planId, suiteId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            planId: planId,
            suiteId: suiteId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "Test", "7b7619a0-cb54-4ab3-bf22-194056f45dd1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.SuiteUpdateModel, responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, suiteUpdateModel, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.getSuitesByTestCaseId = function (testCaseId, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            testCaseId: testCaseId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "09a6167b-e969-4775-9247-b94cf3819caf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSuite, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.queryFailureDetailsForBuild = function (build, project, sourceWorkflow, buildToCompare, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            sourceWorkflow: sourceWorkflow,
            buildToCompare: buildToCompare
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "aa4e770d-13e2-467b-ab47-2ddc2adcd643", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.BuildReference, responseTypeMetadata: TestInterfaces.TypeInfo.TestFailuresAnalysis, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.queryFailureDetailsForTestRun = function (project, testRunId, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            testRunId: testRunId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "aa4e770d-13e2-467b-ab47-2ddc2adcd643", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestFailuresAnalysis, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.createTestSettings = function (testSettings, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "8133ce14-962f-42af-a5f9-6aa9defcb9c8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: TestInterfaces.TypeInfo.TestSettings, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, testSettings, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    TestApi.prototype.deleteTestSettings = function (project, testSettingsId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            testSettingsId: testSettingsId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "8133ce14-962f-42af-a5f9-6aa9defcb9c8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    TestApi.prototype.getTestSettingsById = function (project, testSettingsId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            testSettingsId: testSettingsId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "Test", "8133ce14-962f-42af-a5f9-6aa9defcb9c8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: TestInterfaces.TypeInfo.TestSettings, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return TestApi;
})(basem.ClientApiBase);
exports.TestApi = TestApi;
var QTestApi = (function (_super) {
    __extends(QTestApi, _super);
    function QTestApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, TestApi);
    }
    QTestApi.prototype.createTestResultAttachment = function (attachmentRequestModel, project, runId, testCaseResultId) {
        var deferred = Q.defer();
        this.api.createTestResultAttachment(attachmentRequestModel, project, runId, testCaseResultId, function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestResultAttachmentContent = function (project, runId, testCaseResultId, attachmentId) {
        var deferred = Q.defer();
        this.api.getTestResultAttachmentContent(project, runId, testCaseResultId, attachmentId, function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestResultAttachmentZip = function (project, runId, testCaseResultId, attachmentId) {
        var deferred = Q.defer();
        this.api.getTestResultAttachmentZip(project, runId, testCaseResultId, attachmentId, function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.createTestRunAttachment = function (attachmentRequestModel, project, runId) {
        var deferred = Q.defer();
        this.api.createTestRunAttachment(attachmentRequestModel, project, runId, function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestRunAttachmentContent = function (project, runId, attachmentId) {
        var deferred = Q.defer();
        this.api.getTestRunAttachmentContent(project, runId, attachmentId, function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestRunAttachmentZip = function (project, runId, attachmentId) {
        var deferred = Q.defer();
        this.api.getTestRunAttachmentZip(project, runId, attachmentId, function (err, statusCode, Attachment) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Attachment);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getBuildCodeCoverage = function (project, buildId, flags) {
        var deferred = Q.defer();
        this.api.getBuildCodeCoverage(project, buildId, flags, function (err, statusCode, CodeCoverage) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CodeCoverage);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getCodeCoverageSummary = function (project, buildId, deltaBuildId) {
        var deferred = Q.defer();
        this.api.getCodeCoverageSummary(project, buildId, deltaBuildId, function (err, statusCode, CodeCoverage) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CodeCoverage);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.updateCodeCoverageSummary = function (coverageData, project, buildId) {
        var deferred = Q.defer();
        this.api.updateCodeCoverageSummary(coverageData, project, buildId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestRunCodeCoverage = function (project, runId, flags) {
        var deferred = Q.defer();
        this.api.getTestRunCodeCoverage(project, runId, flags, function (err, statusCode, CodeCoverage) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CodeCoverage);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.addCustomFields = function (newFields, project) {
        var deferred = Q.defer();
        this.api.addCustomFields(newFields, project, function (err, statusCode, ExtensionFields) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ExtensionFields);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.queryCustomFields = function (project, scopeFilter) {
        var deferred = Q.defer();
        this.api.queryCustomFields(project, scopeFilter, function (err, statusCode, ExtensionFields) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ExtensionFields);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestRunLogs = function (project, runId) {
        var deferred = Q.defer();
        this.api.getTestRunLogs(project, runId, function (err, statusCode, MessageLogs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(MessageLogs);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.createTestPlan = function (testPlan, project) {
        var deferred = Q.defer();
        this.api.createTestPlan(testPlan, project, function (err, statusCode, Plan) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Plan);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getPlanById = function (project, planId) {
        var deferred = Q.defer();
        this.api.getPlanById(project, planId, function (err, statusCode, Plan) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Plan);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getPlans = function (project, owner, skip, top, includePlanDetails, filterActivePlans) {
        var deferred = Q.defer();
        this.api.getPlans(project, owner, skip, top, includePlanDetails, filterActivePlans, function (err, statusCode, Plans) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Plans);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.updateTestPlan = function (planUpdateModel, project, planId) {
        var deferred = Q.defer();
        this.api.updateTestPlan(planUpdateModel, project, planId, function (err, statusCode, Plan) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Plan);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getPoint = function (project, planId, suiteId, pointIds, witFields) {
        var deferred = Q.defer();
        this.api.getPoint(project, planId, suiteId, pointIds, witFields, function (err, statusCode, Point) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Point);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getPoints = function (project, planId, suiteId, witFields, configurationId, testCaseId, testPointIds, includePointDetails, skip, top) {
        var deferred = Q.defer();
        this.api.getPoints(project, planId, suiteId, witFields, configurationId, testCaseId, testPointIds, includePointDetails, skip, top, function (err, statusCode, Points) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Points);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.updateTestPoints = function (pointUpdateModel, project, planId, suiteId, pointIds) {
        var deferred = Q.defer();
        this.api.updateTestPoints(pointUpdateModel, project, planId, suiteId, pointIds, function (err, statusCode, Point) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Point);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.queryTestResultRecentBugs = function (project, testRunId, testResultId, recentDays) {
        var deferred = Q.defer();
        this.api.queryTestResultRecentBugs(project, testRunId, testResultId, recentDays, function (err, statusCode, RecentBugs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(RecentBugs);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.queryReportForBuild = function (project, buildId, sourceWorkflow, includeFailureDetails, buildToCompare) {
        var deferred = Q.defer();
        this.api.queryReportForBuild(project, buildId, sourceWorkflow, includeFailureDetails, buildToCompare, function (err, statusCode, ReportForBuild) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ReportForBuild);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestResultDetailsForBuild = function (project, buildId, sourceWorkflow, groupBy, filter) {
        var deferred = Q.defer();
        this.api.getTestResultDetailsForBuild(project, buildId, sourceWorkflow, groupBy, filter, function (err, statusCode, ResultDetailsForBuild) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultDetailsForBuild);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.createResultRetentionSettings = function (retentionSettings, project) {
        var deferred = Q.defer();
        this.api.createResultRetentionSettings(retentionSettings, project, function (err, statusCode, ResultRetentionSetting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultRetentionSetting);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.deleteResultRetentionSettings = function (project) {
        var deferred = Q.defer();
        this.api.deleteResultRetentionSettings(project, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getResultRetentionSettings = function (project) {
        var deferred = Q.defer();
        this.api.getResultRetentionSettings(project, function (err, statusCode, ResultRetentionSetting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultRetentionSetting);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.updateResultRetentionSettings = function (retentionSettings, project) {
        var deferred = Q.defer();
        this.api.updateResultRetentionSettings(retentionSettings, project, function (err, statusCode, ResultRetentionSetting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultRetentionSetting);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestIteration = function (project, runId, testCaseResultId, iterationId, includeActionResults) {
        var deferred = Q.defer();
        this.api.getTestIteration(project, runId, testCaseResultId, iterationId, includeActionResults, function (err, statusCode, Result) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Result);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestIterations = function (project, runId, testCaseResultId, includeActionResults) {
        var deferred = Q.defer();
        this.api.getTestIterations(project, runId, testCaseResultId, includeActionResults, function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.addTestResultsToTestRun = function (resultCreateModels, project, runId) {
        var deferred = Q.defer();
        this.api.addTestResultsToTestRun(resultCreateModels, project, runId, function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.bulkUpdateTestResults = function (resultUpdateModel, project, runId, resultIds) {
        var deferred = Q.defer();
        this.api.bulkUpdateTestResults(resultUpdateModel, project, runId, resultIds, function (err, statusCode, Result) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Result);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestCaseResultById = function (project, runId, testCaseResultId, includeIterationDetails) {
        var deferred = Q.defer();
        this.api.getTestCaseResultById(project, runId, testCaseResultId, includeIterationDetails, function (err, statusCode, Result) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Result);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestCaseResults = function (project, runId, includeIterationDetails) {
        var deferred = Q.defer();
        this.api.getTestCaseResults(project, runId, includeIterationDetails, function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestResultById = function (project, runId, testCaseResultId, detailsToInclude) {
        var deferred = Q.defer();
        this.api.getTestResultById(project, runId, testCaseResultId, detailsToInclude, function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestResults = function (project, runId, detailsToInclude, skip, top) {
        var deferred = Q.defer();
        this.api.getTestResults(project, runId, detailsToInclude, skip, top, function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.updateTestResults = function (resultUpdateModels, project, runId) {
        var deferred = Q.defer();
        this.api.updateTestResults(resultUpdateModels, project, runId, function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestResultsByIds = function (project, ids, fields) {
        var deferred = Q.defer();
        this.api.getTestResultsByIds(project, ids, fields, function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getActionResults = function (project, runId, testCaseResultId, iterationId, actionPath) {
        var deferred = Q.defer();
        this.api.getActionResults(project, runId, testCaseResultId, iterationId, actionPath, function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getResultParameters = function (project, runId, testCaseResultId, iterationId, paramName) {
        var deferred = Q.defer();
        this.api.getResultParameters(project, runId, testCaseResultId, iterationId, paramName, function (err, statusCode, Results) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Results);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestResultsByQuery = function (query, project, includeResultDetails, includeIterationDetails, skip, top) {
        var deferred = Q.defer();
        this.api.getTestResultsByQuery(query, project, includeResultDetails, includeIterationDetails, skip, top, function (err, statusCode, Result) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Result);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.queryTestResultTrendReport = function (project, testRunId, testResultId, historyDays, top) {
        var deferred = Q.defer();
        this.api.queryTestResultTrendReport(project, testRunId, testResultId, historyDays, top, function (err, statusCode, ResultTrend) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ResultTrend);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestRunStatistics = function (project, runId) {
        var deferred = Q.defer();
        this.api.getTestRunStatistics(project, runId, function (err, statusCode, Run) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Run);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestRunsByQuery = function (query, project, includeRunDetails, skip, top) {
        var deferred = Q.defer();
        this.api.getTestRunsByQuery(query, project, includeRunDetails, skip, top, function (err, statusCode, Run) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Run);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.createTestRun = function (testRun, project) {
        var deferred = Q.defer();
        this.api.createTestRun(testRun, project, function (err, statusCode, Run) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Run);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.deleteTestRun = function (project, runId) {
        var deferred = Q.defer();
        this.api.deleteTestRun(project, runId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestRunById = function (project, runId) {
        var deferred = Q.defer();
        this.api.getTestRunById(project, runId, function (err, statusCode, Run) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Run);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestRuns = function (project, buildUri, owner, tmiRunId, planId, includeRunDetails, automated, skip, top) {
        var deferred = Q.defer();
        this.api.getTestRuns(project, buildUri, owner, tmiRunId, planId, includeRunDetails, automated, skip, top, function (err, statusCode, Runs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Runs);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.updateTestRun = function (runUpdateModel, project, runId) {
        var deferred = Q.defer();
        this.api.updateTestRun(runUpdateModel, project, runId, function (err, statusCode, Run) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Run);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.addTestCasesToSuite = function (project, planId, suiteId, testCaseIds) {
        var deferred = Q.defer();
        this.api.addTestCasesToSuite(project, planId, suiteId, testCaseIds, function (err, statusCode, Suites) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suites);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestCaseById = function (project, planId, suiteId, testCaseIds) {
        var deferred = Q.defer();
        this.api.getTestCaseById(project, planId, suiteId, testCaseIds, function (err, statusCode, Suite) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suite);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestCases = function (project, planId, suiteId) {
        var deferred = Q.defer();
        this.api.getTestCases(project, planId, suiteId, function (err, statusCode, Suites) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suites);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.removeTestCasesFromSuiteUrl = function (project, planId, suiteId, testCaseIds) {
        var deferred = Q.defer();
        this.api.removeTestCasesFromSuiteUrl(project, planId, suiteId, testCaseIds, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.createTestSuite = function (testSuite, project, planId, suiteId) {
        var deferred = Q.defer();
        this.api.createTestSuite(testSuite, project, planId, suiteId, function (err, statusCode, Suite) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suite);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.deleteTestSuite = function (project, planId, suiteId) {
        var deferred = Q.defer();
        this.api.deleteTestSuite(project, planId, suiteId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestSuiteById = function (project, planId, suiteId, includeChildSuites) {
        var deferred = Q.defer();
        this.api.getTestSuiteById(project, planId, suiteId, includeChildSuites, function (err, statusCode, Suite) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suite);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestSuitesForPlan = function (project, planId, includeSuites, skip, top) {
        var deferred = Q.defer();
        this.api.getTestSuitesForPlan(project, planId, includeSuites, skip, top, function (err, statusCode, Suites) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suites);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.updateTestSuite = function (suiteUpdateModel, project, planId, suiteId) {
        var deferred = Q.defer();
        this.api.updateTestSuite(suiteUpdateModel, project, planId, suiteId, function (err, statusCode, Suite) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suite);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getSuitesByTestCaseId = function (testCaseId) {
        var deferred = Q.defer();
        this.api.getSuitesByTestCaseId(testCaseId, function (err, statusCode, Suites) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Suites);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.queryFailureDetailsForBuild = function (build, project, sourceWorkflow, buildToCompare) {
        var deferred = Q.defer();
        this.api.queryFailureDetailsForBuild(build, project, sourceWorkflow, buildToCompare, function (err, statusCode, TestFailure) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(TestFailure);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.queryFailureDetailsForTestRun = function (project, testRunId) {
        var deferred = Q.defer();
        this.api.queryFailureDetailsForTestRun(project, testRunId, function (err, statusCode, TestFailure) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(TestFailure);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.createTestSettings = function (testSettings, project) {
        var deferred = Q.defer();
        this.api.createTestSettings(testSettings, project, function (err, statusCode, TestSetting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(TestSetting);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.deleteTestSettings = function (project, testSettingsId) {
        var deferred = Q.defer();
        this.api.deleteTestSettings(project, testSettingsId, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QTestApi.prototype.getTestSettingsById = function (project, testSettingsId) {
        var deferred = Q.defer();
        this.api.getTestSettingsById(project, testSettingsId, function (err, statusCode, TestSetting) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(TestSetting);
            }
        });
        return deferred.promise;
    };
    return QTestApi;
})(basem.QClientApiBase);
exports.QTestApi = QTestApi;
