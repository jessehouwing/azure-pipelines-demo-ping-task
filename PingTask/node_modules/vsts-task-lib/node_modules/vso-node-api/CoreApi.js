/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var CoreInterfaces = require("./interfaces/CoreInterfaces");
var OperationsInterfaces = require("./interfaces/common/OperationsInterfaces");
var VSSInterfaces = require("./interfaces/common/VSSInterfaces");
var CoreApi = (function (_super) {
    __extends(CoreApi, _super);
    function CoreApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Core-api');
    }
    CoreApi.prototype.createConnectedService = function (connectedServiceCreationData, projectId, onResult) {
        var _this = this;
        var routeValues = {
            projectId: projectId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "b4f70219-e18b-42c5-abe3-98b07d35525e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: CoreInterfaces.TypeInfo.WebApiConnectedServiceDetails, responseTypeMetadata: CoreInterfaces.TypeInfo.WebApiConnectedService, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, connectedServiceCreationData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getConnectedServiceDetails = function (projectId, name, onResult) {
        var _this = this;
        var routeValues = {
            projectId: projectId,
            name: name
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "b4f70219-e18b-42c5-abe3-98b07d35525e", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.WebApiConnectedServiceDetails, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getConnectedServices = function (projectId, kind, onResult) {
        var _this = this;
        var routeValues = {
            projectId: projectId
        };
        var queryValues = {
            kind: kind
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "b4f70219-e18b-42c5-abe3-98b07d35525e", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.WebApiConnectedService, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.createIdentityMru = function (mruData, mruName, onResult) {
        var _this = this;
        var routeValues = {
            mruName: mruName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "5ead0b70-2572-4697-97e9-f341069a783a", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: CoreInterfaces.TypeInfo.IdentityData, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, mruData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    CoreApi.prototype.deleteIdentityMru = function (mruData, mruName, onResult) {
        var _this = this;
        var routeValues = {
            mruName: mruName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "5ead0b70-2572-4697-97e9-f341069a783a", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: CoreInterfaces.TypeInfo.IdentityData, responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    CoreApi.prototype.getIdentityMru = function (mruName, onResult) {
        var _this = this;
        var routeValues = {
            mruName: mruName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "5ead0b70-2572-4697-97e9-f341069a783a", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: VSSInterfaces.TypeInfo.IdentityRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.updateIdentityMru = function (mruData, mruName, onResult) {
        var _this = this;
        var routeValues = {
            mruName: mruName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "5ead0b70-2572-4697-97e9-f341069a783a", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: CoreInterfaces.TypeInfo.IdentityData, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, mruData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    CoreApi.prototype.getTeamMembers = function (projectId, teamId, top, skip, onResult) {
        var _this = this;
        var routeValues = {
            projectId: projectId,
            teamId: teamId
        };
        var queryValues = {
            '$top': top,
            '$skip': skip
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "294c494c-2600-4d7e-b76c-3dd50c3c95be", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: VSSInterfaces.TypeInfo.IdentityRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getProcessById = function (processId, onResult) {
        var _this = this;
        var routeValues = {
            processId: processId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "93878975-88c5-4e6a-8abb-7ddd77a8a7d8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.Process, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getProcesses = function (onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "93878975-88c5-4e6a-8abb-7ddd77a8a7d8", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.Process, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getProjectCollection = function (collectionId, onResult) {
        var _this = this;
        var routeValues = {
            collectionId: collectionId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "core", "8031090f-ef1d-4af6-85fc-698cd75d42bf", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.TeamProjectCollection, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getProjectCollections = function (top, skip, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            '$top': top,
            '$skip': skip
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "core", "8031090f-ef1d-4af6-85fc-698cd75d42bf", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.TeamProjectCollectionReference, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getProjectHistory = function (minRevision, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            minRevision: minRevision
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "6488a877-4749-4954-82ea-7340d36be9f2", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.TeamProjectReference, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getProject = function (projectId, includeCapabilities, includeHistory, onResult) {
        var _this = this;
        var routeValues = {
            projectId: projectId
        };
        var queryValues = {
            includeCapabilities: includeCapabilities,
            includeHistory: includeHistory
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.TeamProject, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getProjects = function (stateFilter, top, skip, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            stateFilter: stateFilter,
            '$top': top,
            '$skip': skip
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.TeamProjectReference, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.queueCreateProject = function (projectToCreate, onResult) {
        var _this = this;
        var routeValues = {};
        this.vsoClient.getVersioningData("2.2-preview.3", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: CoreInterfaces.TypeInfo.TeamProject, responseTypeMetadata: OperationsInterfaces.TypeInfo.OperationReference, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, projectToCreate, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.queueDeleteProject = function (projectId, onResult) {
        var _this = this;
        var routeValues = {
            projectId: projectId
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: OperationsInterfaces.TypeInfo.OperationReference, responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.updateProject = function (projectUpdate, projectId, onResult) {
        var _this = this;
        var routeValues = {
            projectId: projectId
        };
        this.vsoClient.getVersioningData("2.2-preview.3", "core", "603fe2ac-9723-48b9-88ad-09305aa6c6e1", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: CoreInterfaces.TypeInfo.TeamProject, responseTypeMetadata: OperationsInterfaces.TypeInfo.OperationReference, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, projectUpdate, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getProxies = function (proxyUrl, onResult) {
        var _this = this;
        var routeValues = {};
        var queryValues = {
            proxyUrl: proxyUrl
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "ec1f4311-f2b4-4c15-b2b8-8990b80d2908", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.Proxy, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    CoreApi.prototype.getTeams = function (projectId, teamId, top, skip, onResult) {
        var _this = this;
        var routeValues = {
            projectId: projectId,
            teamId: teamId
        };
        var queryValues = {
            '$top': top,
            '$skip': skip
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "core", "d30a3dd1-f8ba-442a-b86a-bd0c0c383e59", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: CoreInterfaces.TypeInfo.WebApiTeam, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return CoreApi;
})(basem.ClientApiBase);
exports.CoreApi = CoreApi;
var QCoreApi = (function (_super) {
    __extends(QCoreApi, _super);
    function QCoreApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, CoreApi);
    }
    QCoreApi.prototype.createConnectedService = function (connectedServiceCreationData, projectId) {
        var deferred = Q.defer();
        this.api.createConnectedService(connectedServiceCreationData, projectId, function (err, statusCode, connectedService) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(connectedService);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getConnectedServiceDetails = function (projectId, name) {
        var deferred = Q.defer();
        this.api.getConnectedServiceDetails(projectId, name, function (err, statusCode, connectedService) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(connectedService);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getConnectedServices = function (projectId, kind) {
        var deferred = Q.defer();
        this.api.getConnectedServices(projectId, kind, function (err, statusCode, connectedServices) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(connectedServices);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.createIdentityMru = function (mruData, mruName) {
        var deferred = Q.defer();
        this.api.createIdentityMru(mruData, mruName, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.deleteIdentityMru = function (mruData, mruName) {
        var deferred = Q.defer();
        this.api.deleteIdentityMru(mruData, mruName, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getIdentityMru = function (mruName) {
        var deferred = Q.defer();
        this.api.getIdentityMru(mruName, function (err, statusCode, identityMru) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(identityMru);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.updateIdentityMru = function (mruData, mruName) {
        var deferred = Q.defer();
        this.api.updateIdentityMru(mruData, mruName, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getTeamMembers = function (projectId, teamId, top, skip) {
        var deferred = Q.defer();
        this.api.getTeamMembers(projectId, teamId, top, skip, function (err, statusCode, members) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(members);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getProcessById = function (processId) {
        var deferred = Q.defer();
        this.api.getProcessById(processId, function (err, statusCode, processe) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(processe);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getProcesses = function () {
        var deferred = Q.defer();
        this.api.getProcesses(function (err, statusCode, processes) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(processes);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getProjectCollection = function (collectionId) {
        var deferred = Q.defer();
        this.api.getProjectCollection(collectionId, function (err, statusCode, projectCollection) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(projectCollection);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getProjectCollections = function (top, skip) {
        var deferred = Q.defer();
        this.api.getProjectCollections(top, skip, function (err, statusCode, projectCollections) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(projectCollections);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getProjectHistory = function (minRevision) {
        var deferred = Q.defer();
        this.api.getProjectHistory(minRevision, function (err, statusCode, projectHistory) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(projectHistory);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getProject = function (projectId, includeCapabilities, includeHistory) {
        var deferred = Q.defer();
        this.api.getProject(projectId, includeCapabilities, includeHistory, function (err, statusCode, project) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(project);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getProjects = function (stateFilter, top, skip) {
        var deferred = Q.defer();
        this.api.getProjects(stateFilter, top, skip, function (err, statusCode, projects) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(projects);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.queueCreateProject = function (projectToCreate) {
        var deferred = Q.defer();
        this.api.queueCreateProject(projectToCreate, function (err, statusCode, project) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(project);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.queueDeleteProject = function (projectId) {
        var deferred = Q.defer();
        this.api.queueDeleteProject(projectId, function (err, statusCode, project) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(project);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.updateProject = function (projectUpdate, projectId) {
        var deferred = Q.defer();
        this.api.updateProject(projectUpdate, projectId, function (err, statusCode, project) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(project);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getProxies = function (proxyUrl) {
        var deferred = Q.defer();
        this.api.getProxies(proxyUrl, function (err, statusCode, proxies) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(proxies);
            }
        });
        return deferred.promise;
    };
    QCoreApi.prototype.getTeams = function (projectId, teamId, top, skip) {
        var deferred = Q.defer();
        this.api.getTeams(projectId, teamId, top, skip, function (err, statusCode, team) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(team);
            }
        });
        return deferred.promise;
    };
    return QCoreApi;
})(basem.QClientApiBase);
exports.QCoreApi = QCoreApi;
