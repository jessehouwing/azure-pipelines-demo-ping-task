/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../node/node.d.ts"/>
/// <reference path="../q/Q.d.ts"/>
var Q = require('q');
var basem = require('./ClientApiBases');
var GitInterfaces = require("./interfaces/GitInterfaces");
var VSSInterfaces = require("./interfaces/common/VSSInterfaces");
var GitApi = (function (_super) {
    __extends(GitApi, _super);
    function GitApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, 'node-Git-api');
    }
    GitApi.prototype.getBlob = function (repositoryId, sha1, project, download, fileName, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            sha1: sha1
        };
        var queryValues = {
            download: download,
            fileName: fileName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitBlobRef, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getBlobContent = function (repositoryId, sha1, project, download, fileName, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            sha1: sha1
        };
        var queryValues = {
            download: download,
            fileName: fileName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getBlobsZip = function (blobIds, repositoryId, project, filename, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            filename: filename
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getBlobZip = function (repositoryId, sha1, project, download, fileName, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            sha1: sha1
        };
        var queryValues = {
            download: download,
            fileName: fileName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getBranch = function (repositoryId, name, project, baseVersionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            name: name,
            baseVersionDescriptor: baseVersionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "d5b216de-d8d5-4d32-ae76-51df755b16d3", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitBranchStats, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getBranches = function (repositoryId, project, baseVersionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            baseVersionDescriptor: baseVersionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "d5b216de-d8d5-4d32-ae76-51df755b16d3", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitBranchStats, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getChanges = function (commitId, repositoryId, project, top, skip, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            commitId: commitId,
            repositoryId: repositoryId
        };
        var queryValues = {
            top: top,
            skip: skip
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "5bf884f5-3e07-42e9-afb8-1b872267bf16", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitChanges, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getCommit = function (commitId, repositoryId, project, changeCount, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            commitId: commitId,
            repositoryId: repositoryId
        };
        var queryValues = {
            changeCount: changeCount
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "c2570c3b-5b3f-41b8-98bf-5407bfde8d58", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommit, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getCommits = function (repositoryId, searchCriteria, project, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            searchCriteria: searchCriteria,
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "c2570c3b-5b3f-41b8-98bf-5407bfde8d58", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getPushCommits = function (repositoryId, pushId, project, top, skip, includeLinks, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            pushId: pushId,
            top: top,
            skip: skip,
            includeLinks: includeLinks
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "c2570c3b-5b3f-41b8-98bf-5407bfde8d58", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getCommitsBatch = function (searchCriteria, repositoryId, project, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "6400dfb2-0bcb-462b-b992-5a57f8f1416c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitQueryCommitsCriteria, responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitRef, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, searchCriteria, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getItem = function (repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            path: path,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            includeContentMetadata: includeContentMetadata,
            latestProcessedChange: latestProcessedChange,
            download: download,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitItem, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getItemContent = function (repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            path: path,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            includeContentMetadata: includeContentMetadata,
            latestProcessedChange: latestProcessedChange,
            download: download,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/octet-stream", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getItems = function (repositoryId, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            includeContentMetadata: includeContentMetadata,
            latestProcessedChange: latestProcessedChange,
            download: download,
            includeLinks: includeLinks,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getItemText = function (repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            path: path,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            includeContentMetadata: includeContentMetadata,
            latestProcessedChange: latestProcessedChange,
            download: download,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "text/plain", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getItemZip = function (repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            path: path,
            scopePath: scopePath,
            recursionLevel: recursionLevel,
            includeContentMetadata: includeContentMetadata,
            latestProcessedChange: latestProcessedChange,
            download: download,
            versionDescriptor: versionDescriptor
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getItemsBatch = function (requestData, repositoryId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "630fd2e4-fb88-4f85-ad21-13f3fd1fbca9", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitItemRequestData, responseTypeMetadata: GitInterfaces.TypeInfo.GitItem, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, requestData, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getPullRequestCommits = function (repositoryId, pullRequestId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pullRequestId: pullRequestId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "52823034-34a8-4576-922c-8d8b77e9e4c4", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.createPullRequestReviewer = function (reviewer, repositoryId, pullRequestId, reviewerId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pullRequestId: pullRequestId,
            reviewerId: reviewerId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.IdentityRefWithVote, responseTypeMetadata: GitInterfaces.TypeInfo.IdentityRefWithVote, responseIsCollection: false };
            _this.restClient.replace(url, apiVersion, reviewer, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.createPullRequestReviewers = function (reviewers, repositoryId, pullRequestId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pullRequestId: pullRequestId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: VSSInterfaces.TypeInfo.IdentityRef, responseTypeMetadata: GitInterfaces.TypeInfo.IdentityRefWithVote, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, reviewers, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.deletePullRequestReviewer = function (repositoryId, pullRequestId, reviewerId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pullRequestId: pullRequestId,
            reviewerId: reviewerId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GitApi.prototype.getPullRequestReviewer = function (repositoryId, pullRequestId, reviewerId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pullRequestId: pullRequestId,
            reviewerId: reviewerId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.IdentityRefWithVote, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getPullRequestReviewers = function (repositoryId, pullRequestId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pullRequestId: pullRequestId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.IdentityRefWithVote, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getPullRequestsByProject = function (project, searchCriteria, maxCommentLength, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            searchCriteria: searchCriteria,
            maxCommentLength: maxCommentLength,
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "a5d28130-9cd2-40fa-9f08-902e7daa9efb", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.createPullRequest = function (gitPullRequestToCreate, repositoryId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, gitPullRequestToCreate, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getPullRequest = function (repositoryId, pullRequestId, project, maxCommentLength, skip, top, includeCommits, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pullRequestId: pullRequestId
        };
        var queryValues = {
            maxCommentLength: maxCommentLength,
            '$skip': skip,
            '$top': top,
            includeCommits: includeCommits
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getPullRequests = function (repositoryId, searchCriteria, project, maxCommentLength, skip, top, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            searchCriteria: searchCriteria,
            maxCommentLength: maxCommentLength,
            '$skip': skip,
            '$top': top
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.updatePullRequest = function (gitPullRequestToUpdate, repositoryId, pullRequestId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pullRequestId: pullRequestId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, gitPullRequestToUpdate, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getPullRequestWorkItems = function (repositoryId, pullRequestId, project, commitsTop, commitsSkip, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pullRequestId: pullRequestId
        };
        var queryValues = {
            commitsTop: commitsTop,
            commitsSkip: commitsSkip
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "0a637fcc-5370-4ce8-b0e8-98091f5f9482", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.AssociatedWorkItem, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.createPush = function (push, repositoryId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "git", "ea98d07b-3c87-4971-8ede-a613694ffb55", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPush, responseTypeMetadata: GitInterfaces.TypeInfo.GitPush, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, push, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getPush = function (repositoryId, pushId, project, includeCommits, includeRefUpdates, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            pushId: pushId
        };
        var queryValues = {
            includeCommits: includeCommits,
            includeRefUpdates: includeRefUpdates
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "git", "ea98d07b-3c87-4971-8ede-a613694ffb55", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPush, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getPushes = function (repositoryId, project, skip, top, searchCriteria, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            '$skip': skip,
            '$top': top,
            searchCriteria: searchCriteria
        };
        this.vsoClient.getVersioningData("2.2-preview.2", "git", "ea98d07b-3c87-4971-8ede-a613694ffb55", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPush, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getRefs = function (repositoryId, project, filter, includeLinks, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            filter: filter,
            includeLinks: includeLinks
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "2d874a60-a811-4f62-9c9f-963a6ea0a55b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitRef, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.updateRefs = function (refUpdates, repositoryId, project, projectId, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        var queryValues = {
            projectId: projectId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "2d874a60-a811-4f62-9c9f-963a6ea0a55b", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitRefUpdate, responseTypeMetadata: GitInterfaces.TypeInfo.GitRefUpdateResult, responseIsCollection: true };
            _this.restClient.create(url, apiVersion, refUpdates, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.createRepository = function (gitRepositoryToCreate, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitRepository, responseTypeMetadata: GitInterfaces.TypeInfo.GitRepository, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, gitRepositoryToCreate, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.deleteRepository = function (repositoryId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.restClient.delete(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode);
        });
    };
    GitApi.prototype.getRepositories = function (project, includeLinks, onResult) {
        var _this = this;
        var routeValues = {
            project: project
        };
        var queryValues = {
            includeLinks: includeLinks
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitRepository, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getRepository = function (repositoryId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitRepository, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.updateRepository = function (newRepositoryInfo, repositoryId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitRepository, responseTypeMetadata: GitInterfaces.TypeInfo.GitRepository, responseIsCollection: false };
            _this.restClient.update(url, apiVersion, newRepositoryInfo, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.createCommitStatus = function (gitCommitStatusToCreate, commitId, repositoryId, project, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            commitId: commitId,
            repositoryId: repositoryId
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "428dd4fb-fda5-4722-af02-9313b80305da", routeValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitStatus, responseTypeMetadata: GitInterfaces.TypeInfo.GitStatus, responseIsCollection: false };
            _this.restClient.create(url, apiVersion, gitCommitStatusToCreate, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getStatuses = function (commitId, repositoryId, project, top, skip, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            commitId: commitId,
            repositoryId: repositoryId
        };
        var queryValues = {
            top: top,
            skip: skip
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "428dd4fb-fda5-4722-af02-9313b80305da", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitStatus, responseIsCollection: true };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getTree = function (repositoryId, sha1, project, projectId, recursive, fileName, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            sha1: sha1
        };
        var queryValues = {
            projectId: projectId,
            recursive: recursive,
            fileName: fileName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "729f6437-6f92-44ec-8bee-273a7111063c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitTreeRef, responseIsCollection: false };
            _this.restClient.getJson(url, apiVersion, null, serializationData, onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    GitApi.prototype.getTreeZip = function (repositoryId, sha1, project, projectId, recursive, fileName, onResult) {
        var _this = this;
        var routeValues = {
            project: project,
            repositoryId: repositoryId,
            sha1: sha1
        };
        var queryValues = {
            projectId: projectId,
            recursive: recursive,
            fileName: fileName
        };
        this.vsoClient.getVersioningData("2.2-preview.1", "git", "729f6437-6f92-44ec-8bee-273a7111063c", routeValues, queryValues)
            .then(function (versioningData) {
            var url = versioningData.requestUrl;
            var apiVersion = versioningData.apiVersion;
            var serializationData = { responseIsCollection: false };
            _this.httpClient.getStream(url, apiVersion, "application/zip", onResult);
        })
            .fail(function (error) {
            onResult(error, error.statusCode, null);
        });
    };
    return GitApi;
})(basem.ClientApiBase);
exports.GitApi = GitApi;
var QGitApi = (function (_super) {
    __extends(QGitApi, _super);
    function QGitApi(baseUrl, handlers) {
        _super.call(this, baseUrl, handlers, GitApi);
    }
    QGitApi.prototype.getBlob = function (repositoryId, sha1, project, download, fileName) {
        var deferred = Q.defer();
        this.api.getBlob(repositoryId, sha1, project, download, fileName, function (err, statusCode, Blob) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Blob);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getBlobContent = function (repositoryId, sha1, project, download, fileName) {
        var deferred = Q.defer();
        this.api.getBlobContent(repositoryId, sha1, project, download, fileName, function (err, statusCode, Blob) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Blob);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getBlobsZip = function (blobIds, repositoryId, project, filename) {
        var deferred = Q.defer();
        this.api.getBlobsZip(blobIds, repositoryId, project, filename, function (err, statusCode, Blob) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Blob);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getBlobZip = function (repositoryId, sha1, project, download, fileName) {
        var deferred = Q.defer();
        this.api.getBlobZip(repositoryId, sha1, project, download, fileName, function (err, statusCode, Blob) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Blob);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getBranch = function (repositoryId, name, project, baseVersionDescriptor) {
        var deferred = Q.defer();
        this.api.getBranch(repositoryId, name, project, baseVersionDescriptor, function (err, statusCode, BranchStat) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(BranchStat);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getBranches = function (repositoryId, project, baseVersionDescriptor) {
        var deferred = Q.defer();
        this.api.getBranches(repositoryId, project, baseVersionDescriptor, function (err, statusCode, BranchStats) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(BranchStats);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getChanges = function (commitId, repositoryId, project, top, skip) {
        var deferred = Q.defer();
        this.api.getChanges(commitId, repositoryId, project, top, skip, function (err, statusCode, Change) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Change);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getCommit = function (commitId, repositoryId, project, changeCount) {
        var deferred = Q.defer();
        this.api.getCommit(commitId, repositoryId, project, changeCount, function (err, statusCode, Commit) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Commit);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getCommits = function (repositoryId, searchCriteria, project, skip, top) {
        var deferred = Q.defer();
        this.api.getCommits(repositoryId, searchCriteria, project, skip, top, function (err, statusCode, Commits) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Commits);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPushCommits = function (repositoryId, pushId, project, top, skip, includeLinks) {
        var deferred = Q.defer();
        this.api.getPushCommits(repositoryId, pushId, project, top, skip, includeLinks, function (err, statusCode, Commits) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Commits);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getCommitsBatch = function (searchCriteria, repositoryId, project, skip, top) {
        var deferred = Q.defer();
        this.api.getCommitsBatch(searchCriteria, repositoryId, project, skip, top, function (err, statusCode, CommitsBatch) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(CommitsBatch);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getItem = function (repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItem(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getItemContent = function (repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItemContent(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getItems = function (repositoryId, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItems(repositoryId, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor, function (err, statusCode, Items) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Items);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getItemText = function (repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItemText(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getItemZip = function (repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor) {
        var deferred = Q.defer();
        this.api.getItemZip(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor, function (err, statusCode, Item) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Item);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getItemsBatch = function (requestData, repositoryId, project) {
        var deferred = Q.defer();
        this.api.getItemsBatch(requestData, repositoryId, project, function (err, statusCode, ItemsBatch) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(ItemsBatch);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPullRequestCommits = function (repositoryId, pullRequestId, project) {
        var deferred = Q.defer();
        this.api.getPullRequestCommits(repositoryId, pullRequestId, project, function (err, statusCode, PullRequestCommits) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequestCommits);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.createPullRequestReviewer = function (reviewer, repositoryId, pullRequestId, reviewerId, project) {
        var deferred = Q.defer();
        this.api.createPullRequestReviewer(reviewer, repositoryId, pullRequestId, reviewerId, project, function (err, statusCode, PullRequestReviewer) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequestReviewer);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.createPullRequestReviewers = function (reviewers, repositoryId, pullRequestId, project) {
        var deferred = Q.defer();
        this.api.createPullRequestReviewers(reviewers, repositoryId, pullRequestId, project, function (err, statusCode, PullRequestReviewers) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequestReviewers);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.deletePullRequestReviewer = function (repositoryId, pullRequestId, reviewerId, project) {
        var deferred = Q.defer();
        this.api.deletePullRequestReviewer(repositoryId, pullRequestId, reviewerId, project, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPullRequestReviewer = function (repositoryId, pullRequestId, reviewerId, project) {
        var deferred = Q.defer();
        this.api.getPullRequestReviewer(repositoryId, pullRequestId, reviewerId, project, function (err, statusCode, PullRequestReviewer) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequestReviewer);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPullRequestReviewers = function (repositoryId, pullRequestId, project) {
        var deferred = Q.defer();
        this.api.getPullRequestReviewers(repositoryId, pullRequestId, project, function (err, statusCode, PullRequestReviewers) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequestReviewers);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPullRequestsByProject = function (project, searchCriteria, maxCommentLength, skip, top) {
        var deferred = Q.defer();
        this.api.getPullRequestsByProject(project, searchCriteria, maxCommentLength, skip, top, function (err, statusCode, PullRequests) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequests);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.createPullRequest = function (gitPullRequestToCreate, repositoryId, project) {
        var deferred = Q.defer();
        this.api.createPullRequest(gitPullRequestToCreate, repositoryId, project, function (err, statusCode, PullRequest) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequest);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPullRequest = function (repositoryId, pullRequestId, project, maxCommentLength, skip, top, includeCommits) {
        var deferred = Q.defer();
        this.api.getPullRequest(repositoryId, pullRequestId, project, maxCommentLength, skip, top, includeCommits, function (err, statusCode, PullRequest) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequest);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPullRequests = function (repositoryId, searchCriteria, project, maxCommentLength, skip, top) {
        var deferred = Q.defer();
        this.api.getPullRequests(repositoryId, searchCriteria, project, maxCommentLength, skip, top, function (err, statusCode, PullRequests) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequests);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.updatePullRequest = function (gitPullRequestToUpdate, repositoryId, pullRequestId, project) {
        var deferred = Q.defer();
        this.api.updatePullRequest(gitPullRequestToUpdate, repositoryId, pullRequestId, project, function (err, statusCode, PullRequest) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequest);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPullRequestWorkItems = function (repositoryId, pullRequestId, project, commitsTop, commitsSkip) {
        var deferred = Q.defer();
        this.api.getPullRequestWorkItems(repositoryId, pullRequestId, project, commitsTop, commitsSkip, function (err, statusCode, PullRequestWorkItems) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(PullRequestWorkItems);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.createPush = function (push, repositoryId, project) {
        var deferred = Q.defer();
        this.api.createPush(push, repositoryId, project, function (err, statusCode, pushe) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(pushe);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPush = function (repositoryId, pushId, project, includeCommits, includeRefUpdates) {
        var deferred = Q.defer();
        this.api.getPush(repositoryId, pushId, project, includeCommits, includeRefUpdates, function (err, statusCode, pushe) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(pushe);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getPushes = function (repositoryId, project, skip, top, searchCriteria) {
        var deferred = Q.defer();
        this.api.getPushes(repositoryId, project, skip, top, searchCriteria, function (err, statusCode, pushes) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(pushes);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getRefs = function (repositoryId, project, filter, includeLinks) {
        var deferred = Q.defer();
        this.api.getRefs(repositoryId, project, filter, includeLinks, function (err, statusCode, refs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(refs);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.updateRefs = function (refUpdates, repositoryId, project, projectId) {
        var deferred = Q.defer();
        this.api.updateRefs(refUpdates, repositoryId, project, projectId, function (err, statusCode, refs) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(refs);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.createRepository = function (gitRepositoryToCreate, project) {
        var deferred = Q.defer();
        this.api.createRepository(gitRepositoryToCreate, project, function (err, statusCode, Repositorie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Repositorie);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.deleteRepository = function (repositoryId, project) {
        var deferred = Q.defer();
        this.api.deleteRepository(repositoryId, project, function (err, statusCode) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(null);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getRepositories = function (project, includeLinks) {
        var deferred = Q.defer();
        this.api.getRepositories(project, includeLinks, function (err, statusCode, Repositories) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Repositories);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getRepository = function (repositoryId, project) {
        var deferred = Q.defer();
        this.api.getRepository(repositoryId, project, function (err, statusCode, Repositorie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Repositorie);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.updateRepository = function (newRepositoryInfo, repositoryId, project) {
        var deferred = Q.defer();
        this.api.updateRepository(newRepositoryInfo, repositoryId, project, function (err, statusCode, Repositorie) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Repositorie);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.createCommitStatus = function (gitCommitStatusToCreate, commitId, repositoryId, project) {
        var deferred = Q.defer();
        this.api.createCommitStatus(gitCommitStatusToCreate, commitId, repositoryId, project, function (err, statusCode, Statuse) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Statuse);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getStatuses = function (commitId, repositoryId, project, top, skip) {
        var deferred = Q.defer();
        this.api.getStatuses(commitId, repositoryId, project, top, skip, function (err, statusCode, Statuses) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Statuses);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getTree = function (repositoryId, sha1, project, projectId, recursive, fileName) {
        var deferred = Q.defer();
        this.api.getTree(repositoryId, sha1, project, projectId, recursive, fileName, function (err, statusCode, Tree) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Tree);
            }
        });
        return deferred.promise;
    };
    QGitApi.prototype.getTreeZip = function (repositoryId, sha1, project, projectId, recursive, fileName) {
        var deferred = Q.defer();
        this.api.getTreeZip(repositoryId, sha1, project, projectId, recursive, fileName, function (err, statusCode, Tree) {
            if (err) {
                err.statusCode = statusCode;
                deferred.reject(err);
            }
            else {
                deferred.resolve(Tree);
            }
        });
        return deferred.promise;
    };
    return QGitApi;
})(basem.QClientApiBase);
exports.QGitApi = QGitApi;
