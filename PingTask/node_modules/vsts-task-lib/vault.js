"use strict";
var fs = require('fs');
var path = require('path');
var crypto = require('crypto');
var uuid = require('node-uuid');
var algorithm = "aes-256-ctr";
//
// Store sensitive data in proc.
// Main goal: Protects tasks which would dump envvars from leaking secrets innadvertantly
//            the task lib clears after storing.
// Also protects against a dump of a process getting the secrets
// The secret is generated and stored externally for the lifetime of the task.
//
var Vault = (function () {
    function Vault(keyPath) {
        this._keyFile = path.join(keyPath, '.taskkey');
        this._store = {};
        this.genKey();
    }
    Vault.prototype.initialize = function () {
    };
    Vault.prototype.storeSecret = function (name, data) {
        if (!name || name.length == 0) {
            return false;
        }
        name = name.toLowerCase();
        if (!data || data.length == 0) {
            if (this._store.hasOwnProperty(name)) {
                delete this._store[name];
            }
            return false;
        }
        var key = this.getKey();
        var cipher = crypto.createCipher(algorithm, key);
        var crypted = cipher.update(data, 'utf8', 'hex');
        crypted += cipher.final('hex');
        this._store[name] = crypted;
        return true;
    };
    Vault.prototype.retrieveSecret = function (name) {
        var secret = null;
        name = (name || '').toLowerCase();
        if (this._store.hasOwnProperty(name)) {
            var key = this.getKey();
            var data = this._store[name];
            var decipher = crypto.createDecipher(algorithm, key);
            var dec = decipher.update(data, 'hex', 'utf8');
            dec += decipher.final('utf8');
            secret = dec;
        }
        return secret;
    };
    Vault.prototype.getKey = function () {
        return fs.readFileSync(this._keyFile).toString('utf8');
    };
    Vault.prototype.genKey = function () {
        fs.writeFileSync(this._keyFile, uuid.v1(), 'utf8');
    };
    return Vault;
}());
exports.Vault = Vault;
