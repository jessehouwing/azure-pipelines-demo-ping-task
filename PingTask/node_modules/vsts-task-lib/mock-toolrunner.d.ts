import Q = require('q');
import events = require('events');
import ma = require('./mock-answer');
export declare function setAnswers(answers: ma.TaskLibAnswers): void;
export interface IExecOptions {
    cwd: string;
    env: {
        [key: string]: string;
    };
    silent: boolean;
    failOnStdErr: boolean;
    ignoreReturnCode: boolean;
    outStream: NodeJS.WritableStream;
    errStream: NodeJS.WritableStream;
}
export interface IExecResult {
    stdout: string;
    stderr: string;
    code: number;
    error: Error;
}
export declare function debug(message: any): void;
export declare class ToolRunner extends events.EventEmitter {
    constructor(toolPath: any);
    toolPath: string;
    args: string[];
    silent: boolean;
    private pipeOutputToTool;
    private _debug(message);
    private _argStringToArray(argString);
    arg(val: any): ToolRunner;
    argIf(condition: any, val: any): ToolRunner;
    line(val: string): ToolRunner;
    pipeExecOutputToTool(tool: ToolRunner): ToolRunner;
    private ignoreTempPath(cmdString);
    exec(options: IExecOptions): Q.Promise<number>;
    execSync(options: IExecOptions): IExecResult;
}
