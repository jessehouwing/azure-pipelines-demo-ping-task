"use strict";
var path = require('path');
var os = require('os');
var task = require('./task');
var tcm = require('./taskcommand');
var trm = require('./mock-toolrunner');
var ma = require('./mock-answer');
var mock = new ma.MockAnswers();
function setAnswers(answers) {
    mock.initialize(answers);
    trm.setAnswers(answers);
}
exports.setAnswers = setAnswers;
(function (TaskResult) {
    TaskResult[TaskResult["Succeeded"] = 0] = "Succeeded";
    TaskResult[TaskResult["Failed"] = 1] = "Failed";
})(exports.TaskResult || (exports.TaskResult = {}));
var TaskResult = exports.TaskResult;
//-----------------------------------------------------
// String convenience
//-----------------------------------------------------
function startsWith(str, start) {
    return str.slice(0, start.length) == start;
}
function endsWith(str, start) {
    return str.slice(-str.length) == str;
}
//-----------------------------------------------------
// General Helpers
//-----------------------------------------------------
exports._outStream = process.stdout;
exports._errStream = process.stderr;
function _writeError(str) {
    exports._errStream.write(str + os.EOL);
}
exports._writeError = _writeError;
function _writeLine(str) {
    exports._outStream.write(str + os.EOL);
}
exports._writeLine = _writeLine;
function setStdStream(stdStream) {
    exports._outStream = stdStream;
}
exports.setStdStream = setStdStream;
function setErrStream(errStream) {
    exports._errStream = errStream;
}
exports.setErrStream = setErrStream;
//-----------------------------------------------------
// Results and Exiting
//-----------------------------------------------------
module.exports.setResult = task.setResult;
//
// Catching all exceptions
//
process.on('uncaughtException', function (err) {
    module.exports.setResult(TaskResult.Failed, 'Unhandled:' + err.message);
});
//-----------------------------------------------------
// Loc Helpers
//-----------------------------------------------------
function setResourcePath(path) {
    // nothing in mock
}
exports.setResourcePath = setResourcePath;
function loc(key) {
    return 'loc_mock_' + key;
}
exports.loc = loc;
//-----------------------------------------------------
// Input Helpers
//-----------------------------------------------------
module.exports.getVariable = task.getVariable;
module.exports.setVariable = task.setVariable;
module.exports.getInput = task.getInput;
module.exports.getBoolInput = task.getBoolInput;
module.exports.setEnvVar = task.setEnvVar;
module.exports.getDelimitedInput = task.getDelimitedInput;
module.exports.filePathSupplied = task.filePathSupplied;
function getPathInput(name, required, check) {
    var inval = module.exports.getInput(name, required);
    if (inval) {
        if (check) {
            checkPath(inval, name);
        }
    }
    return inval;
}
module.exports.getPathInput = getPathInput;
//-----------------------------------------------------
// Endpoint Helpers
//-----------------------------------------------------
module.exports.getEndpointUrl = task.getEndpointUrl;
module.exports.getEndpointDataParameter = task.getEndpointDataParameter;
module.exports.getEndpointAuthorizationScheme = task.getEndpointAuthorizationScheme;
module.exports.getEndpointAuthorizationParameter = task.getEndpointAuthorizationParameter;
module.exports.getEndpointAuthorization = task.getEndpointAuthorization;
//-----------------------------------------------------
// Fs Helpers
//-----------------------------------------------------
var FsStats = (function () {
    function FsStats() {
    }
    FsStats.prototype.setAnswers = function (mockResponses) {
        this.m_isFile = mockResponses['isFile'] || false;
        this.m_isDirectory = mockResponses['isDirectory'] || false;
        this.m_isBlockDevice = mockResponses['isBlockDevice'] || false;
        this.m_isCharacterDevice = mockResponses['isCharacterDevice'] || false;
        this.m_isSymbolicLink = mockResponses['isSymbolicLink'] || false;
        this.m_isFIFO = mockResponses['isFIFO'] || false;
        this.m_isSocket = mockResponses['isSocket'] || false;
        this.dev = mockResponses['dev'];
        this.ino = mockResponses['ino'];
        this.mode = mockResponses['mode'];
        this.nlink = mockResponses['nlink'];
        this.uid = mockResponses['uid'];
        this.gid = mockResponses['gid'];
        this.rdev = mockResponses['rdev'];
        this.size = mockResponses['size'];
        this.blksize = mockResponses['blksize'];
        this.blocks = mockResponses['blocks'];
        this.atime = mockResponses['atime'];
        this.mtime = mockResponses['mtime'];
        this.ctime = mockResponses['ctime'];
        this.m_isSocket = mockResponses['isSocket'];
    };
    FsStats.prototype.isFile = function () {
        return this.m_isFile;
    };
    FsStats.prototype.isDirectory = function () {
        return this.m_isDirectory;
    };
    FsStats.prototype.isBlockDevice = function () {
        return this.m_isBlockDevice;
    };
    FsStats.prototype.isCharacterDevice = function () {
        return this.m_isCharacterDevice;
    };
    FsStats.prototype.isSymbolicLink = function () {
        return this.m_isSymbolicLink;
    };
    FsStats.prototype.isFIFO = function () {
        return this.m_isFIFO;
    };
    FsStats.prototype.isSocket = function () {
        return this.m_isSocket;
    };
    return FsStats;
}());
exports.FsStats = FsStats;
function stats(path) {
    var fsStats = new FsStats();
    fsStats.setAnswers(mock.getResponse('stats', path) || {});
    return fsStats;
}
exports.stats = stats;
function exist(path) {
    return mock.getResponse('exist', path) || false;
}
exports.exist = exist;
function writeFile(file, data, options) {
    //do nothing
}
exports.writeFile = writeFile;
function osType() {
    return mock.getResponse('osType', 'osType');
}
exports.osType = osType;
function cwd() {
    return mock.getResponse('cwd', 'cwd');
}
exports.cwd = cwd;
//-----------------------------------------------------
// Cmd Helpers
//-----------------------------------------------------
module.exports.command = task.command;
module.exports.warning = task.warning;
module.exports.error = task.error;
module.exports.debug = task.debug;
function cd(path) {
    // do nothing.  TODO: keep stack with asserts
}
exports.cd = cd;
function pushd(path) {
    // do nothing.  TODO: keep stack with asserts
}
exports.pushd = pushd;
function popd() {
    // do nothing.  TODO: keep stack with asserts
}
exports.popd = popd;
//------------------------------------------------
// Validation Helpers
//------------------------------------------------
function checkPath(p, name) {
    module.exports.debug('check path : ' + p);
    if (!p || !mock.getResponse('checkPath', p)) {
        throw new Error('Not found ' + p);
    }
}
exports.checkPath = checkPath;
//-----------------------------------------------------
// Shell/File I/O Helpers
// Abstract these away so we can
// - default to good error handling
// - inject system.debug info
// - have option to switch internal impl (shelljs now)
//-----------------------------------------------------
function mkdirP(p) {
    module.exports.debug('creating path: ' + p);
}
exports.mkdirP = mkdirP;
function resolve() {
    // we can't do ...param if we target ES6 and node 5.  This is what <=ES5 compiles down to.
    //return the posix implementation in the mock, so paths will be consistent when L0 tests are run on Windows or Mac/Linux
    var absolutePath = path.posix.resolve.apply(this, arguments);
    module.exports.debug('Absolute path for pathSegments: ' + arguments + ' = ' + absolutePath);
    return absolutePath;
}
exports.resolve = resolve;
function which(tool, check) {
    var response = mock.getResponse('which', tool);
    if (check) {
        checkPath(response, tool);
    }
    return response;
}
exports.which = which;
function ls(options, paths) {
    var response = mock.getResponse('ls', paths[0]);
    if (!response) {
        return [];
    }
    return response;
}
exports.ls = ls;
function cp(options, source, dest) {
    console.log('###copying###');
    module.exports.debug('copying ' + source + ' to ' + dest);
}
exports.cp = cp;
function find(findPath) {
    return mock.getResponse('find', findPath);
}
exports.find = find;
function rmRF(path) {
    var response = mock.getResponse('rmRF', path);
    if (!response['success']) {
        module.exports.setResult(1, response['message']);
    }
}
exports.rmRF = rmRF;
function mv(source, dest, force, continueOnError) {
    module.exports.debug('moving ' + source + ' to ' + dest);
    return true;
}
exports.mv = mv;
function glob(pattern) {
    module.exports.debug('glob ' + pattern);
    var matches = mock.getResponse('glob', pattern);
    module.exports.debug('found ' + matches.length + ' matches');
    if (matches.length > 0) {
        var m = Math.min(matches.length, 10);
        module.exports.debug('matches:');
        if (m == 10) {
            module.exports.debug('listing first 10 matches as samples');
        }
        for (var i = 0; i < m; i++) {
            module.exports.debug(matches[i]);
        }
    }
    return matches;
}
exports.glob = glob;
function globFirst(pattern) {
    module.exports.debug('globFirst ' + pattern);
    var matches = glob(pattern);
    if (matches.length > 1) {
        module.exports.warning('multiple workspace matches.  using first.');
    }
    module.exports.debug('found ' + matches.length + ' matches');
    return matches[0];
}
exports.globFirst = globFirst;
//-----------------------------------------------------
// Exec convenience wrapper
//-----------------------------------------------------
function exec(tool, args, options) {
    var toolPath = which(tool, true);
    var tr = this.tool(toolPath);
    if (args) {
        tr.arg(args);
    }
    return tr.exec(options);
}
exports.exec = exec;
function execSync(tool, args, options) {
    var toolPath = which(tool, true);
    var tr = this.tool(toolPath);
    if (args) {
        tr.arg(args);
    }
    return tr.execSync(options);
}
exports.execSync = execSync;
function tool(tool) {
    var tr = new trm.ToolRunner(tool);
    tr.on('debug', function (message) {
        module.exports.debug(message);
    });
    return tr;
}
exports.tool = tool;
function match(list, pattern, options) {
    return mock.getResponse('match', pattern) || [];
}
exports.match = match;
function matchFile(list, pattern, options) {
    return mock.getResponse('match', pattern) || [];
}
exports.matchFile = matchFile;
function filter(pattern, options) {
    var filterList = mock.getResponse('filter', pattern) || [];
    return function (pattern, i, arr) {
        return filterList.indexOf(pattern) >= 0;
    };
}
exports.filter = filter;
//-----------------------------------------------------
// Test Publisher
//-----------------------------------------------------
var TestPublisher = (function () {
    function TestPublisher(testRunner) {
        this.testRunner = testRunner;
    }
    TestPublisher.prototype.publish = function (resultFiles, mergeResults, platform, config, runTitle, publishRunAttachments) {
        var properties = {};
        properties['type'] = this.testRunner;
        if (mergeResults) {
            properties['mergeResults'] = mergeResults;
        }
        if (platform) {
            properties['platform'] = platform;
        }
        if (config) {
            properties['config'] = config;
        }
        if (runTitle) {
            properties['runTitle'] = runTitle;
        }
        if (publishRunAttachments) {
            properties['publishRunAttachments'] = publishRunAttachments;
        }
        if (resultFiles) {
            properties['resultFiles'] = resultFiles;
        }
        module.exports.command('results.publish', properties, '');
    };
    return TestPublisher;
}());
exports.TestPublisher = TestPublisher;
//-----------------------------------------------------
// Code Coverage Publisher
//-----------------------------------------------------
var CodeCoveragePublisher = (function () {
    function CodeCoveragePublisher() {
    }
    CodeCoveragePublisher.prototype.publish = function (codeCoverageTool, summaryFileLocation, reportDirectory, additionalCodeCoverageFiles) {
        var properties = {};
        if (codeCoverageTool) {
            properties['codecoveragetool'] = codeCoverageTool;
        }
        if (summaryFileLocation) {
            properties['summaryfile'] = summaryFileLocation;
        }
        if (reportDirectory) {
            properties['reportdirectory'] = reportDirectory;
        }
        if (additionalCodeCoverageFiles) {
            properties['additionalcodecoveragefiles'] = additionalCodeCoverageFiles;
        }
        module.exports.command('codecoverage.publish', properties, "");
    };
    return CodeCoveragePublisher;
}());
exports.CodeCoveragePublisher = CodeCoveragePublisher;
//-----------------------------------------------------
// Code coverage Publisher
//-----------------------------------------------------
var CodeCoverageEnabler = (function () {
    function CodeCoverageEnabler(buildTool, ccTool) {
        this.buildTool = buildTool;
        this.ccTool = ccTool;
    }
    CodeCoverageEnabler.prototype.enableCodeCoverage = function (buildProps) {
        buildProps['buildtool'] = this.buildTool;
        buildProps['codecoveragetool'] = this.ccTool;
        module.exports.command('codecoverage.enable', buildProps, "");
    };
    return CodeCoverageEnabler;
}());
exports.CodeCoverageEnabler = CodeCoverageEnabler;
//-----------------------------------------------------
// Tools
//-----------------------------------------------------
exports.TaskCommand = tcm.TaskCommand;
exports.commandFromString = tcm.commandFromString;
exports.ToolRunner = trm.ToolRunner;
